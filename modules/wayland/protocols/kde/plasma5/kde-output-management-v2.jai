/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: kde_output_management_v2
 */

kde_output_management_v2_interface: wl_interface;
kde_output_management_v2 :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *kde_output_management_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *kde_output_management_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *kde_output_management_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *kde_output_management_v2) #c_call {
        wl_proxy.destroy(self);
    }

    create_configuration :: inline (self: *kde_output_management_v2) -> *kde_output_configuration_v2 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, KDE_OUTPUT_MANAGEMENT_V2_CREATE_CONFIGURATION,
            *kde_output_configuration_v2_interface, wl_proxy.get_version(self), 0,
            null);
        return cast(*kde_output_configuration_v2) ret;
    }
}

KDE_OUTPUT_MANAGEMENT_V2_CREATE_CONFIGURATION       : u32 : 0;
KDE_OUTPUT_MANAGEMENT_V2_CREATE_CONFIGURATION_SINCE : u32 : 1;

kde_output_configuration_v2_interface: wl_interface;
kde_output_configuration_v2 :: struct {
    #as _proxy: wl_proxy;

    /* ENUM: kde_output_configuration_v2::error */
    error_already_applied : u32 : 0;

    /* ENUM: kde_output_configuration_v2::vrr_policy */
    vrr_policy_never     : u32 : 0;
    vrr_policy_always    : u32 : 1;
    vrr_policy_automatic : u32 : 2;

    /* ENUM: kde_output_configuration_v2::rgb_range */
    rgb_range_automatic : u32 : 0;
    rgb_range_full      : u32 : 1;
    rgb_range_limited   : u32 : 2;

    set_user_data :: inline (self: *kde_output_configuration_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *kde_output_configuration_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *kde_output_configuration_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    enable :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, enable: s32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_ENABLE,
            null, wl_proxy.get_version(self), 0,
            outputdevice, enable);
    }

    mode :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, mode: *kde_output_device_mode_v2) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_MODE,
            null, wl_proxy.get_version(self), 0,
            outputdevice, mode);
    }

    transform :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, transform: s32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_TRANSFORM,
            null, wl_proxy.get_version(self), 0,
            outputdevice, transform);
    }

    position :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, x: s32, y: s32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_POSITION,
            null, wl_proxy.get_version(self), 0,
            outputdevice, x, y);
    }

    scale :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, scale: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_SCALE,
            null, wl_proxy.get_version(self), 0,
            outputdevice, scale);
    }

    apply :: inline (self: *kde_output_configuration_v2) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_APPLY,
            null, wl_proxy.get_version(self), 0);
    }

    destroy :: inline (self: *kde_output_configuration_v2) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    overscan :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, overscan: u32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_OVERSCAN,
            null, wl_proxy.get_version(self), 0,
            outputdevice, overscan);
    }

    set_vrr_policy :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, policy: u32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_SET_VRR_POLICY,
            null, wl_proxy.get_version(self), 0,
            outputdevice, policy);
    }

    set_rgb_range :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, rgb_range: u32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_SET_RGB_RANGE,
            null, wl_proxy.get_version(self), 0,
            outputdevice, rgb_range);
    }

    set_primary_output :: inline (self: *kde_output_configuration_v2, output: *kde_output_device_v2) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_SET_PRIMARY_OUTPUT,
            null, wl_proxy.get_version(self), 0,
            output);
    }

    set_priority :: inline (self: *kde_output_configuration_v2, outputdevice: *kde_output_device_v2, priority: u32) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_OUTPUT_CONFIGURATION_V2_SET_PRIORITY,
            null, wl_proxy.get_version(self), 0,
            outputdevice, priority);
    }

    add_listener :: inline (self: *kde_output_configuration_v2, listener: *kde_output_configuration_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

KDE_OUTPUT_CONFIGURATION_V2_ENABLE                   : u32 : 0;
KDE_OUTPUT_CONFIGURATION_V2_MODE                     : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_TRANSFORM                : u32 : 2;
KDE_OUTPUT_CONFIGURATION_V2_POSITION                 : u32 : 3;
KDE_OUTPUT_CONFIGURATION_V2_SCALE                    : u32 : 4;
KDE_OUTPUT_CONFIGURATION_V2_APPLY                    : u32 : 5;
KDE_OUTPUT_CONFIGURATION_V2_DESTROY                  : u32 : 6;
KDE_OUTPUT_CONFIGURATION_V2_OVERSCAN                 : u32 : 7;
KDE_OUTPUT_CONFIGURATION_V2_SET_VRR_POLICY           : u32 : 8;
KDE_OUTPUT_CONFIGURATION_V2_SET_RGB_RANGE            : u32 : 9;
KDE_OUTPUT_CONFIGURATION_V2_SET_PRIMARY_OUTPUT       : u32 : 10;
KDE_OUTPUT_CONFIGURATION_V2_SET_PRIORITY             : u32 : 11;
KDE_OUTPUT_CONFIGURATION_V2_ENABLE_SINCE             : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_MODE_SINCE               : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_TRANSFORM_SINCE          : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_POSITION_SINCE           : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_SCALE_SINCE              : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_APPLY_SINCE              : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_DESTROY_SINCE            : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_OVERSCAN_SINCE           : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_SET_VRR_POLICY_SINCE     : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_SET_RGB_RANGE_SINCE      : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_SET_PRIMARY_OUTPUT_SINCE : u32 : 2;
KDE_OUTPUT_CONFIGURATION_V2_SET_PRIORITY_SINCE       : u32 : 3;
KDE_OUTPUT_CONFIGURATION_V2_APPLIED_SINCE            : u32 : 1;
KDE_OUTPUT_CONFIGURATION_V2_FAILED_SINCE             : u32 : 1;

kde_output_configuration_v2_listener :: struct {
    applied := _stubs_.applied;
    failed  := _stubs_.failed;

    _stubs_ :: struct {
        applied :: (data: *void,
            self: *kde_output_configuration_v2) -> void #c_call {}
        failed :: (data: *void,
            self: *kde_output_configuration_v2) -> void #c_call {}
    }
}


#scope_module
kde_output_management_v2_protocol_init :: () {
    kde_output_management_v2_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: kde_output_management_v2::create_configuration */
        *kde_output_configuration_v2_interface,   // 1
        /* REQUEST: kde_output_configuration_v2::enable */
        *kde_output_device_v2_interface,   // 2
        null,  // 3
        /* REQUEST: kde_output_configuration_v2::mode */
        *kde_output_device_v2_interface,   // 4
        *kde_output_device_mode_v2_interface,   // 5
        /* REQUEST: kde_output_configuration_v2::transform */
        *kde_output_device_v2_interface,   // 6
        null,  // 7
        /* REQUEST: kde_output_configuration_v2::position */
        *kde_output_device_v2_interface,   // 8
        null,  // 9
        null,  // 10
        /* REQUEST: kde_output_configuration_v2::scale */
        *kde_output_device_v2_interface,   // 11
        null,  // 12
        /* REQUEST: kde_output_configuration_v2::overscan */
        *kde_output_device_v2_interface,   // 13
        null,  // 14
        /* REQUEST: kde_output_configuration_v2::set_vrr_policy */
        *kde_output_device_v2_interface,   // 15
        null,  // 16
        /* REQUEST: kde_output_configuration_v2::set_rgb_range */
        *kde_output_device_v2_interface,   // 17
        null,  // 18
        /* REQUEST: kde_output_configuration_v2::set_primary_output */
        *kde_output_device_v2_interface,   // 19
        /* REQUEST: kde_output_configuration_v2::set_priority */
        *kde_output_device_v2_interface,   // 20
        null,  // 21
    ];

    kde_output_management_v2_requests[0] = .{"create_configuration", "n", kde_output_management_v2_types_storage.data + 0};
    kde_output_management_v2_interface = .{
        "kde_output_management_v2", 3,
        kde_output_management_v2_requests.count, kde_output_management_v2_requests.data,
        0, null,
    };

    kde_output_configuration_v2_requests[0] = .{"enable", "oi", kde_output_management_v2_types_storage.data + 1};
    kde_output_configuration_v2_requests[1] = .{"mode", "oo", kde_output_management_v2_types_storage.data + 2};
    kde_output_configuration_v2_requests[2] = .{"transform", "oi", kde_output_management_v2_types_storage.data + 4};
    kde_output_configuration_v2_requests[3] = .{"position", "oii", kde_output_management_v2_types_storage.data + 6};
    kde_output_configuration_v2_requests[4] = .{"scale", "of", kde_output_management_v2_types_storage.data + 8};
    kde_output_configuration_v2_requests[5] = .{"apply", "", kde_output_management_v2_types_storage.data + 0};
    kde_output_configuration_v2_requests[6] = .{"destroy", "", kde_output_management_v2_types_storage.data + 0};
    kde_output_configuration_v2_requests[7] = .{"overscan", "ou", kde_output_management_v2_types_storage.data + 11};
    kde_output_configuration_v2_requests[8] = .{"set_vrr_policy", "ou", kde_output_management_v2_types_storage.data + 13};
    kde_output_configuration_v2_requests[9] = .{"set_rgb_range", "ou", kde_output_management_v2_types_storage.data + 15};
    kde_output_configuration_v2_requests[10] = .{"set_primary_output", "o", kde_output_management_v2_types_storage.data + 17};
    kde_output_configuration_v2_requests[11] = .{"set_priority", "ou", kde_output_management_v2_types_storage.data + 19};
    kde_output_configuration_v2_events[0] = .{"applied", "", kde_output_management_v2_types_storage.data + 0};
    kde_output_configuration_v2_events[1] = .{"failed", "", kde_output_management_v2_types_storage.data + 0};
    kde_output_configuration_v2_interface = .{
        "kde_output_configuration_v2", 3,
        kde_output_configuration_v2_requests.count, kde_output_configuration_v2_requests.data,
        kde_output_configuration_v2_events.count, kde_output_configuration_v2_events.data,
    };
}


#scope_file
kde_output_management_v2_types_storage: []*wl_interface;

kde_output_management_v2_requests: [1]wl_message;

kde_output_configuration_v2_requests: [12]wl_message;
kde_output_configuration_v2_events  : [2]wl_message;

#assert size_of(kde_output_management_v2) == 0 "wayland-scanner bug: kde_output_management_v2 is non-empty";
#assert size_of(kde_output_configuration_v2) == 0 "wayland-scanner bug: kde_output_configuration_v2 is non-empty";
