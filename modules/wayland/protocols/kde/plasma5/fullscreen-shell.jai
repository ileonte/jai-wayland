/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: fullscreen_shell
 */

_wl_fullscreen_shell_interface: wl_interface;
_wl_fullscreen_shell :: struct {
    #as _proxy: wl_proxy;

    /* ENUM: _wl_fullscreen_shell::capability */
    capability_arbitrary_modes : u32 : 1;
    capability_cursor_plane    : u32 : 2;

    /* ENUM: _wl_fullscreen_shell::present_method */
    present_method_default   : u32 : 0;
    present_method_center    : u32 : 1;
    present_method_zoom      : u32 : 2;
    present_method_zoom_crop : u32 : 3;
    present_method_stretch   : u32 : 4;

    /* ENUM: _wl_fullscreen_shell::error */
    error_invalid_method : u32 : 0;

    set_user_data :: inline (self: *_wl_fullscreen_shell, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *_wl_fullscreen_shell) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *_wl_fullscreen_shell) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *_wl_fullscreen_shell) #c_call {
        wl_proxy.destroy(self);
    }

    release :: inline (self: *_wl_fullscreen_shell) #c_call {
        wl_proxy.marshal_flags(
            self, _WL_FULLSCREEN_SHELL_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    present_surface :: inline (self: *_wl_fullscreen_shell, surface: *wl_surface, method: u32, output: *wl_output) #c_call {
        wl_proxy.marshal_flags(
            self, _WL_FULLSCREEN_SHELL_PRESENT_SURFACE,
            null, wl_proxy.get_version(self), 0,
            surface, method, output);
    }

    present_surface_for_mode :: inline (self: *_wl_fullscreen_shell, surface: *wl_surface, output: *wl_output, framerate: s32) -> *_wl_fullscreen_shell_mode_feedback #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, _WL_FULLSCREEN_SHELL_PRESENT_SURFACE_FOR_MODE,
            *_wl_fullscreen_shell_mode_feedback_interface, wl_proxy.get_version(self), 0,
            surface, output, framerate, null);
        return cast(*_wl_fullscreen_shell_mode_feedback) ret;
    }

    add_listener :: inline (self: *_wl_fullscreen_shell, listener: *_wl_fullscreen_shell_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

_WL_FULLSCREEN_SHELL_RELEASE                        : u32 : 0;
_WL_FULLSCREEN_SHELL_PRESENT_SURFACE                : u32 : 1;
_WL_FULLSCREEN_SHELL_PRESENT_SURFACE_FOR_MODE       : u32 : 2;
_WL_FULLSCREEN_SHELL_RELEASE_SINCE                  : u32 : 1;
_WL_FULLSCREEN_SHELL_PRESENT_SURFACE_SINCE          : u32 : 1;
_WL_FULLSCREEN_SHELL_PRESENT_SURFACE_FOR_MODE_SINCE : u32 : 1;
_WL_FULLSCREEN_SHELL_CAPABILITY_SINCE               : u32 : 1;

_wl_fullscreen_shell_listener :: struct {
    capability := _stubs_.capability;

    _stubs_ :: struct {
        capability :: (data: *void,
            self: *_wl_fullscreen_shell,
            capability: u32) -> void #c_call {}
    }
}

_wl_fullscreen_shell_mode_feedback_interface: wl_interface;
_wl_fullscreen_shell_mode_feedback :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *_wl_fullscreen_shell_mode_feedback, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *_wl_fullscreen_shell_mode_feedback) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *_wl_fullscreen_shell_mode_feedback) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *_wl_fullscreen_shell_mode_feedback) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *_wl_fullscreen_shell_mode_feedback, listener: *_wl_fullscreen_shell_mode_feedback_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}
_WL_FULLSCREEN_SHELL_MODE_FEEDBACK_MODE_SUCCESSFUL_SINCE   : u32 : 1;
_WL_FULLSCREEN_SHELL_MODE_FEEDBACK_MODE_FAILED_SINCE       : u32 : 1;
_WL_FULLSCREEN_SHELL_MODE_FEEDBACK_PRESENT_CANCELLED_SINCE : u32 : 1;

_wl_fullscreen_shell_mode_feedback_listener :: struct {
    mode_successful   := _stubs_.mode_successful;
    mode_failed       := _stubs_.mode_failed;
    present_cancelled := _stubs_.present_cancelled;

    _stubs_ :: struct {
        mode_successful :: (data: *void,
            self: *_wl_fullscreen_shell_mode_feedback) -> void #c_call {}
        mode_failed :: (data: *void,
            self: *_wl_fullscreen_shell_mode_feedback) -> void #c_call {}
        present_cancelled :: (data: *void,
            self: *_wl_fullscreen_shell_mode_feedback) -> void #c_call {}
    }
}


#scope_module
fullscreen_shell_protocol_init :: () {
    fullscreen_shell_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: _wl_fullscreen_shell::present_surface */
        *wl_surface_interface,   // 1
        null,  // 2
        *wl_output_interface,   // 3
        /* REQUEST: _wl_fullscreen_shell::present_surface_for_mode */
        *wl_surface_interface,   // 4
        *wl_output_interface,   // 5
        null,  // 6
        *_wl_fullscreen_shell_mode_feedback_interface,   // 7
        /* EVENT: _wl_fullscreen_shell::capability */
        null,  // 8
    ];

    _wl_fullscreen_shell_requests[0] = .{"release", "", fullscreen_shell_types_storage.data + 0};
    _wl_fullscreen_shell_requests[1] = .{"present_surface", "ouo", fullscreen_shell_types_storage.data + 0};
    _wl_fullscreen_shell_requests[2] = .{"present_surface_for_mode", "ooin", fullscreen_shell_types_storage.data + 1};
    _wl_fullscreen_shell_events[0] = .{"capability", "u", fullscreen_shell_types_storage.data + 4};
    _wl_fullscreen_shell_interface = .{
        "_wl_fullscreen_shell", 1,
        _wl_fullscreen_shell_requests.count, _wl_fullscreen_shell_requests.data,
        _wl_fullscreen_shell_events.count, _wl_fullscreen_shell_events.data,
    };

    _wl_fullscreen_shell_mode_feedback_events[0] = .{"mode_successful", "", fullscreen_shell_types_storage.data + 0};
    _wl_fullscreen_shell_mode_feedback_events[1] = .{"mode_failed", "", fullscreen_shell_types_storage.data + 0};
    _wl_fullscreen_shell_mode_feedback_events[2] = .{"present_cancelled", "", fullscreen_shell_types_storage.data + 0};
    _wl_fullscreen_shell_mode_feedback_interface = .{
        "_wl_fullscreen_shell_mode_feedback", 1,
        0, null,
        _wl_fullscreen_shell_mode_feedback_events.count, _wl_fullscreen_shell_mode_feedback_events.data,
    };
}


#scope_file
fullscreen_shell_types_storage: []*wl_interface;

_wl_fullscreen_shell_requests: [3]wl_message;
_wl_fullscreen_shell_events  : [1]wl_message;

_wl_fullscreen_shell_mode_feedback_events  : [3]wl_message;

#assert size_of(_wl_fullscreen_shell) == 0 "wayland-scanner bug: _wl_fullscreen_shell is non-empty";
#assert size_of(_wl_fullscreen_shell_mode_feedback) == 0 "wayland-scanner bug: _wl_fullscreen_shell_mode_feedback is non-empty";
