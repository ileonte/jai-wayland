/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: kde_output_device_v2
 */

kde_output_device_v2_interface: wl_interface;
kde_output_device_v2 :: struct {
    #as _proxy: wl_proxy;

    /* ENUM: kde_output_device_v2::subpixel */
    subpixel_unknown        : u32 : 0;
    subpixel_none           : u32 : 1;
    subpixel_horizontal_rgb : u32 : 2;
    subpixel_horizontal_bgr : u32 : 3;
    subpixel_vertical_rgb   : u32 : 4;
    subpixel_vertical_bgr   : u32 : 5;

    /* ENUM: kde_output_device_v2::transform */
    transform_normal      : u32 : 0;
    transform_90          : u32 : 1;
    transform_180         : u32 : 2;
    transform_270         : u32 : 3;
    transform_flipped     : u32 : 4;
    transform_flipped_90  : u32 : 5;
    transform_flipped_180 : u32 : 6;
    transform_flipped_270 : u32 : 7;

    /* ENUM: kde_output_device_v2::capability */
    capability_overscan  : u32 : 1;
    capability_vrr       : u32 : 2;
    capability_rgb_range : u32 : 4;

    /* ENUM: kde_output_device_v2::vrr_policy */
    vrr_policy_never     : u32 : 0;
    vrr_policy_always    : u32 : 1;
    vrr_policy_automatic : u32 : 2;

    /* ENUM: kde_output_device_v2::rgb_range */
    rgb_range_automatic : u32 : 0;
    rgb_range_full      : u32 : 1;
    rgb_range_limited   : u32 : 2;

    set_user_data :: inline (self: *kde_output_device_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *kde_output_device_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *kde_output_device_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *kde_output_device_v2) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *kde_output_device_v2, listener: *kde_output_device_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

KDE_OUTPUT_DEVICE_V2_GEOMETRY_SINCE      : u32 : 1;
KDE_OUTPUT_DEVICE_V2_CURRENT_MODE_SINCE  : u32 : 1;
KDE_OUTPUT_DEVICE_V2_MODE_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_DONE_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_SCALE_SINCE         : u32 : 1;
KDE_OUTPUT_DEVICE_V2_EDID_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_ENABLED_SINCE       : u32 : 1;
KDE_OUTPUT_DEVICE_V2_UUID_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_SERIAL_NUMBER_SINCE : u32 : 1;
KDE_OUTPUT_DEVICE_V2_EISA_ID_SINCE       : u32 : 1;
KDE_OUTPUT_DEVICE_V2_CAPABILITIES_SINCE  : u32 : 1;
KDE_OUTPUT_DEVICE_V2_OVERSCAN_SINCE      : u32 : 1;
KDE_OUTPUT_DEVICE_V2_VRR_POLICY_SINCE    : u32 : 1;
KDE_OUTPUT_DEVICE_V2_RGB_RANGE_SINCE     : u32 : 1;
KDE_OUTPUT_DEVICE_V2_NAME_SINCE          : u32 : 2;

kde_output_device_v2_listener :: struct {
    geometry      := _stubs_.geometry;
    current_mode  := _stubs_.current_mode;
    mode          := _stubs_.mode;
    done          := _stubs_.done;
    scale         := _stubs_.scale;
    edid          := _stubs_.edid;
    enabled       := _stubs_.enabled;
    uuid          := _stubs_.uuid;
    serial_number := _stubs_.serial_number;
    eisa_id       := _stubs_.eisa_id;
    capabilities  := _stubs_.capabilities;
    overscan      := _stubs_.overscan;
    vrr_policy    := _stubs_.vrr_policy;
    rgb_range     := _stubs_.rgb_range;
    name          := _stubs_.name;

    _stubs_ :: struct {
        geometry :: (data: *void,
            self: *kde_output_device_v2,
            x: s32,
            y: s32,
            physical_width: s32,
            physical_height: s32,
            subpixel: s32,
            make: *u8,
            model: *u8,
            transform: s32) -> void #c_call {}
        current_mode :: (data: *void,
            self: *kde_output_device_v2,
            mode: *kde_output_device_mode_v2) -> void #c_call {}
        mode :: (data: *void,
            self: *kde_output_device_v2,
            mode: *kde_output_device_mode_v2) -> void #c_call {}
        done :: (data: *void,
            self: *kde_output_device_v2) -> void #c_call {}
        scale :: (data: *void,
            self: *kde_output_device_v2,
            factor: wl_fixed_t) -> void #c_call {}
        edid :: (data: *void,
            self: *kde_output_device_v2,
            raw: *u8) -> void #c_call {}
        enabled :: (data: *void,
            self: *kde_output_device_v2,
            enabled: s32) -> void #c_call {}
        uuid :: (data: *void,
            self: *kde_output_device_v2,
            uuid: *u8) -> void #c_call {}
        serial_number :: (data: *void,
            self: *kde_output_device_v2,
            serialNumber: *u8) -> void #c_call {}
        eisa_id :: (data: *void,
            self: *kde_output_device_v2,
            eisaId: *u8) -> void #c_call {}
        capabilities :: (data: *void,
            self: *kde_output_device_v2,
            flags: u32) -> void #c_call {}
        overscan :: (data: *void,
            self: *kde_output_device_v2,
            overscan: u32) -> void #c_call {}
        vrr_policy :: (data: *void,
            self: *kde_output_device_v2,
            vrr_policy: u32) -> void #c_call {}
        rgb_range :: (data: *void,
            self: *kde_output_device_v2,
            rgb_range: u32) -> void #c_call {}
        name :: (data: *void,
            self: *kde_output_device_v2,
            name: *u8) -> void #c_call {}
    }
}

kde_output_device_mode_v2_interface: wl_interface;
kde_output_device_mode_v2 :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *kde_output_device_mode_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *kde_output_device_mode_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *kde_output_device_mode_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *kde_output_device_mode_v2) #c_call {
        wl_proxy.destroy(self);
    }

    add_listener :: inline (self: *kde_output_device_mode_v2, listener: *kde_output_device_mode_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}
KDE_OUTPUT_DEVICE_MODE_V2_SIZE_SINCE      : u32 : 1;
KDE_OUTPUT_DEVICE_MODE_V2_REFRESH_SINCE   : u32 : 1;
KDE_OUTPUT_DEVICE_MODE_V2_PREFERRED_SINCE : u32 : 1;
KDE_OUTPUT_DEVICE_MODE_V2_REMOVED_SINCE   : u32 : 1;

kde_output_device_mode_v2_listener :: struct {
    size      := _stubs_.size;
    refresh   := _stubs_.refresh;
    preferred := _stubs_.preferred;
    removed   := _stubs_.removed;

    _stubs_ :: struct {
        size :: (data: *void,
            self: *kde_output_device_mode_v2,
            width: s32,
            height: s32) -> void #c_call {}
        refresh :: (data: *void,
            self: *kde_output_device_mode_v2,
            refresh: s32) -> void #c_call {}
        preferred :: (data: *void,
            self: *kde_output_device_mode_v2) -> void #c_call {}
        removed :: (data: *void,
            self: *kde_output_device_mode_v2) -> void #c_call {}
    }
}


#scope_module
kde_output_device_v2_protocol_init :: () {
    kde_output_device_v2_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* EVENT: kde_output_device_v2::geometry */
        null,  // 1
        null,  // 2
        null,  // 3
        null,  // 4
        null,  // 5
        null,  // 6
        null,  // 7
        null,  // 8
        /* EVENT: kde_output_device_v2::current_mode */
        *kde_output_device_mode_v2_interface,  // 9
        /* EVENT: kde_output_device_v2::mode */
        *kde_output_device_mode_v2_interface,  // 10
        /* EVENT: kde_output_device_v2::scale */
        null,  // 11
        /* EVENT: kde_output_device_v2::edid */
        null,  // 12
        /* EVENT: kde_output_device_v2::enabled */
        null,  // 13
        /* EVENT: kde_output_device_v2::uuid */
        null,  // 14
        /* EVENT: kde_output_device_v2::serial_number */
        null,  // 15
        /* EVENT: kde_output_device_v2::eisa_id */
        null,  // 16
        /* EVENT: kde_output_device_v2::capabilities */
        null,  // 17
        /* EVENT: kde_output_device_v2::overscan */
        null,  // 18
        /* EVENT: kde_output_device_v2::vrr_policy */
        null,  // 19
        /* EVENT: kde_output_device_v2::rgb_range */
        null,  // 20
        /* EVENT: kde_output_device_v2::name */
        null,  // 21
        /* EVENT: kde_output_device_mode_v2::size */
        null,  // 22
        null,  // 23
        /* EVENT: kde_output_device_mode_v2::refresh */
        null,  // 24
    ];

    kde_output_device_v2_events[0] = .{"geometry", "iiiiissi", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_v2_events[1] = .{"current_mode", "o", kde_output_device_v2_types_storage.data + 1};
    kde_output_device_v2_events[2] = .{"mode", "n", kde_output_device_v2_types_storage.data + 9};
    kde_output_device_v2_events[3] = .{"done", "", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_v2_events[4] = .{"scale", "f", kde_output_device_v2_types_storage.data + 10};
    kde_output_device_v2_events[5] = .{"edid", "s", kde_output_device_v2_types_storage.data + 11};
    kde_output_device_v2_events[6] = .{"enabled", "i", kde_output_device_v2_types_storage.data + 12};
    kde_output_device_v2_events[7] = .{"uuid", "s", kde_output_device_v2_types_storage.data + 13};
    kde_output_device_v2_events[8] = .{"serial_number", "s", kde_output_device_v2_types_storage.data + 14};
    kde_output_device_v2_events[9] = .{"eisa_id", "s", kde_output_device_v2_types_storage.data + 15};
    kde_output_device_v2_events[10] = .{"capabilities", "u", kde_output_device_v2_types_storage.data + 16};
    kde_output_device_v2_events[11] = .{"overscan", "u", kde_output_device_v2_types_storage.data + 17};
    kde_output_device_v2_events[12] = .{"vrr_policy", "u", kde_output_device_v2_types_storage.data + 18};
    kde_output_device_v2_events[13] = .{"rgb_range", "u", kde_output_device_v2_types_storage.data + 19};
    kde_output_device_v2_events[14] = .{"name", "s", kde_output_device_v2_types_storage.data + 20};
    kde_output_device_v2_interface = .{
        "kde_output_device_v2", 2,
        0, null,
        kde_output_device_v2_events.count, kde_output_device_v2_events.data,
    };

    kde_output_device_mode_v2_events[0] = .{"size", "ii", kde_output_device_v2_types_storage.data + 21};
    kde_output_device_mode_v2_events[1] = .{"refresh", "i", kde_output_device_v2_types_storage.data + 22};
    kde_output_device_mode_v2_events[2] = .{"preferred", "", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_mode_v2_events[3] = .{"removed", "", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_mode_v2_interface = .{
        "kde_output_device_mode_v2", 1,
        0, null,
        kde_output_device_mode_v2_events.count, kde_output_device_mode_v2_events.data,
    };
}


#scope_file
kde_output_device_v2_types_storage: []*wl_interface;

kde_output_device_v2_events  : [15]wl_message;

kde_output_device_mode_v2_events  : [4]wl_message;
