/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: fake_input
 */

org_kde_kwin_fake_input_interface: wl_interface;
org_kde_kwin_fake_input :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *org_kde_kwin_fake_input, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_fake_input) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_fake_input) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_fake_input) #c_call {
        wl_proxy.destroy(self);
    }

    authenticate :: inline (self: *org_kde_kwin_fake_input, application: *u8, reason: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_AUTHENTICATE,
            null, wl_proxy.get_version(self), 0,
            application, reason);
    }

    pointer_motion :: inline (self: *org_kde_kwin_fake_input, delta_x: wl_fixed_t, delta_y: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_POINTER_MOTION,
            null, wl_proxy.get_version(self), 0,
            delta_x, delta_y);
    }

    button :: inline (self: *org_kde_kwin_fake_input, button: u32, state: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_BUTTON,
            null, wl_proxy.get_version(self), 0,
            button, state);
    }

    axis :: inline (self: *org_kde_kwin_fake_input, axis: u32, value: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_AXIS,
            null, wl_proxy.get_version(self), 0,
            axis, value);
    }

    touch_down :: inline (self: *org_kde_kwin_fake_input, id: u32, x: wl_fixed_t, y: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_TOUCH_DOWN,
            null, wl_proxy.get_version(self), 0,
            id, x, y);
    }

    touch_motion :: inline (self: *org_kde_kwin_fake_input, id: u32, x: wl_fixed_t, y: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_TOUCH_MOTION,
            null, wl_proxy.get_version(self), 0,
            id, x, y);
    }

    touch_up :: inline (self: *org_kde_kwin_fake_input, id: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_TOUCH_UP,
            null, wl_proxy.get_version(self), 0,
            id);
    }

    touch_cancel :: inline (self: *org_kde_kwin_fake_input) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_TOUCH_CANCEL,
            null, wl_proxy.get_version(self), 0);
    }

    touch_frame :: inline (self: *org_kde_kwin_fake_input) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_TOUCH_FRAME,
            null, wl_proxy.get_version(self), 0);
    }

    pointer_motion_absolute :: inline (self: *org_kde_kwin_fake_input, x: wl_fixed_t, y: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_POINTER_MOTION_ABSOLUTE,
            null, wl_proxy.get_version(self), 0,
            x, y);
    }

    keyboard_key :: inline (self: *org_kde_kwin_fake_input, button: u32, state: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_FAKE_INPUT_KEYBOARD_KEY,
            null, wl_proxy.get_version(self), 0,
            button, state);
    }
}

ORG_KDE_KWIN_FAKE_INPUT_AUTHENTICATE                  : u32 : 0;
ORG_KDE_KWIN_FAKE_INPUT_POINTER_MOTION                : u32 : 1;
ORG_KDE_KWIN_FAKE_INPUT_BUTTON                        : u32 : 2;
ORG_KDE_KWIN_FAKE_INPUT_AXIS                          : u32 : 3;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_DOWN                    : u32 : 4;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_MOTION                  : u32 : 5;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_UP                      : u32 : 6;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_CANCEL                  : u32 : 7;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_FRAME                   : u32 : 8;
ORG_KDE_KWIN_FAKE_INPUT_POINTER_MOTION_ABSOLUTE       : u32 : 9;
ORG_KDE_KWIN_FAKE_INPUT_KEYBOARD_KEY                  : u32 : 10;
ORG_KDE_KWIN_FAKE_INPUT_AUTHENTICATE_SINCE            : u32 : 1;
ORG_KDE_KWIN_FAKE_INPUT_POINTER_MOTION_SINCE          : u32 : 1;
ORG_KDE_KWIN_FAKE_INPUT_BUTTON_SINCE                  : u32 : 1;
ORG_KDE_KWIN_FAKE_INPUT_AXIS_SINCE                    : u32 : 1;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_DOWN_SINCE              : u32 : 2;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_MOTION_SINCE            : u32 : 2;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_UP_SINCE                : u32 : 2;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_CANCEL_SINCE            : u32 : 2;
ORG_KDE_KWIN_FAKE_INPUT_TOUCH_FRAME_SINCE             : u32 : 2;
ORG_KDE_KWIN_FAKE_INPUT_POINTER_MOTION_ABSOLUTE_SINCE : u32 : 3;
ORG_KDE_KWIN_FAKE_INPUT_KEYBOARD_KEY_SINCE            : u32 : 4;


#scope_module
fake_input_protocol_init :: () {
    fake_input_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_fake_input::authenticate */
        null,  // 1
        null,  // 2
        /* REQUEST: org_kde_kwin_fake_input::pointer_motion */
        null,  // 3
        null,  // 4
        /* REQUEST: org_kde_kwin_fake_input::button */
        null,  // 5
        null,  // 6
        /* REQUEST: org_kde_kwin_fake_input::axis */
        null,  // 7
        null,  // 8
        /* REQUEST: org_kde_kwin_fake_input::touch_down */
        null,  // 9
        null,  // 10
        null,  // 11
        /* REQUEST: org_kde_kwin_fake_input::touch_motion */
        null,  // 12
        null,  // 13
        null,  // 14
        /* REQUEST: org_kde_kwin_fake_input::touch_up */
        null,  // 15
        /* REQUEST: org_kde_kwin_fake_input::pointer_motion_absolute */
        null,  // 16
        null,  // 17
        /* REQUEST: org_kde_kwin_fake_input::keyboard_key */
        null,  // 18
        null,  // 19
    ];

    org_kde_kwin_fake_input_requests[0] = .{"authenticate", "ss", fake_input_types_storage.data + 0};
    org_kde_kwin_fake_input_requests[1] = .{"pointer_motion", "ff", fake_input_types_storage.data + 1};
    org_kde_kwin_fake_input_requests[2] = .{"button", "uu", fake_input_types_storage.data + 3};
    org_kde_kwin_fake_input_requests[3] = .{"axis", "uf", fake_input_types_storage.data + 5};
    org_kde_kwin_fake_input_requests[4] = .{"touch_down", "uff", fake_input_types_storage.data + 7};
    org_kde_kwin_fake_input_requests[5] = .{"touch_motion", "uff", fake_input_types_storage.data + 9};
    org_kde_kwin_fake_input_requests[6] = .{"touch_up", "u", fake_input_types_storage.data + 12};
    org_kde_kwin_fake_input_requests[7] = .{"touch_cancel", "", fake_input_types_storage.data + 0};
    org_kde_kwin_fake_input_requests[8] = .{"touch_frame", "", fake_input_types_storage.data + 0};
    org_kde_kwin_fake_input_requests[9] = .{"pointer_motion_absolute", "ff", fake_input_types_storage.data + 15};
    org_kde_kwin_fake_input_requests[10] = .{"keyboard_key", "uu", fake_input_types_storage.data + 16};
    org_kde_kwin_fake_input_interface = .{
        "org_kde_kwin_fake_input", 4,
        org_kde_kwin_fake_input_requests.count, org_kde_kwin_fake_input_requests.data,
        0, null,
    };
}


#scope_file
fake_input_types_storage: []*wl_interface;

org_kde_kwin_fake_input_requests: [11]wl_message;
