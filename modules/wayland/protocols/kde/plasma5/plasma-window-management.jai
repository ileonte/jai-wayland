/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: plasma_window_management
 */

org_kde_plasma_window_management_interface: wl_interface;
org_kde_plasma_window_management :: struct {
    #as _proxy: wl_proxy;

    /* ENUM: org_kde_plasma_window_management::state */
    state_active                     : u32 : 1 << 0;
    state_minimized                  : u32 : 1 << 1;
    state_maximized                  : u32 : 1 << 2;
    state_fullscreen                 : u32 : 1 << 3;
    state_keep_above                 : u32 : 1 << 4;
    state_keep_below                 : u32 : 1 << 5;
    state_on_all_desktops            : u32 : 1 << 6;
    state_demands_attention          : u32 : 1 << 7;
    state_closeable                  : u32 : 1 << 8;
    state_minimizable                : u32 : 1 << 9;
    state_maximizable                : u32 : 1 << 10;
    state_fullscreenable             : u32 : 1 << 11;
    state_skiptaskbar                : u32 : 1 << 12;
    state_shadeable                  : u32 : 1 << 13;
    state_shaded                     : u32 : 1 << 14;
    state_movable                    : u32 : 1 << 15;
    state_resizable                  : u32 : 1 << 16;
    state_virtual_desktop_changeable : u32 : 1 << 17;
    state_skipswitcher               : u32 : 1 << 18;

    /* ENUM: org_kde_plasma_window_management::show_desktop */
    show_desktop_disabled : u32 : 0;
    show_desktop_enabled  : u32 : 1;

    set_user_data :: inline (self: *org_kde_plasma_window_management, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_plasma_window_management) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_plasma_window_management) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_plasma_window_management) #c_call {
        wl_proxy.destroy(self);
    }

    show_desktop :: inline (self: *org_kde_plasma_window_management, state: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_MANAGEMENT_SHOW_DESKTOP,
            null, wl_proxy.get_version(self), 0,
            state);
    }

    get_window :: inline (self: *org_kde_plasma_window_management, internal_window_id: u32) -> *org_kde_plasma_window #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_MANAGEMENT_GET_WINDOW,
            *org_kde_plasma_window_interface, wl_proxy.get_version(self), 0,
            null, internal_window_id);
        return cast(*org_kde_plasma_window) ret;
    }

    get_window_by_uuid :: inline (self: *org_kde_plasma_window_management, internal_window_uuid: *u8) -> *org_kde_plasma_window #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_MANAGEMENT_GET_WINDOW_BY_UUID,
            *org_kde_plasma_window_interface, wl_proxy.get_version(self), 0,
            null, internal_window_uuid);
        return cast(*org_kde_plasma_window) ret;
    }

    add_listener :: inline (self: *org_kde_plasma_window_management, listener: *org_kde_plasma_window_management_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_PLASMA_WINDOW_MANAGEMENT_SHOW_DESKTOP                      : u32 : 0;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_GET_WINDOW                        : u32 : 1;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_GET_WINDOW_BY_UUID                : u32 : 2;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_SHOW_DESKTOP_SINCE                : u32 : 1;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_GET_WINDOW_SINCE                  : u32 : 1;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_GET_WINDOW_BY_UUID_SINCE          : u32 : 12;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_SHOW_DESKTOP_CHANGED_SINCE        : u32 : 1;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_WINDOW_SINCE                      : u32 : 1;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STACKING_ORDER_CHANGED_SINCE      : u32 : 11;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_STACKING_ORDER_UUID_CHANGED_SINCE : u32 : 12;
ORG_KDE_PLASMA_WINDOW_MANAGEMENT_WINDOW_WITH_UUID_SINCE            : u32 : 13;

org_kde_plasma_window_management_listener :: struct {
    show_desktop_changed        := _stubs_.show_desktop_changed;
    window                      := _stubs_.window;
    stacking_order_changed      := _stubs_.stacking_order_changed;
    stacking_order_uuid_changed := _stubs_.stacking_order_uuid_changed;
    window_with_uuid            := _stubs_.window_with_uuid;

    _stubs_ :: struct {
        show_desktop_changed :: (data: *void,
            self: *org_kde_plasma_window_management,
            state: u32) -> void #c_call {}
        window :: (data: *void,
            self: *org_kde_plasma_window_management,
            id: u32) -> void #c_call {}
        stacking_order_changed :: (data: *void,
            self: *org_kde_plasma_window_management,
            ids: *wl_array) -> void #c_call {}
        stacking_order_uuid_changed :: (data: *void,
            self: *org_kde_plasma_window_management,
            uuids: *u8) -> void #c_call {}
        window_with_uuid :: (data: *void,
            self: *org_kde_plasma_window_management,
            id: u32,
            uuid: *u8) -> void #c_call {}
    }
}

org_kde_plasma_window_interface: wl_interface;
org_kde_plasma_window :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *org_kde_plasma_window, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_plasma_window) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_plasma_window) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    set_state :: inline (self: *org_kde_plasma_window, flags: u32, state: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_SET_STATE,
            null, wl_proxy.get_version(self), 0,
            flags, state);
    }

    set_virtual_desktop :: inline (self: *org_kde_plasma_window, number: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_SET_VIRTUAL_DESKTOP,
            null, wl_proxy.get_version(self), 0,
            number);
    }

    set_minimized_geometry :: inline (self: *org_kde_plasma_window, panel: *wl_surface, x: u32, y: u32, width: u32, height: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_SET_MINIMIZED_GEOMETRY,
            null, wl_proxy.get_version(self), 0,
            panel, x, y, width, height);
    }

    unset_minimized_geometry :: inline (self: *org_kde_plasma_window, panel: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_UNSET_MINIMIZED_GEOMETRY,
            null, wl_proxy.get_version(self), 0,
            panel);
    }

    close :: inline (self: *org_kde_plasma_window) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_CLOSE,
            null, wl_proxy.get_version(self), 0);
    }

    request_move :: inline (self: *org_kde_plasma_window) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_MOVE,
            null, wl_proxy.get_version(self), 0);
    }

    request_resize :: inline (self: *org_kde_plasma_window) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_RESIZE,
            null, wl_proxy.get_version(self), 0);
    }

    destroy :: inline (self: *org_kde_plasma_window) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_icon :: inline (self: *org_kde_plasma_window, fd: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_GET_ICON,
            null, wl_proxy.get_version(self), 0,
            fd);
    }

    request_enter_virtual_desktop :: inline (self: *org_kde_plasma_window, id: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_VIRTUAL_DESKTOP,
            null, wl_proxy.get_version(self), 0,
            id);
    }

    request_enter_new_virtual_desktop :: inline (self: *org_kde_plasma_window) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_NEW_VIRTUAL_DESKTOP,
            null, wl_proxy.get_version(self), 0);
    }

    request_leave_virtual_desktop :: inline (self: *org_kde_plasma_window, id: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_LEAVE_VIRTUAL_DESKTOP,
            null, wl_proxy.get_version(self), 0,
            id);
    }

    request_enter_activity :: inline (self: *org_kde_plasma_window, id: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_ACTIVITY,
            null, wl_proxy.get_version(self), 0,
            id);
    }

    request_leave_activity :: inline (self: *org_kde_plasma_window, id: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_REQUEST_LEAVE_ACTIVITY,
            null, wl_proxy.get_version(self), 0,
            id);
    }

    send_to_output :: inline (self: *org_kde_plasma_window, output: *wl_output) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_WINDOW_SEND_TO_OUTPUT,
            null, wl_proxy.get_version(self), 0,
            output);
    }

    add_listener :: inline (self: *org_kde_plasma_window, listener: *org_kde_plasma_window_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_PLASMA_WINDOW_SET_STATE                               : u32 : 0;
ORG_KDE_PLASMA_WINDOW_SET_VIRTUAL_DESKTOP                     : u32 : 1;
ORG_KDE_PLASMA_WINDOW_SET_MINIMIZED_GEOMETRY                  : u32 : 2;
ORG_KDE_PLASMA_WINDOW_UNSET_MINIMIZED_GEOMETRY                : u32 : 3;
ORG_KDE_PLASMA_WINDOW_CLOSE                                   : u32 : 4;
ORG_KDE_PLASMA_WINDOW_REQUEST_MOVE                            : u32 : 5;
ORG_KDE_PLASMA_WINDOW_REQUEST_RESIZE                          : u32 : 6;
ORG_KDE_PLASMA_WINDOW_DESTROY                                 : u32 : 7;
ORG_KDE_PLASMA_WINDOW_GET_ICON                                : u32 : 8;
ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_VIRTUAL_DESKTOP           : u32 : 9;
ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_NEW_VIRTUAL_DESKTOP       : u32 : 10;
ORG_KDE_PLASMA_WINDOW_REQUEST_LEAVE_VIRTUAL_DESKTOP           : u32 : 11;
ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_ACTIVITY                  : u32 : 12;
ORG_KDE_PLASMA_WINDOW_REQUEST_LEAVE_ACTIVITY                  : u32 : 13;
ORG_KDE_PLASMA_WINDOW_SEND_TO_OUTPUT                          : u32 : 14;
ORG_KDE_PLASMA_WINDOW_SET_STATE_SINCE                         : u32 : 1;
ORG_KDE_PLASMA_WINDOW_SET_VIRTUAL_DESKTOP_SINCE               : u32 : 1;
ORG_KDE_PLASMA_WINDOW_SET_MINIMIZED_GEOMETRY_SINCE            : u32 : 1;
ORG_KDE_PLASMA_WINDOW_UNSET_MINIMIZED_GEOMETRY_SINCE          : u32 : 1;
ORG_KDE_PLASMA_WINDOW_CLOSE_SINCE                             : u32 : 1;
ORG_KDE_PLASMA_WINDOW_REQUEST_MOVE_SINCE                      : u32 : 3;
ORG_KDE_PLASMA_WINDOW_REQUEST_RESIZE_SINCE                    : u32 : 3;
ORG_KDE_PLASMA_WINDOW_DESTROY_SINCE                           : u32 : 4;
ORG_KDE_PLASMA_WINDOW_GET_ICON_SINCE                          : u32 : 7;
ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_VIRTUAL_DESKTOP_SINCE     : u32 : 8;
ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_NEW_VIRTUAL_DESKTOP_SINCE : u32 : 8;
ORG_KDE_PLASMA_WINDOW_REQUEST_LEAVE_VIRTUAL_DESKTOP_SINCE     : u32 : 8;
ORG_KDE_PLASMA_WINDOW_REQUEST_ENTER_ACTIVITY_SINCE            : u32 : 14;
ORG_KDE_PLASMA_WINDOW_REQUEST_LEAVE_ACTIVITY_SINCE            : u32 : 14;
ORG_KDE_PLASMA_WINDOW_SEND_TO_OUTPUT_SINCE                    : u32 : 15;
ORG_KDE_PLASMA_WINDOW_TITLE_CHANGED_SINCE                     : u32 : 1;
ORG_KDE_PLASMA_WINDOW_APP_ID_CHANGED_SINCE                    : u32 : 1;
ORG_KDE_PLASMA_WINDOW_STATE_CHANGED_SINCE                     : u32 : 1;
ORG_KDE_PLASMA_WINDOW_VIRTUAL_DESKTOP_CHANGED_SINCE           : u32 : 1;
ORG_KDE_PLASMA_WINDOW_THEMED_ICON_NAME_CHANGED_SINCE          : u32 : 1;
ORG_KDE_PLASMA_WINDOW_UNMAPPED_SINCE                          : u32 : 1;
ORG_KDE_PLASMA_WINDOW_INITIAL_STATE_SINCE                     : u32 : 4;
ORG_KDE_PLASMA_WINDOW_PARENT_WINDOW_SINCE                     : u32 : 5;
ORG_KDE_PLASMA_WINDOW_GEOMETRY_SINCE                          : u32 : 6;
ORG_KDE_PLASMA_WINDOW_ICON_CHANGED_SINCE                      : u32 : 7;
ORG_KDE_PLASMA_WINDOW_PID_CHANGED_SINCE                       : u32 : 1;
ORG_KDE_PLASMA_WINDOW_VIRTUAL_DESKTOP_ENTERED_SINCE           : u32 : 8;
ORG_KDE_PLASMA_WINDOW_VIRTUAL_DESKTOP_LEFT_SINCE              : u32 : 8;
ORG_KDE_PLASMA_WINDOW_APPLICATION_MENU_SINCE                  : u32 : 10;
ORG_KDE_PLASMA_WINDOW_ACTIVITY_ENTERED_SINCE                  : u32 : 14;
ORG_KDE_PLASMA_WINDOW_ACTIVITY_LEFT_SINCE                     : u32 : 14;
ORG_KDE_PLASMA_WINDOW_RESOURCE_NAME_CHANGED_SINCE             : u32 : 16;

org_kde_plasma_window_listener :: struct {
    title_changed            := _stubs_.title_changed;
    app_id_changed           := _stubs_.app_id_changed;
    state_changed            := _stubs_.state_changed;
    virtual_desktop_changed  := _stubs_.virtual_desktop_changed;
    themed_icon_name_changed := _stubs_.themed_icon_name_changed;
    unmapped                 := _stubs_.unmapped;
    initial_state            := _stubs_.initial_state;
    parent_window            := _stubs_.parent_window;
    geometry                 := _stubs_.geometry;
    icon_changed             := _stubs_.icon_changed;
    pid_changed              := _stubs_.pid_changed;
    virtual_desktop_entered  := _stubs_.virtual_desktop_entered;
    virtual_desktop_left     := _stubs_.virtual_desktop_left;
    application_menu         := _stubs_.application_menu;
    activity_entered         := _stubs_.activity_entered;
    activity_left            := _stubs_.activity_left;
    resource_name_changed    := _stubs_.resource_name_changed;

    _stubs_ :: struct {
        title_changed :: (data: *void,
            self: *org_kde_plasma_window,
            title: *u8) -> void #c_call {}
        app_id_changed :: (data: *void,
            self: *org_kde_plasma_window,
            app_id: *u8) -> void #c_call {}
        state_changed :: (data: *void,
            self: *org_kde_plasma_window,
            flags: u32) -> void #c_call {}
        virtual_desktop_changed :: (data: *void,
            self: *org_kde_plasma_window,
            number: s32) -> void #c_call {}
        themed_icon_name_changed :: (data: *void,
            self: *org_kde_plasma_window,
            name: *u8) -> void #c_call {}
        unmapped :: (data: *void,
            self: *org_kde_plasma_window) -> void #c_call {}
        initial_state :: (data: *void,
            self: *org_kde_plasma_window) -> void #c_call {}
        parent_window :: (data: *void,
            self: *org_kde_plasma_window,
            parent: *org_kde_plasma_window) -> void #c_call {}
        geometry :: (data: *void,
            self: *org_kde_plasma_window,
            x: s32,
            y: s32,
            width: u32,
            height: u32) -> void #c_call {}
        icon_changed :: (data: *void,
            self: *org_kde_plasma_window) -> void #c_call {}
        pid_changed :: (data: *void,
            self: *org_kde_plasma_window,
            pid: u32) -> void #c_call {}
        virtual_desktop_entered :: (data: *void,
            self: *org_kde_plasma_window,
            id: *u8) -> void #c_call {}
        virtual_desktop_left :: (data: *void,
            self: *org_kde_plasma_window,
            is: *u8) -> void #c_call {}
        application_menu :: (data: *void,
            self: *org_kde_plasma_window,
            service_name: *u8,
            object_path: *u8) -> void #c_call {}
        activity_entered :: (data: *void,
            self: *org_kde_plasma_window,
            id: *u8) -> void #c_call {}
        activity_left :: (data: *void,
            self: *org_kde_plasma_window,
            id: *u8) -> void #c_call {}
        resource_name_changed :: (data: *void,
            self: *org_kde_plasma_window,
            resource_name: *u8) -> void #c_call {}
    }
}

org_kde_plasma_activation_feedback_interface: wl_interface;
org_kde_plasma_activation_feedback :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *org_kde_plasma_activation_feedback, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_plasma_activation_feedback) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_plasma_activation_feedback) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_plasma_activation_feedback) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_ACTIVATION_FEEDBACK_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *org_kde_plasma_activation_feedback, listener: *org_kde_plasma_activation_feedback_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_PLASMA_ACTIVATION_FEEDBACK_DESTROY          : u32 : 0;
ORG_KDE_PLASMA_ACTIVATION_FEEDBACK_DESTROY_SINCE    : u32 : 1;
ORG_KDE_PLASMA_ACTIVATION_FEEDBACK_ACTIVATION_SINCE : u32 : 1;

org_kde_plasma_activation_feedback_listener :: struct {
    activation := _stubs_.activation;

    _stubs_ :: struct {
        activation :: (data: *void,
            self: *org_kde_plasma_activation_feedback,
            id: *org_kde_plasma_activation) -> void #c_call {}
    }
}

org_kde_plasma_activation_interface: wl_interface;
org_kde_plasma_activation :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *org_kde_plasma_activation, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_plasma_activation) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_plasma_activation) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_plasma_activation) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_PLASMA_ACTIVATION_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *org_kde_plasma_activation, listener: *org_kde_plasma_activation_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_PLASMA_ACTIVATION_DESTROY        : u32 : 0;
ORG_KDE_PLASMA_ACTIVATION_DESTROY_SINCE  : u32 : 1;
ORG_KDE_PLASMA_ACTIVATION_APP_ID_SINCE   : u32 : 1;
ORG_KDE_PLASMA_ACTIVATION_FINISHED_SINCE : u32 : 1;

org_kde_plasma_activation_listener :: struct {
    app_id   := _stubs_.app_id;
    finished := _stubs_.finished;

    _stubs_ :: struct {
        app_id :: (data: *void,
            self: *org_kde_plasma_activation,
            app_id: *u8) -> void #c_call {}
        finished :: (data: *void,
            self: *org_kde_plasma_activation) -> void #c_call {}
    }
}


#scope_module
plasma_window_management_protocol_init :: () {
    plasma_window_management_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_plasma_window_management::show_desktop */
        null,  // 1
        /* REQUEST: org_kde_plasma_window_management::get_window */
        *org_kde_plasma_window_interface,   // 2
        null,  // 3
        /* REQUEST: org_kde_plasma_window_management::get_window_by_uuid */
        *org_kde_plasma_window_interface,   // 4
        null,  // 5
        /* EVENT: org_kde_plasma_window_management::show_desktop_changed */
        null,  // 6
        /* EVENT: org_kde_plasma_window_management::window */
        null,  // 7
        /* EVENT: org_kde_plasma_window_management::stacking_order_changed */
        null,  // 8
        /* EVENT: org_kde_plasma_window_management::stacking_order_uuid_changed */
        null,  // 9
        /* EVENT: org_kde_plasma_window_management::window_with_uuid */
        null,  // 10
        null,  // 11
        /* REQUEST: org_kde_plasma_window::set_state */
        null,  // 12
        null,  // 13
        /* REQUEST: org_kde_plasma_window::set_virtual_desktop */
        null,  // 14
        /* REQUEST: org_kde_plasma_window::set_minimized_geometry */
        *wl_surface_interface,   // 15
        null,  // 16
        null,  // 17
        null,  // 18
        null,  // 19
        /* REQUEST: org_kde_plasma_window::unset_minimized_geometry */
        *wl_surface_interface,   // 20
        /* REQUEST: org_kde_plasma_window::get_icon */
        null,  // 21
        /* REQUEST: org_kde_plasma_window::request_enter_virtual_desktop */
        null,  // 22
        /* REQUEST: org_kde_plasma_window::request_leave_virtual_desktop */
        null,  // 23
        /* REQUEST: org_kde_plasma_window::request_enter_activity */
        null,  // 24
        /* REQUEST: org_kde_plasma_window::request_leave_activity */
        null,  // 25
        /* REQUEST: org_kde_plasma_window::send_to_output */
        *wl_output_interface,   // 26
        /* EVENT: org_kde_plasma_window::title_changed */
        null,  // 27
        /* EVENT: org_kde_plasma_window::app_id_changed */
        null,  // 28
        /* EVENT: org_kde_plasma_window::state_changed */
        null,  // 29
        /* EVENT: org_kde_plasma_window::virtual_desktop_changed */
        null,  // 30
        /* EVENT: org_kde_plasma_window::themed_icon_name_changed */
        null,  // 31
        /* EVENT: org_kde_plasma_window::parent_window */
        *org_kde_plasma_window_interface,  // 32
        /* EVENT: org_kde_plasma_window::geometry */
        null,  // 33
        null,  // 34
        null,  // 35
        null,  // 36
        /* EVENT: org_kde_plasma_window::pid_changed */
        null,  // 37
        /* EVENT: org_kde_plasma_window::virtual_desktop_entered */
        null,  // 38
        /* EVENT: org_kde_plasma_window::virtual_desktop_left */
        null,  // 39
        /* EVENT: org_kde_plasma_window::application_menu */
        null,  // 40
        null,  // 41
        /* EVENT: org_kde_plasma_window::activity_entered */
        null,  // 42
        /* EVENT: org_kde_plasma_window::activity_left */
        null,  // 43
        /* EVENT: org_kde_plasma_window::resource_name_changed */
        null,  // 44
        /* EVENT: org_kde_plasma_activation_feedback::activation */
        *org_kde_plasma_activation_interface,  // 45
        /* EVENT: org_kde_plasma_activation::app_id */
        null,  // 46
    ];

    org_kde_plasma_window_management_requests[0] = .{"show_desktop", "u", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_management_requests[1] = .{"get_window", "nu", plasma_window_management_types_storage.data + 1};
    org_kde_plasma_window_management_requests[2] = .{"get_window_by_uuid", "ns", plasma_window_management_types_storage.data + 2};
    org_kde_plasma_window_management_events[0] = .{"show_desktop_changed", "u", plasma_window_management_types_storage.data + 4};
    org_kde_plasma_window_management_events[1] = .{"window", "u", plasma_window_management_types_storage.data + 6};
    org_kde_plasma_window_management_events[2] = .{"stacking_order_changed", "a", plasma_window_management_types_storage.data + 7};
    org_kde_plasma_window_management_events[3] = .{"stacking_order_uuid_changed", "s", plasma_window_management_types_storage.data + 8};
    org_kde_plasma_window_management_events[4] = .{"window_with_uuid", "us", plasma_window_management_types_storage.data + 9};
    org_kde_plasma_window_management_interface = .{
        "org_kde_plasma_window_management", 16,
        org_kde_plasma_window_management_requests.count, org_kde_plasma_window_management_requests.data,
        org_kde_plasma_window_management_events.count, org_kde_plasma_window_management_events.data,
    };

    org_kde_plasma_window_requests[0] = .{"set_state", "uu", plasma_window_management_types_storage.data + 10};
    org_kde_plasma_window_requests[1] = .{"set_virtual_desktop", "u", plasma_window_management_types_storage.data + 12};
    org_kde_plasma_window_requests[2] = .{"set_minimized_geometry", "ouuuu", plasma_window_management_types_storage.data + 14};
    org_kde_plasma_window_requests[3] = .{"unset_minimized_geometry", "o", plasma_window_management_types_storage.data + 15};
    org_kde_plasma_window_requests[4] = .{"close", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_requests[5] = .{"request_move", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_requests[6] = .{"request_resize", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_requests[7] = .{"destroy", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_requests[8] = .{"get_icon", "h", plasma_window_management_types_storage.data + 20};
    org_kde_plasma_window_requests[9] = .{"request_enter_virtual_desktop", "s", plasma_window_management_types_storage.data + 21};
    org_kde_plasma_window_requests[10] = .{"request_enter_new_virtual_desktop", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_requests[11] = .{"request_leave_virtual_desktop", "s", plasma_window_management_types_storage.data + 22};
    org_kde_plasma_window_requests[12] = .{"request_enter_activity", "s", plasma_window_management_types_storage.data + 23};
    org_kde_plasma_window_requests[13] = .{"request_leave_activity", "s", plasma_window_management_types_storage.data + 24};
    org_kde_plasma_window_requests[14] = .{"send_to_output", "o", plasma_window_management_types_storage.data + 25};
    org_kde_plasma_window_events[0] = .{"title_changed", "s", plasma_window_management_types_storage.data + 26};
    org_kde_plasma_window_events[1] = .{"app_id_changed", "s", plasma_window_management_types_storage.data + 27};
    org_kde_plasma_window_events[2] = .{"state_changed", "u", plasma_window_management_types_storage.data + 28};
    org_kde_plasma_window_events[3] = .{"virtual_desktop_changed", "i", plasma_window_management_types_storage.data + 29};
    org_kde_plasma_window_events[4] = .{"themed_icon_name_changed", "s", plasma_window_management_types_storage.data + 30};
    org_kde_plasma_window_events[5] = .{"unmapped", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_events[6] = .{"initial_state", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_events[7] = .{"parent_window", "o", plasma_window_management_types_storage.data + 31};
    org_kde_plasma_window_events[8] = .{"geometry", "iiuu", plasma_window_management_types_storage.data + 32};
    org_kde_plasma_window_events[9] = .{"icon_changed", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_window_events[10] = .{"pid_changed", "u", plasma_window_management_types_storage.data + 33};
    org_kde_plasma_window_events[11] = .{"virtual_desktop_entered", "s", plasma_window_management_types_storage.data + 37};
    org_kde_plasma_window_events[12] = .{"virtual_desktop_left", "s", plasma_window_management_types_storage.data + 38};
    org_kde_plasma_window_events[13] = .{"application_menu", "ss", plasma_window_management_types_storage.data + 39};
    org_kde_plasma_window_events[14] = .{"activity_entered", "s", plasma_window_management_types_storage.data + 40};
    org_kde_plasma_window_events[15] = .{"activity_left", "s", plasma_window_management_types_storage.data + 42};
    org_kde_plasma_window_events[16] = .{"resource_name_changed", "s", plasma_window_management_types_storage.data + 43};
    org_kde_plasma_window_interface = .{
        "org_kde_plasma_window", 16,
        org_kde_plasma_window_requests.count, org_kde_plasma_window_requests.data,
        org_kde_plasma_window_events.count, org_kde_plasma_window_events.data,
    };

    org_kde_plasma_activation_feedback_requests[0] = .{"destroy", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_activation_feedback_events[0] = .{"activation", "n", plasma_window_management_types_storage.data + 44};
    org_kde_plasma_activation_feedback_interface = .{
        "org_kde_plasma_activation_feedback", 1,
        org_kde_plasma_activation_feedback_requests.count, org_kde_plasma_activation_feedback_requests.data,
        org_kde_plasma_activation_feedback_events.count, org_kde_plasma_activation_feedback_events.data,
    };

    org_kde_plasma_activation_requests[0] = .{"destroy", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_activation_events[0] = .{"app_id", "s", plasma_window_management_types_storage.data + 45};
    org_kde_plasma_activation_events[1] = .{"finished", "", plasma_window_management_types_storage.data + 0};
    org_kde_plasma_activation_interface = .{
        "org_kde_plasma_activation", 1,
        org_kde_plasma_activation_requests.count, org_kde_plasma_activation_requests.data,
        org_kde_plasma_activation_events.count, org_kde_plasma_activation_events.data,
    };
}


#scope_file
plasma_window_management_types_storage: []*wl_interface;

org_kde_plasma_window_management_requests: [3]wl_message;
org_kde_plasma_window_management_events  : [5]wl_message;

org_kde_plasma_window_requests: [15]wl_message;
org_kde_plasma_window_events  : [17]wl_message;

org_kde_plasma_activation_feedback_requests: [1]wl_message;
org_kde_plasma_activation_feedback_events  : [1]wl_message;

org_kde_plasma_activation_requests: [1]wl_message;
org_kde_plasma_activation_events  : [2]wl_message;

#assert size_of(org_kde_plasma_window_management) == 0 "wayland-scanner bug: org_kde_plasma_window_management is non-empty";
#assert size_of(org_kde_plasma_window) == 0 "wayland-scanner bug: org_kde_plasma_window is non-empty";
#assert size_of(org_kde_plasma_activation_feedback) == 0 "wayland-scanner bug: org_kde_plasma_activation_feedback is non-empty";
#assert size_of(org_kde_plasma_activation) == 0 "wayland-scanner bug: org_kde_plasma_activation is non-empty";
