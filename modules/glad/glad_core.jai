// This code has been generated by glad: https://github.com/Dav1dde/glad
// Do not edit by hand!

GLenum :: u32;
GLboolean :: bool;  // s8?
GLbitfield :: u32;
GLbyte :: s8;
GLshort :: s16;
GLint :: s32;
GLclampx :: s32;
GLubyte :: u8;
GLushort :: u16;
GLuint :: u32;
GLsizei :: u32;
GLfloat :: float32;
GLclampf :: float32;
GLdouble :: float64;
GLclampd :: float64;
GLchar :: u8;
GLcharARB :: u8;
GLhandleARB :: u32;
GLhalfARB :: u16;
GLhalf :: u16;
GLfixed :: s32;
GLintptr :: s64;
GLsizeiptr :: s64;
GLint64 :: s64;
GLuint64 :: u64;
GLintptrARB :: s64;
GLsizeiptrARB :: u64; // s64?
GLint64EXT :: s64;
GLuint64EXT :: u64;
GLsync :: u64;
GLhalfNV :: u16;

GLDEBUGPROC    :: #type (GLenum, GLenum, GLuint, GLenum, GLsizei, *GLchar, *void) #c_call;
GLDEBUGPROCKHR :: GLDEBUGPROC;
GLDEBUGPROCARB :: GLDEBUGPROC;
GLDEBUGPROCAMD :: #type (GLuint, GLenum, GLenum, GLsizei, *GLchar, *void) #c_call;

// Types:

// Core enums:

// GL_VERSION_1_0
GL_DEPTH_BUFFER_BIT :: 0x00000100;
GL_STENCIL_BUFFER_BIT :: 0x00000400;
GL_COLOR_BUFFER_BIT :: 0x00004000;
GL_FALSE :: false;
GL_TRUE :: true;
GL_POINTS :: 0x0000;
GL_LINES :: 0x0001;
GL_LINE_LOOP :: 0x0002;
GL_LINE_STRIP :: 0x0003;
GL_TRIANGLES :: 0x0004;
GL_TRIANGLE_STRIP :: 0x0005;
GL_TRIANGLE_FAN :: 0x0006;
GL_NEVER :: 0x0200;
GL_LESS :: 0x0201;
GL_EQUAL :: 0x0202;
GL_LEQUAL :: 0x0203;
GL_GREATER :: 0x0204;
GL_NOTEQUAL :: 0x0205;
GL_GEQUAL :: 0x0206;
GL_ALWAYS :: 0x0207;
GL_ZERO :: 0;
GL_ONE :: 1;
GL_SRC_COLOR :: 0x0300;
GL_ONE_MINUS_SRC_COLOR :: 0x0301;
GL_SRC_ALPHA :: 0x0302;
GL_ONE_MINUS_SRC_ALPHA :: 0x0303;
GL_DST_ALPHA :: 0x0304;
GL_ONE_MINUS_DST_ALPHA :: 0x0305;
GL_DST_COLOR :: 0x0306;
GL_ONE_MINUS_DST_COLOR :: 0x0307;
GL_SRC_ALPHA_SATURATE :: 0x0308;
GL_NONE :: 0;
GL_FRONT_LEFT :: 0x0400;
GL_FRONT_RIGHT :: 0x0401;
GL_BACK_LEFT :: 0x0402;
GL_BACK_RIGHT :: 0x0403;
GL_FRONT :: 0x0404;
GL_BACK :: 0x0405;
GL_LEFT :: 0x0406;
GL_RIGHT :: 0x0407;
GL_FRONT_AND_BACK :: 0x0408;
GL_NO_ERROR :: 0;
GL_INVALID_ENUM :: 0x0500;
GL_INVALID_VALUE :: 0x0501;
GL_INVALID_OPERATION :: 0x0502;
GL_OUT_OF_MEMORY :: 0x0505;
GL_CW :: 0x0900;
GL_CCW :: 0x0901;
GL_POINT_SIZE :: 0x0B11;
GL_POINT_SIZE_RANGE :: 0x0B12;
GL_POINT_SIZE_GRANULARITY :: 0x0B13;
GL_LINE_SMOOTH :: 0x0B20;
GL_LINE_WIDTH :: 0x0B21;
GL_LINE_WIDTH_RANGE :: 0x0B22;
GL_LINE_WIDTH_GRANULARITY :: 0x0B23;
GL_POLYGON_MODE :: 0x0B40;
GL_POLYGON_SMOOTH :: 0x0B41;
GL_CULL_FACE :: 0x0B44;
GL_CULL_FACE_MODE :: 0x0B45;
GL_FRONT_FACE :: 0x0B46;
GL_DEPTH_RANGE :: 0x0B70;
GL_DEPTH_TEST :: 0x0B71;
GL_DEPTH_WRITEMASK :: 0x0B72;
GL_DEPTH_CLEAR_VALUE :: 0x0B73;
GL_DEPTH_FUNC :: 0x0B74;
GL_STENCIL_TEST :: 0x0B90;
GL_STENCIL_CLEAR_VALUE :: 0x0B91;
GL_STENCIL_FUNC :: 0x0B92;
GL_STENCIL_VALUE_MASK :: 0x0B93;
GL_STENCIL_FAIL :: 0x0B94;
GL_STENCIL_PASS_DEPTH_FAIL :: 0x0B95;
GL_STENCIL_PASS_DEPTH_PASS :: 0x0B96;
GL_STENCIL_REF :: 0x0B97;
GL_STENCIL_WRITEMASK :: 0x0B98;
GL_VIEWPORT :: 0x0BA2;
GL_DITHER :: 0x0BD0;
GL_BLEND_DST :: 0x0BE0;
GL_BLEND_SRC :: 0x0BE1;
GL_BLEND :: 0x0BE2;
GL_LOGIC_OP_MODE :: 0x0BF0;
GL_DRAW_BUFFER :: 0x0C01;
GL_READ_BUFFER :: 0x0C02;
GL_SCISSOR_BOX :: 0x0C10;
GL_SCISSOR_TEST :: 0x0C11;
GL_COLOR_CLEAR_VALUE :: 0x0C22;
GL_COLOR_WRITEMASK :: 0x0C23;
GL_DOUBLEBUFFER :: 0x0C32;
GL_STEREO :: 0x0C33;
GL_LINE_SMOOTH_HINT :: 0x0C52;
GL_POLYGON_SMOOTH_HINT :: 0x0C53;
GL_UNPACK_SWAP_BYTES :: 0x0CF0;
GL_UNPACK_LSB_FIRST :: 0x0CF1;
GL_UNPACK_ROW_LENGTH :: 0x0CF2;
GL_UNPACK_SKIP_ROWS :: 0x0CF3;
GL_UNPACK_SKIP_PIXELS :: 0x0CF4;
GL_UNPACK_ALIGNMENT :: 0x0CF5;
GL_PACK_SWAP_BYTES :: 0x0D00;
GL_PACK_LSB_FIRST :: 0x0D01;
GL_PACK_ROW_LENGTH :: 0x0D02;
GL_PACK_SKIP_ROWS :: 0x0D03;
GL_PACK_SKIP_PIXELS :: 0x0D04;
GL_PACK_ALIGNMENT :: 0x0D05;
GL_MAX_TEXTURE_SIZE :: 0x0D33;
GL_MAX_VIEWPORT_DIMS :: 0x0D3A;
GL_SUBPIXEL_BITS :: 0x0D50;
GL_TEXTURE_1D :: 0x0DE0;
GL_TEXTURE_2D :: 0x0DE1;
GL_TEXTURE_WIDTH :: 0x1000;
GL_TEXTURE_HEIGHT :: 0x1001;
GL_TEXTURE_BORDER_COLOR :: 0x1004;
GL_DONT_CARE :: 0x1100;
GL_FASTEST :: 0x1101;
GL_NICEST :: 0x1102;
GL_BYTE :: 0x1400;
GL_UNSIGNED_BYTE :: 0x1401;
GL_SHORT :: 0x1402;
GL_UNSIGNED_SHORT :: 0x1403;
GL_INT :: 0x1404;
GL_UNSIGNED_INT :: 0x1405;
GL_FLOAT :: 0x1406;
GL_CLEAR :: 0x1500;
GL_AND :: 0x1501;
GL_AND_REVERSE :: 0x1502;
GL_COPY :: 0x1503;
GL_AND_INVERTED :: 0x1504;
GL_NOOP :: 0x1505;
GL_XOR :: 0x1506;
GL_OR :: 0x1507;
GL_NOR :: 0x1508;
GL_EQUIV :: 0x1509;
GL_INVERT :: 0x150A;
GL_OR_REVERSE :: 0x150B;
GL_COPY_INVERTED :: 0x150C;
GL_OR_INVERTED :: 0x150D;
GL_NAND :: 0x150E;
GL_SET :: 0x150F;
GL_TEXTURE :: 0x1702;
GL_COLOR :: 0x1800;
GL_DEPTH :: 0x1801;
GL_STENCIL :: 0x1802;
GL_STENCIL_INDEX :: 0x1901;
GL_DEPTH_COMPONENT :: 0x1902;
GL_RED :: 0x1903;
GL_GREEN :: 0x1904;
GL_BLUE :: 0x1905;
GL_ALPHA :: 0x1906;
GL_RGB :: 0x1907;
GL_RGBA :: 0x1908;
GL_POINT :: 0x1B00;
GL_LINE :: 0x1B01;
GL_FILL :: 0x1B02;
GL_KEEP :: 0x1E00;
GL_REPLACE :: 0x1E01;
GL_INCR :: 0x1E02;
GL_DECR :: 0x1E03;
GL_VENDOR :: 0x1F00;
GL_RENDERER :: 0x1F01;
GL_VERSION :: 0x1F02;
GL_EXTENSIONS :: 0x1F03;
GL_NEAREST :: 0x2600;
GL_LINEAR :: 0x2601;
GL_NEAREST_MIPMAP_NEAREST :: 0x2700;
GL_LINEAR_MIPMAP_NEAREST :: 0x2701;
GL_NEAREST_MIPMAP_LINEAR :: 0x2702;
GL_LINEAR_MIPMAP_LINEAR :: 0x2703;
GL_TEXTURE_MAG_FILTER :: 0x2800;
GL_TEXTURE_MIN_FILTER :: 0x2801;
GL_TEXTURE_WRAP_S :: 0x2802;
GL_TEXTURE_WRAP_T :: 0x2803;
GL_REPEAT :: 0x2901;

// GL_VERSION_1_1
GL_COLOR_LOGIC_OP :: 0x0BF2;
GL_POLYGON_OFFSET_UNITS :: 0x2A00;
GL_POLYGON_OFFSET_POINT :: 0x2A01;
GL_POLYGON_OFFSET_LINE :: 0x2A02;
GL_POLYGON_OFFSET_FILL :: 0x8037;
GL_POLYGON_OFFSET_FACTOR :: 0x8038;
GL_TEXTURE_BINDING_1D :: 0x8068;
GL_TEXTURE_BINDING_2D :: 0x8069;
GL_TEXTURE_INTERNAL_FORMAT :: 0x1003;
GL_TEXTURE_RED_SIZE :: 0x805C;
GL_TEXTURE_GREEN_SIZE :: 0x805D;
GL_TEXTURE_BLUE_SIZE :: 0x805E;
GL_TEXTURE_ALPHA_SIZE :: 0x805F;
GL_DOUBLE :: 0x140A;
GL_PROXY_TEXTURE_1D :: 0x8063;
GL_PROXY_TEXTURE_2D :: 0x8064;
GL_R3_G3_B2 :: 0x2A10;
GL_RGB4 :: 0x804F;
GL_RGB5 :: 0x8050;
GL_RGB8 :: 0x8051;
GL_RGB10 :: 0x8052;
GL_RGB12 :: 0x8053;
GL_RGB16 :: 0x8054;
GL_RGBA2 :: 0x8055;
GL_RGBA4 :: 0x8056;
GL_RGB5_A1 :: 0x8057;
GL_RGBA8 :: 0x8058;
GL_RGB10_A2 :: 0x8059;
GL_RGBA12 :: 0x805A;
GL_RGBA16 :: 0x805B;

// GL_VERSION_1_2
GL_UNSIGNED_BYTE_3_3_2 :: 0x8032;
GL_UNSIGNED_SHORT_4_4_4_4 :: 0x8033;
GL_UNSIGNED_SHORT_5_5_5_1 :: 0x8034;
GL_UNSIGNED_INT_8_8_8_8 :: 0x8035;
GL_UNSIGNED_INT_10_10_10_2 :: 0x8036;
GL_TEXTURE_BINDING_3D :: 0x806A;
GL_PACK_SKIP_IMAGES :: 0x806B;
GL_PACK_IMAGE_HEIGHT :: 0x806C;
GL_UNPACK_SKIP_IMAGES :: 0x806D;
GL_UNPACK_IMAGE_HEIGHT :: 0x806E;
GL_TEXTURE_3D :: 0x806F;
GL_PROXY_TEXTURE_3D :: 0x8070;
GL_TEXTURE_DEPTH :: 0x8071;
GL_TEXTURE_WRAP_R :: 0x8072;
GL_MAX_3D_TEXTURE_SIZE :: 0x8073;
GL_UNSIGNED_BYTE_2_3_3_REV :: 0x8362;
GL_UNSIGNED_SHORT_5_6_5 :: 0x8363;
GL_UNSIGNED_SHORT_5_6_5_REV :: 0x8364;
GL_UNSIGNED_SHORT_4_4_4_4_REV :: 0x8365;
GL_UNSIGNED_SHORT_1_5_5_5_REV :: 0x8366;
GL_UNSIGNED_INT_8_8_8_8_REV :: 0x8367;
GL_UNSIGNED_INT_2_10_10_10_REV :: 0x8368;
GL_BGR :: 0x80E0;
GL_BGRA :: 0x80E1;
GL_MAX_ELEMENTS_VERTICES :: 0x80E8;
GL_MAX_ELEMENTS_INDICES :: 0x80E9;
GL_CLAMP_TO_EDGE :: 0x812F;
GL_TEXTURE_MIN_LOD :: 0x813A;
GL_TEXTURE_MAX_LOD :: 0x813B;
GL_TEXTURE_BASE_LEVEL :: 0x813C;
GL_TEXTURE_MAX_LEVEL :: 0x813D;
GL_SMOOTH_POINT_SIZE_RANGE :: 0x0B12;
GL_SMOOTH_POINT_SIZE_GRANULARITY :: 0x0B13;
GL_SMOOTH_LINE_WIDTH_RANGE :: 0x0B22;
GL_SMOOTH_LINE_WIDTH_GRANULARITY :: 0x0B23;
GL_ALIASED_LINE_WIDTH_RANGE :: 0x846E;

// GL_VERSION_1_3
GL_TEXTURE0 :: 0x84C0;
GL_TEXTURE1 :: 0x84C1;
GL_TEXTURE2 :: 0x84C2;
GL_TEXTURE3 :: 0x84C3;
GL_TEXTURE4 :: 0x84C4;
GL_TEXTURE5 :: 0x84C5;
GL_TEXTURE6 :: 0x84C6;
GL_TEXTURE7 :: 0x84C7;
GL_TEXTURE8 :: 0x84C8;
GL_TEXTURE9 :: 0x84C9;
GL_TEXTURE10 :: 0x84CA;
GL_TEXTURE11 :: 0x84CB;
GL_TEXTURE12 :: 0x84CC;
GL_TEXTURE13 :: 0x84CD;
GL_TEXTURE14 :: 0x84CE;
GL_TEXTURE15 :: 0x84CF;
GL_TEXTURE16 :: 0x84D0;
GL_TEXTURE17 :: 0x84D1;
GL_TEXTURE18 :: 0x84D2;
GL_TEXTURE19 :: 0x84D3;
GL_TEXTURE20 :: 0x84D4;
GL_TEXTURE21 :: 0x84D5;
GL_TEXTURE22 :: 0x84D6;
GL_TEXTURE23 :: 0x84D7;
GL_TEXTURE24 :: 0x84D8;
GL_TEXTURE25 :: 0x84D9;
GL_TEXTURE26 :: 0x84DA;
GL_TEXTURE27 :: 0x84DB;
GL_TEXTURE28 :: 0x84DC;
GL_TEXTURE29 :: 0x84DD;
GL_TEXTURE30 :: 0x84DE;
GL_TEXTURE31 :: 0x84DF;
GL_ACTIVE_TEXTURE :: 0x84E0;
GL_MULTISAMPLE :: 0x809D;
GL_SAMPLE_ALPHA_TO_COVERAGE :: 0x809E;
GL_SAMPLE_ALPHA_TO_ONE :: 0x809F;
GL_SAMPLE_COVERAGE :: 0x80A0;
GL_SAMPLE_BUFFERS :: 0x80A8;
GL_SAMPLES :: 0x80A9;
GL_SAMPLE_COVERAGE_VALUE :: 0x80AA;
GL_SAMPLE_COVERAGE_INVERT :: 0x80AB;
GL_TEXTURE_CUBE_MAP :: 0x8513;
GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515;
GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516;
GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518;
GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519;
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A;
GL_PROXY_TEXTURE_CUBE_MAP :: 0x851B;
GL_MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C;
GL_COMPRESSED_RGB :: 0x84ED;
GL_COMPRESSED_RGBA :: 0x84EE;
GL_TEXTURE_COMPRESSION_HINT :: 0x84EF;
GL_TEXTURE_COMPRESSED_IMAGE_SIZE :: 0x86A0;
GL_TEXTURE_COMPRESSED :: 0x86A1;
GL_NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2;
GL_COMPRESSED_TEXTURE_FORMATS :: 0x86A3;
GL_CLAMP_TO_BORDER :: 0x812D;

// GL_VERSION_1_4
GL_BLEND_DST_RGB :: 0x80C8;
GL_BLEND_SRC_RGB :: 0x80C9;
GL_BLEND_DST_ALPHA :: 0x80CA;
GL_BLEND_SRC_ALPHA :: 0x80CB;
GL_POINT_FADE_THRESHOLD_SIZE :: 0x8128;
GL_DEPTH_COMPONENT16 :: 0x81A5;
GL_DEPTH_COMPONENT24 :: 0x81A6;
GL_DEPTH_COMPONENT32 :: 0x81A7;
GL_MIRRORED_REPEAT :: 0x8370;
GL_MAX_TEXTURE_LOD_BIAS :: 0x84FD;
GL_TEXTURE_LOD_BIAS :: 0x8501;
GL_INCR_WRAP :: 0x8507;
GL_DECR_WRAP :: 0x8508;
GL_TEXTURE_DEPTH_SIZE :: 0x884A;
GL_TEXTURE_COMPARE_MODE :: 0x884C;
GL_TEXTURE_COMPARE_FUNC :: 0x884D;
GL_BLEND_COLOR :: 0x8005;
GL_BLEND_EQUATION :: 0x8009;
GL_CONSTANT_COLOR :: 0x8001;
GL_ONE_MINUS_CONSTANT_COLOR :: 0x8002;
GL_CONSTANT_ALPHA :: 0x8003;
GL_ONE_MINUS_CONSTANT_ALPHA :: 0x8004;
GL_FUNC_ADD :: 0x8006;
GL_FUNC_REVERSE_SUBTRACT :: 0x800B;
GL_FUNC_SUBTRACT :: 0x800A;
GL_MIN :: 0x8007;
GL_MAX :: 0x8008;

// GL_VERSION_1_5
GL_BUFFER_SIZE :: 0x8764;
GL_BUFFER_USAGE :: 0x8765;
GL_QUERY_COUNTER_BITS :: 0x8864;
GL_CURRENT_QUERY :: 0x8865;
GL_QUERY_RESULT :: 0x8866;
GL_QUERY_RESULT_AVAILABLE :: 0x8867;
GL_ARRAY_BUFFER :: 0x8892;
GL_ELEMENT_ARRAY_BUFFER :: 0x8893;
GL_ARRAY_BUFFER_BINDING :: 0x8894;
GL_ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895;
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F;
GL_READ_ONLY :: 0x88B8;
GL_WRITE_ONLY :: 0x88B9;
GL_READ_WRITE :: 0x88BA;
GL_BUFFER_ACCESS :: 0x88BB;
GL_BUFFER_MAPPED :: 0x88BC;
GL_BUFFER_MAP_POINTER :: 0x88BD;
GL_STREAM_DRAW :: 0x88E0;
GL_STREAM_READ :: 0x88E1;
GL_STREAM_COPY :: 0x88E2;
GL_STATIC_DRAW :: 0x88E4;
GL_STATIC_READ :: 0x88E5;
GL_STATIC_COPY :: 0x88E6;
GL_DYNAMIC_DRAW :: 0x88E8;
GL_DYNAMIC_READ :: 0x88E9;
GL_DYNAMIC_COPY :: 0x88EA;
GL_SAMPLES_PASSED :: 0x8914;
GL_SRC1_ALPHA :: 0x8589;

// GL_VERSION_2_0
GL_BLEND_EQUATION_RGB :: 0x8009;
GL_VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622;
GL_VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623;
GL_VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624;
GL_VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625;
GL_CURRENT_VERTEX_ATTRIB :: 0x8626;
GL_VERTEX_PROGRAM_POINT_SIZE :: 0x8642;
GL_VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645;
GL_STENCIL_BACK_FUNC :: 0x8800;
GL_STENCIL_BACK_FAIL :: 0x8801;
GL_STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802;
GL_STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803;
GL_MAX_DRAW_BUFFERS :: 0x8824;
GL_DRAW_BUFFER0 :: 0x8825;
GL_DRAW_BUFFER1 :: 0x8826;
GL_DRAW_BUFFER2 :: 0x8827;
GL_DRAW_BUFFER3 :: 0x8828;
GL_DRAW_BUFFER4 :: 0x8829;
GL_DRAW_BUFFER5 :: 0x882A;
GL_DRAW_BUFFER6 :: 0x882B;
GL_DRAW_BUFFER7 :: 0x882C;
GL_DRAW_BUFFER8 :: 0x882D;
GL_DRAW_BUFFER9 :: 0x882E;
GL_DRAW_BUFFER10 :: 0x882F;
GL_DRAW_BUFFER11 :: 0x8830;
GL_DRAW_BUFFER12 :: 0x8831;
GL_DRAW_BUFFER13 :: 0x8832;
GL_DRAW_BUFFER14 :: 0x8833;
GL_DRAW_BUFFER15 :: 0x8834;
GL_BLEND_EQUATION_ALPHA :: 0x883D;
GL_MAX_VERTEX_ATTRIBS :: 0x8869;
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A;
GL_MAX_TEXTURE_IMAGE_UNITS :: 0x8872;
GL_FRAGMENT_SHADER :: 0x8B30;
GL_VERTEX_SHADER :: 0x8B31;
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49;
GL_MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A;
GL_MAX_VARYING_FLOATS :: 0x8B4B;
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C;
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D;
GL_SHADER_TYPE :: 0x8B4F;
GL_FLOAT_VEC2 :: 0x8B50;
GL_FLOAT_VEC3 :: 0x8B51;
GL_FLOAT_VEC4 :: 0x8B52;
GL_INT_VEC2 :: 0x8B53;
GL_INT_VEC3 :: 0x8B54;
GL_INT_VEC4 :: 0x8B55;
GL_BOOL :: 0x8B56;
GL_BOOL_VEC2 :: 0x8B57;
GL_BOOL_VEC3 :: 0x8B58;
GL_BOOL_VEC4 :: 0x8B59;
GL_FLOAT_MAT2 :: 0x8B5A;
GL_FLOAT_MAT3 :: 0x8B5B;
GL_FLOAT_MAT4 :: 0x8B5C;
GL_SAMPLER_1D :: 0x8B5D;
GL_SAMPLER_2D :: 0x8B5E;
GL_SAMPLER_3D :: 0x8B5F;
GL_SAMPLER_CUBE :: 0x8B60;
GL_SAMPLER_1D_SHADOW :: 0x8B61;
GL_SAMPLER_2D_SHADOW :: 0x8B62;
GL_DELETE_STATUS :: 0x8B80;
GL_COMPILE_STATUS :: 0x8B81;
GL_LINK_STATUS :: 0x8B82;
GL_VALIDATE_STATUS :: 0x8B83;
GL_INFO_LOG_LENGTH :: 0x8B84;
GL_ATTACHED_SHADERS :: 0x8B85;
GL_ACTIVE_UNIFORMS :: 0x8B86;
GL_ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87;
GL_SHADER_SOURCE_LENGTH :: 0x8B88;
GL_ACTIVE_ATTRIBUTES :: 0x8B89;
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A;
GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B;
GL_SHADING_LANGUAGE_VERSION :: 0x8B8C;
GL_CURRENT_PROGRAM :: 0x8B8D;
GL_POINT_SPRITE_COORD_ORIGIN :: 0x8CA0;
GL_LOWER_LEFT :: 0x8CA1;
GL_UPPER_LEFT :: 0x8CA2;
GL_STENCIL_BACK_REF :: 0x8CA3;
GL_STENCIL_BACK_VALUE_MASK :: 0x8CA4;
GL_STENCIL_BACK_WRITEMASK :: 0x8CA5;

// GL_VERSION_2_1
GL_PIXEL_PACK_BUFFER :: 0x88EB;
GL_PIXEL_UNPACK_BUFFER :: 0x88EC;
GL_PIXEL_PACK_BUFFER_BINDING :: 0x88ED;
GL_PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF;
GL_FLOAT_MAT2x3 :: 0x8B65;
GL_FLOAT_MAT2x4 :: 0x8B66;
GL_FLOAT_MAT3x2 :: 0x8B67;
GL_FLOAT_MAT3x4 :: 0x8B68;
GL_FLOAT_MAT4x2 :: 0x8B69;
GL_FLOAT_MAT4x3 :: 0x8B6A;
GL_SRGB :: 0x8C40;
GL_SRGB8 :: 0x8C41;
GL_SRGB_ALPHA :: 0x8C42;
GL_SRGB8_ALPHA8 :: 0x8C43;
GL_COMPRESSED_SRGB :: 0x8C48;
GL_COMPRESSED_SRGB_ALPHA :: 0x8C49;

// GL_VERSION_3_0
GL_COMPARE_REF_TO_TEXTURE :: 0x884E;
GL_CLIP_DISTANCE0 :: 0x3000;
GL_CLIP_DISTANCE1 :: 0x3001;
GL_CLIP_DISTANCE2 :: 0x3002;
GL_CLIP_DISTANCE3 :: 0x3003;
GL_CLIP_DISTANCE4 :: 0x3004;
GL_CLIP_DISTANCE5 :: 0x3005;
GL_CLIP_DISTANCE6 :: 0x3006;
GL_CLIP_DISTANCE7 :: 0x3007;
GL_MAX_CLIP_DISTANCES :: 0x0D32;
GL_MAJOR_VERSION :: 0x821B;
GL_MINOR_VERSION :: 0x821C;
GL_NUM_EXTENSIONS :: 0x821D;
GL_CONTEXT_FLAGS :: 0x821E;
GL_COMPRESSED_RED :: 0x8225;
GL_COMPRESSED_RG :: 0x8226;
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT :: 0x00000001;
GL_RGBA32F :: 0x8814;
GL_RGB32F :: 0x8815;
GL_RGBA16F :: 0x881A;
GL_RGB16F :: 0x881B;
GL_VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD;
GL_MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF;
GL_MIN_PROGRAM_TEXEL_OFFSET :: 0x8904;
GL_MAX_PROGRAM_TEXEL_OFFSET :: 0x8905;
GL_CLAMP_READ_COLOR :: 0x891C;
GL_FIXED_ONLY :: 0x891D;
GL_MAX_VARYING_COMPONENTS :: 0x8B4B;
GL_TEXTURE_1D_ARRAY :: 0x8C18;
GL_PROXY_TEXTURE_1D_ARRAY :: 0x8C19;
GL_TEXTURE_2D_ARRAY :: 0x8C1A;
GL_PROXY_TEXTURE_2D_ARRAY :: 0x8C1B;
GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
GL_R11F_G11F_B10F :: 0x8C3A;
GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;
GL_RGB9_E5 :: 0x8C3D;
GL_UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E;
GL_TEXTURE_SHARED_SIZE :: 0x8C3F;
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76;
GL_TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80;
GL_TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83;
GL_TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84;
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85;
GL_PRIMITIVES_GENERATED :: 0x8C87;
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88;
GL_RASTERIZER_DISCARD :: 0x8C89;
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A;
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B;
GL_INTERLEAVED_ATTRIBS :: 0x8C8C;
GL_SEPARATE_ATTRIBS :: 0x8C8D;
GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F;
GL_RGBA32UI :: 0x8D70;
GL_RGB32UI :: 0x8D71;
GL_RGBA16UI :: 0x8D76;
GL_RGB16UI :: 0x8D77;
GL_RGBA8UI :: 0x8D7C;
GL_RGB8UI :: 0x8D7D;
GL_RGBA32I :: 0x8D82;
GL_RGB32I :: 0x8D83;
GL_RGBA16I :: 0x8D88;
GL_RGB16I :: 0x8D89;
GL_RGBA8I :: 0x8D8E;
GL_RGB8I :: 0x8D8F;
GL_RED_INTEGER :: 0x8D94;
GL_GREEN_INTEGER :: 0x8D95;
GL_BLUE_INTEGER :: 0x8D96;
GL_RGB_INTEGER :: 0x8D98;
GL_RGBA_INTEGER :: 0x8D99;
GL_BGR_INTEGER :: 0x8D9A;
GL_BGRA_INTEGER :: 0x8D9B;
GL_SAMPLER_1D_ARRAY :: 0x8DC0;
GL_SAMPLER_2D_ARRAY :: 0x8DC1;
GL_SAMPLER_1D_ARRAY_SHADOW :: 0x8DC3;
GL_SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4;
GL_SAMPLER_CUBE_SHADOW :: 0x8DC5;
GL_UNSIGNED_INT_VEC2 :: 0x8DC6;
GL_UNSIGNED_INT_VEC3 :: 0x8DC7;
GL_UNSIGNED_INT_VEC4 :: 0x8DC8;
GL_INT_SAMPLER_1D :: 0x8DC9;
GL_INT_SAMPLER_2D :: 0x8DCA;
GL_INT_SAMPLER_3D :: 0x8DCB;
GL_INT_SAMPLER_CUBE :: 0x8DCC;
GL_INT_SAMPLER_1D_ARRAY :: 0x8DCE;
GL_INT_SAMPLER_2D_ARRAY :: 0x8DCF;
GL_UNSIGNED_INT_SAMPLER_1D :: 0x8DD1;
GL_UNSIGNED_INT_SAMPLER_2D :: 0x8DD2;
GL_UNSIGNED_INT_SAMPLER_3D :: 0x8DD3;
GL_UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4;
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY :: 0x8DD6;
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7;
GL_QUERY_WAIT :: 0x8E13;
GL_QUERY_NO_WAIT :: 0x8E14;
GL_QUERY_BY_REGION_WAIT :: 0x8E15;
GL_QUERY_BY_REGION_NO_WAIT :: 0x8E16;
GL_BUFFER_ACCESS_FLAGS :: 0x911F;
GL_BUFFER_MAP_LENGTH :: 0x9120;
GL_BUFFER_MAP_OFFSET :: 0x9121;
GL_DEPTH_COMPONENT32F :: 0x8CAC;
GL_DEPTH32F_STENCIL8 :: 0x8CAD;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD;
GL_INVALID_FRAMEBUFFER_OPERATION :: 0x0506;
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210;
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211;
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212;
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213;
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214;
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215;
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216;
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217;
GL_FRAMEBUFFER_DEFAULT :: 0x8218;
GL_FRAMEBUFFER_UNDEFINED :: 0x8219;
GL_DEPTH_STENCIL_ATTACHMENT :: 0x821A;
GL_MAX_RENDERBUFFER_SIZE :: 0x84E8;
GL_DEPTH_STENCIL :: 0x84F9;
GL_UNSIGNED_INT_24_8 :: 0x84FA;
GL_DEPTH24_STENCIL8 :: 0x88F0;
GL_TEXTURE_STENCIL_SIZE :: 0x88F1;
GL_TEXTURE_RED_TYPE :: 0x8C10;
GL_TEXTURE_GREEN_TYPE :: 0x8C11;
GL_TEXTURE_BLUE_TYPE :: 0x8C12;
GL_TEXTURE_ALPHA_TYPE :: 0x8C13;
GL_TEXTURE_DEPTH_TYPE :: 0x8C16;
GL_UNSIGNED_NORMALIZED :: 0x8C17;
GL_FRAMEBUFFER_BINDING :: 0x8CA6;
GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA6;
GL_RENDERBUFFER_BINDING :: 0x8CA7;
GL_READ_FRAMEBUFFER :: 0x8CA8;
GL_DRAW_FRAMEBUFFER :: 0x8CA9;
GL_READ_FRAMEBUFFER_BINDING :: 0x8CAA;
GL_RENDERBUFFER_SAMPLES :: 0x8CAB;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0;
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3;
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4;
GL_FRAMEBUFFER_COMPLETE :: 0x8CD5;
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6;
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7;
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB;
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC;
GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CDD;
GL_MAX_COLOR_ATTACHMENTS :: 0x8CDF;
GL_COLOR_ATTACHMENT0 :: 0x8CE0;
GL_COLOR_ATTACHMENT1 :: 0x8CE1;
GL_COLOR_ATTACHMENT2 :: 0x8CE2;
GL_COLOR_ATTACHMENT3 :: 0x8CE3;
GL_COLOR_ATTACHMENT4 :: 0x8CE4;
GL_COLOR_ATTACHMENT5 :: 0x8CE5;
GL_COLOR_ATTACHMENT6 :: 0x8CE6;
GL_COLOR_ATTACHMENT7 :: 0x8CE7;
GL_COLOR_ATTACHMENT8 :: 0x8CE8;
GL_COLOR_ATTACHMENT9 :: 0x8CE9;
GL_COLOR_ATTACHMENT10 :: 0x8CEA;
GL_COLOR_ATTACHMENT11 :: 0x8CEB;
GL_COLOR_ATTACHMENT12 :: 0x8CEC;
GL_COLOR_ATTACHMENT13 :: 0x8CED;
GL_COLOR_ATTACHMENT14 :: 0x8CEE;
GL_COLOR_ATTACHMENT15 :: 0x8CEF;
GL_COLOR_ATTACHMENT16 :: 0x8CF0;
GL_COLOR_ATTACHMENT17 :: 0x8CF1;
GL_COLOR_ATTACHMENT18 :: 0x8CF2;
GL_COLOR_ATTACHMENT19 :: 0x8CF3;
GL_COLOR_ATTACHMENT20 :: 0x8CF4;
GL_COLOR_ATTACHMENT21 :: 0x8CF5;
GL_COLOR_ATTACHMENT22 :: 0x8CF6;
GL_COLOR_ATTACHMENT23 :: 0x8CF7;
GL_COLOR_ATTACHMENT24 :: 0x8CF8;
GL_COLOR_ATTACHMENT25 :: 0x8CF9;
GL_COLOR_ATTACHMENT26 :: 0x8CFA;
GL_COLOR_ATTACHMENT27 :: 0x8CFB;
GL_COLOR_ATTACHMENT28 :: 0x8CFC;
GL_COLOR_ATTACHMENT29 :: 0x8CFD;
GL_COLOR_ATTACHMENT30 :: 0x8CFE;
GL_COLOR_ATTACHMENT31 :: 0x8CFF;
GL_DEPTH_ATTACHMENT :: 0x8D00;
GL_STENCIL_ATTACHMENT :: 0x8D20;
GL_FRAMEBUFFER :: 0x8D40;
GL_RENDERBUFFER :: 0x8D41;
GL_RENDERBUFFER_WIDTH :: 0x8D42;
GL_RENDERBUFFER_HEIGHT :: 0x8D43;
GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44;
GL_STENCIL_INDEX1 :: 0x8D46;
GL_STENCIL_INDEX4 :: 0x8D47;
GL_STENCIL_INDEX8 :: 0x8D48;
GL_STENCIL_INDEX16 :: 0x8D49;
GL_RENDERBUFFER_RED_SIZE :: 0x8D50;
GL_RENDERBUFFER_GREEN_SIZE :: 0x8D51;
GL_RENDERBUFFER_BLUE_SIZE :: 0x8D52;
GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D53;
GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D54;
GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D55;
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56;
GL_MAX_SAMPLES :: 0x8D57;
GL_INDEX :: 0x8222;
GL_FRAMEBUFFER_SRGB :: 0x8DB9;
GL_HALF_FLOAT :: 0x140B;
GL_MAP_READ_BIT :: 0x0001;
GL_MAP_WRITE_BIT :: 0x0002;
GL_MAP_INVALIDATE_RANGE_BIT :: 0x0004;
GL_MAP_INVALIDATE_BUFFER_BIT :: 0x0008;
GL_MAP_FLUSH_EXPLICIT_BIT :: 0x0010;
GL_MAP_UNSYNCHRONIZED_BIT :: 0x0020;
GL_COMPRESSED_RED_RGTC1 :: 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC;
GL_COMPRESSED_RG_RGTC2 :: 0x8DBD;
GL_COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE;
GL_RG :: 0x8227;
GL_RG_INTEGER :: 0x8228;
GL_R8 :: 0x8229;
GL_R16 :: 0x822A;
GL_RG8 :: 0x822B;
GL_RG16 :: 0x822C;
GL_R16F :: 0x822D;
GL_R32F :: 0x822E;
GL_RG16F :: 0x822F;
GL_RG32F :: 0x8230;
GL_R8I :: 0x8231;
GL_R8UI :: 0x8232;
GL_R16I :: 0x8233;
GL_R16UI :: 0x8234;
GL_R32I :: 0x8235;
GL_R32UI :: 0x8236;
GL_RG8I :: 0x8237;
GL_RG8UI :: 0x8238;
GL_RG16I :: 0x8239;
GL_RG16UI :: 0x823A;
GL_RG32I :: 0x823B;
GL_RG32UI :: 0x823C;
GL_VERTEX_ARRAY_BINDING :: 0x85B5;

// GL_VERSION_3_1
GL_SAMPLER_2D_RECT :: 0x8B63;
GL_SAMPLER_2D_RECT_SHADOW :: 0x8B64;
GL_SAMPLER_BUFFER :: 0x8DC2;
GL_INT_SAMPLER_2D_RECT :: 0x8DCD;
GL_INT_SAMPLER_BUFFER :: 0x8DD0;
GL_UNSIGNED_INT_SAMPLER_2D_RECT :: 0x8DD5;
GL_UNSIGNED_INT_SAMPLER_BUFFER :: 0x8DD8;
GL_TEXTURE_BUFFER :: 0x8C2A;
GL_MAX_TEXTURE_BUFFER_SIZE :: 0x8C2B;
GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
GL_TEXTURE_BUFFER_DATA_STORE_BINDING :: 0x8C2D;
GL_TEXTURE_RECTANGLE :: 0x84F5;
GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;
GL_PROXY_TEXTURE_RECTANGLE :: 0x84F7;
GL_MAX_RECTANGLE_TEXTURE_SIZE :: 0x84F8;
GL_R8_SNORM :: 0x8F94;
GL_RG8_SNORM :: 0x8F95;
GL_RGB8_SNORM :: 0x8F96;
GL_RGBA8_SNORM :: 0x8F97;
GL_R16_SNORM :: 0x8F98;
GL_RG16_SNORM :: 0x8F99;
GL_RGB16_SNORM :: 0x8F9A;
GL_RGBA16_SNORM :: 0x8F9B;
GL_SIGNED_NORMALIZED :: 0x8F9C;
GL_PRIMITIVE_RESTART :: 0x8F9D;
GL_PRIMITIVE_RESTART_INDEX :: 0x8F9E;
GL_COPY_READ_BUFFER :: 0x8F36;
GL_COPY_WRITE_BUFFER :: 0x8F37;
GL_UNIFORM_BUFFER :: 0x8A11;
GL_UNIFORM_BUFFER_BINDING :: 0x8A28;
GL_UNIFORM_BUFFER_START :: 0x8A29;
GL_UNIFORM_BUFFER_SIZE :: 0x8A2A;
GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B;
GL_MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C;
GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D;
GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E;
GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F;
GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A30;
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31;
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32;
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33;
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34;
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35;
GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A36;
GL_UNIFORM_TYPE :: 0x8A37;
GL_UNIFORM_SIZE :: 0x8A38;
GL_UNIFORM_NAME_LENGTH :: 0x8A39;
GL_UNIFORM_BLOCK_INDEX :: 0x8A3A;
GL_UNIFORM_OFFSET :: 0x8A3B;
GL_UNIFORM_ARRAY_STRIDE :: 0x8A3C;
GL_UNIFORM_MATRIX_STRIDE :: 0x8A3D;
GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3E;
GL_UNIFORM_BLOCK_BINDING :: 0x8A3F;
GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A40;
GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42;
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43;
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44;
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45;
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46;
GL_INVALID_INDEX :: 0xFFFFFFFF;

// GL_VERSION_3_2
GL_CONTEXT_CORE_PROFILE_BIT :: 0x00000001;
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT :: 0x00000002;
GL_LINES_ADJACENCY :: 0x000A;
GL_LINE_STRIP_ADJACENCY :: 0x000B;
GL_TRIANGLES_ADJACENCY :: 0x000C;
GL_TRIANGLE_STRIP_ADJACENCY :: 0x000D;
GL_PROGRAM_POINT_SIZE :: 0x8642;
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS :: 0x8C29;
GL_FRAMEBUFFER_ATTACHMENT_LAYERED :: 0x8DA7;
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS :: 0x8DA8;
GL_GEOMETRY_SHADER :: 0x8DD9;
GL_GEOMETRY_VERTICES_OUT :: 0x8916;
GL_GEOMETRY_INPUT_TYPE :: 0x8917;
GL_GEOMETRY_OUTPUT_TYPE :: 0x8918;
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS :: 0x8DDF;
GL_MAX_GEOMETRY_OUTPUT_VERTICES :: 0x8DE0;
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS :: 0x8DE1;
GL_MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122;
GL_MAX_GEOMETRY_INPUT_COMPONENTS :: 0x9123;
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS :: 0x9124;
GL_MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125;
GL_CONTEXT_PROFILE_MASK :: 0x9126;
GL_DEPTH_CLAMP :: 0x864F;
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C;
GL_FIRST_VERTEX_CONVENTION :: 0x8E4D;
GL_LAST_VERTEX_CONVENTION :: 0x8E4E;
GL_PROVOKING_VERTEX :: 0x8E4F;
GL_TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F;
GL_MAX_SERVER_WAIT_TIMEOUT :: 0x9111;
GL_OBJECT_TYPE :: 0x9112;
GL_SYNC_CONDITION :: 0x9113;
GL_SYNC_STATUS :: 0x9114;
GL_SYNC_FLAGS :: 0x9115;
GL_SYNC_FENCE :: 0x9116;
GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x9117;
GL_UNSIGNALED :: 0x9118;
GL_SIGNALED :: 0x9119;
GL_ALREADY_SIGNALED :: 0x911A;
GL_TIMEOUT_EXPIRED :: 0x911B;
GL_CONDITION_SATISFIED :: 0x911C;
GL_WAIT_FAILED :: 0x911D;
GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF;
GL_SYNC_FLUSH_COMMANDS_BIT :: 0x00000001;
GL_SAMPLE_POSITION :: 0x8E50;
GL_SAMPLE_MASK :: 0x8E51;
GL_SAMPLE_MASK_VALUE :: 0x8E52;
GL_MAX_SAMPLE_MASK_WORDS :: 0x8E59;
GL_TEXTURE_2D_MULTISAMPLE :: 0x9100;
GL_PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101;
GL_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102;
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103;
GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
GL_TEXTURE_SAMPLES :: 0x9106;
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107;
GL_SAMPLER_2D_MULTISAMPLE :: 0x9108;
GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x9109;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A;
GL_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B;
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C;
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D;
GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910E;
GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F;
GL_MAX_INTEGER_SAMPLES :: 0x9110;

// GL_VERSION_3_3
GL_VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE;
GL_SRC1_COLOR :: 0x88F9;
GL_ONE_MINUS_SRC1_COLOR :: 0x88FA;
GL_ONE_MINUS_SRC1_ALPHA :: 0x88FB;
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC;
GL_ANY_SAMPLES_PASSED :: 0x8C2F;
GL_SAMPLER_BINDING :: 0x8919;
GL_RGB10_A2UI :: 0x906F;
GL_TEXTURE_SWIZZLE_R :: 0x8E42;
GL_TEXTURE_SWIZZLE_G :: 0x8E43;
GL_TEXTURE_SWIZZLE_B :: 0x8E44;
GL_TEXTURE_SWIZZLE_A :: 0x8E45;
GL_TEXTURE_SWIZZLE_RGBA :: 0x8E46;
GL_TIME_ELAPSED :: 0x88BF;
GL_TIMESTAMP :: 0x8E28;
GL_INT_2_10_10_10_REV :: 0x8D9F;

// GL_VERSION_4_0
GL_SAMPLE_SHADING :: 0x8C36;
GL_MIN_SAMPLE_SHADING_VALUE :: 0x8C37;
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E;
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F;
GL_TEXTURE_CUBE_MAP_ARRAY :: 0x9009;
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY :: 0x900B;
GL_SAMPLER_CUBE_MAP_ARRAY :: 0x900C;
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW :: 0x900D;
GL_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900E;
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900F;
GL_DRAW_INDIRECT_BUFFER :: 0x8F3F;
GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43;
GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
GL_MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A;
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B;
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C;
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D;
GL_MAX_VERTEX_STREAMS :: 0x8E71;
GL_DOUBLE_VEC2 :: 0x8FFC;
GL_DOUBLE_VEC3 :: 0x8FFD;
GL_DOUBLE_VEC4 :: 0x8FFE;
GL_DOUBLE_MAT2 :: 0x8F46;
GL_DOUBLE_MAT3 :: 0x8F47;
GL_DOUBLE_MAT4 :: 0x8F48;
GL_DOUBLE_MAT2x3 :: 0x8F49;
GL_DOUBLE_MAT2x4 :: 0x8F4A;
GL_DOUBLE_MAT3x2 :: 0x8F4B;
GL_DOUBLE_MAT3x4 :: 0x8F4C;
GL_DOUBLE_MAT4x2 :: 0x8F4D;
GL_DOUBLE_MAT4x3 :: 0x8F4E;
GL_ACTIVE_SUBROUTINES :: 0x8DE5;
GL_ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6;
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47;
GL_ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48;
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49;
GL_MAX_SUBROUTINES :: 0x8DE7;
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8;
GL_NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A;
GL_COMPATIBLE_SUBROUTINES :: 0x8E4B;
GL_PATCHES :: 0x000E;
GL_PATCH_VERTICES :: 0x8E72;
GL_PATCH_DEFAULT_INNER_LEVEL :: 0x8E73;
GL_PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74;
GL_TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75;
GL_TESS_GEN_MODE :: 0x8E76;
GL_TESS_GEN_SPACING :: 0x8E77;
GL_TESS_GEN_VERTEX_ORDER :: 0x8E78;
GL_TESS_GEN_POINT_MODE :: 0x8E79;
GL_ISOLINES :: 0x8E7A;
GL_FRACTIONAL_ODD :: 0x8E7B;
GL_FRACTIONAL_EVEN :: 0x8E7C;
GL_MAX_PATCH_VERTICES :: 0x8E7D;
GL_MAX_TESS_GEN_LEVEL :: 0x8E7E;
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F;
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80;
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81;
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82;
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83;
GL_MAX_TESS_PATCH_COMPONENTS :: 0x8E84;
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85;
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86;
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89;
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A;
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C;
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D;
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E;
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0;
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1;
GL_TESS_EVALUATION_SHADER :: 0x8E87;
GL_TESS_CONTROL_SHADER :: 0x8E88;
GL_TRANSFORM_FEEDBACK :: 0x8E22;
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23;
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24;
GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E25;
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70;
// GL_MAX_VERTEX_STREAMS :: 0x8E71;

// GL_VERSION_4_1
GL_FIXED :: 0x140C;
GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A;
GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B;
GL_LOW_FLOAT :: 0x8DF0;
GL_MEDIUM_FLOAT :: 0x8DF1;
GL_HIGH_FLOAT :: 0x8DF2;
GL_LOW_INT :: 0x8DF3;
GL_MEDIUM_INT :: 0x8DF4;
GL_HIGH_INT :: 0x8DF5;
GL_SHADER_COMPILER :: 0x8DFA;
GL_SHADER_BINARY_FORMATS :: 0x8DF8;
GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF9;
GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB;
GL_MAX_VARYING_VECTORS :: 0x8DFC;
GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD;
GL_RGB565 :: 0x8D62;
GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257;
GL_PROGRAM_BINARY_LENGTH :: 0x8741;
GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87FE;
GL_PROGRAM_BINARY_FORMATS :: 0x87FF;
GL_VERTEX_SHADER_BIT :: 0x00000001;
GL_FRAGMENT_SHADER_BIT :: 0x00000002;
GL_GEOMETRY_SHADER_BIT :: 0x00000004;
GL_TESS_CONTROL_SHADER_BIT :: 0x00000008;
GL_TESS_EVALUATION_SHADER_BIT :: 0x00000010;
GL_ALL_SHADER_BITS :: 0xFFFFFFFF;
GL_PROGRAM_SEPARABLE :: 0x8258;
GL_ACTIVE_PROGRAM :: 0x8259;
GL_PROGRAM_PIPELINE_BINDING :: 0x825A;
GL_MAX_VIEWPORTS :: 0x825B;
GL_VIEWPORT_SUBPIXEL_BITS :: 0x825C;
GL_VIEWPORT_BOUNDS_RANGE :: 0x825D;
GL_LAYER_PROVOKING_VERTEX :: 0x825E;
GL_VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F;
GL_UNDEFINED_VERTEX :: 0x8260;

// GL_VERSION_4_2
GL_COPY_READ_BUFFER_BINDING :: 0x8F36;
GL_COPY_WRITE_BUFFER_BINDING :: 0x8F37;
GL_TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24;
GL_TRANSFORM_FEEDBACK_PAUSED :: 0x8E23;
GL_UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127;
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128;
GL_UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129;
GL_UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A;
GL_PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B;
GL_PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C;
GL_PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D;
GL_PACK_COMPRESSED_BLOCK_SIZE :: 0x912E;
GL_NUM_SAMPLE_COUNTS :: 0x9380;
GL_MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC;
GL_ATOMIC_COUNTER_BUFFER :: 0x92C0;
GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1;
GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C2;
GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3;
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5;
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB;
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE;
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF;
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0;
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1;
GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2;
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3;
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4;
GL_MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5;
GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6;
GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7;
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8;
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC;
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9;
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA;
GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB;
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001;
GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002;
GL_UNIFORM_BARRIER_BIT :: 0x00000004;
GL_TEXTURE_FETCH_BARRIER_BIT :: 0x00000008;
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020;
GL_COMMAND_BARRIER_BIT :: 0x00000040;
GL_PIXEL_BUFFER_BARRIER_BIT :: 0x00000080;
GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100;
GL_BUFFER_UPDATE_BARRIER_BIT :: 0x00000200;
GL_FRAMEBUFFER_BARRIER_BIT :: 0x00000400;
GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800;
GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000;
GL_ALL_BARRIER_BITS :: 0xFFFFFFFF;
GL_MAX_IMAGE_UNITS :: 0x8F38;
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39;
GL_IMAGE_BINDING_NAME :: 0x8F3A;
GL_IMAGE_BINDING_LEVEL :: 0x8F3B;
GL_IMAGE_BINDING_LAYERED :: 0x8F3C;
GL_IMAGE_BINDING_LAYER :: 0x8F3D;
GL_IMAGE_BINDING_ACCESS :: 0x8F3E;
GL_IMAGE_1D :: 0x904C;
GL_IMAGE_2D :: 0x904D;
GL_IMAGE_3D :: 0x904E;
GL_IMAGE_2D_RECT :: 0x904F;
GL_IMAGE_CUBE :: 0x9050;
GL_IMAGE_BUFFER :: 0x9051;
GL_IMAGE_1D_ARRAY :: 0x9052;
GL_IMAGE_2D_ARRAY :: 0x9053;
GL_IMAGE_CUBE_MAP_ARRAY :: 0x9054;
GL_IMAGE_2D_MULTISAMPLE :: 0x9055;
GL_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056;
GL_INT_IMAGE_1D :: 0x9057;
GL_INT_IMAGE_2D :: 0x9058;
GL_INT_IMAGE_3D :: 0x9059;
GL_INT_IMAGE_2D_RECT :: 0x905A;
GL_INT_IMAGE_CUBE :: 0x905B;
GL_INT_IMAGE_BUFFER :: 0x905C;
GL_INT_IMAGE_1D_ARRAY :: 0x905D;
GL_INT_IMAGE_2D_ARRAY :: 0x905E;
GL_INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F;
GL_INT_IMAGE_2D_MULTISAMPLE :: 0x9060;
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061;
GL_UNSIGNED_INT_IMAGE_1D :: 0x9062;
GL_UNSIGNED_INT_IMAGE_2D :: 0x9063;
GL_UNSIGNED_INT_IMAGE_3D :: 0x9064;
GL_UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065;
GL_UNSIGNED_INT_IMAGE_CUBE :: 0x9066;
GL_UNSIGNED_INT_IMAGE_BUFFER :: 0x9067;
GL_UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068;
GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069;
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B;
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C;
GL_MAX_IMAGE_SAMPLES :: 0x906D;
GL_IMAGE_BINDING_FORMAT :: 0x906E;
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8;
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9;
GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA;
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB;
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC;
GL_MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD;
GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE;
GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF;
GL_COMPRESSED_RGBA_BPTC_UNORM :: 0x8E8C;
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM :: 0x8E8D;
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT :: 0x8E8E;
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT :: 0x8E8F;
GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912F;

// GL_VERSION_4_3
GL_NUM_SHADING_LANGUAGE_VERSIONS :: 0x82E9;
GL_VERTEX_ATTRIB_ARRAY_LONG :: 0x874E;
GL_COMPRESSED_RGB8_ETC2 :: 0x9274;
GL_COMPRESSED_SRGB8_ETC2 :: 0x9275;
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276;
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277;
GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x9278;
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279;
GL_COMPRESSED_R11_EAC :: 0x9270;
GL_COMPRESSED_SIGNED_R11_EAC :: 0x9271;
GL_COMPRESSED_RG11_EAC :: 0x9272;
GL_COMPRESSED_SIGNED_RG11_EAC :: 0x9273;
GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69;
GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A;
GL_MAX_ELEMENT_INDEX :: 0x8D6B;
GL_COMPUTE_SHADER :: 0x91B9;
GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB;
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC;
GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD;
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262;
GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263;
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264;
GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265;
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266;
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB;
GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE;
GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF;
GL_COMPUTE_WORK_GROUP_SIZE :: 0x8267;
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC;
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED;
GL_DISPATCH_INDIRECT_BUFFER :: 0x90EE;
GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF;
GL_COMPUTE_SHADER_BIT :: 0x00000020;
GL_DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM :: 0x8245;
GL_DEBUG_SOURCE_API :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION :: 0x824A;
GL_DEBUG_SOURCE_OTHER :: 0x824B;
GL_DEBUG_TYPE_ERROR :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE :: 0x8250;
GL_DEBUG_TYPE_OTHER :: 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES :: 0x9145;
GL_DEBUG_SEVERITY_HIGH :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM :: 0x9147;
GL_DEBUG_SEVERITY_LOW :: 0x9148;
GL_DEBUG_TYPE_MARKER :: 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP :: 0x8269;
GL_DEBUG_TYPE_POP_GROUP :: 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH :: 0x826D;
GL_BUFFER :: 0x82E0;
GL_SHADER :: 0x82E1;
GL_PROGRAM :: 0x82E2;
GL_QUERY :: 0x82E3;
GL_PROGRAM_PIPELINE :: 0x82E4;
GL_SAMPLER :: 0x82E6;
GL_MAX_LABEL_LENGTH :: 0x82E8;
GL_DEBUG_OUTPUT :: 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
GL_MAX_UNIFORM_LOCATIONS :: 0x826E;
GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310;
GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311;
GL_FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312;
GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313;
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314;
GL_MAX_FRAMEBUFFER_WIDTH :: 0x9315;
GL_MAX_FRAMEBUFFER_HEIGHT :: 0x9316;
GL_MAX_FRAMEBUFFER_LAYERS :: 0x9317;
GL_MAX_FRAMEBUFFER_SAMPLES :: 0x9318;
GL_INTERNALFORMAT_SUPPORTED :: 0x826F;
GL_INTERNALFORMAT_PREFERRED :: 0x8270;
GL_INTERNALFORMAT_RED_SIZE :: 0x8271;
GL_INTERNALFORMAT_GREEN_SIZE :: 0x8272;
GL_INTERNALFORMAT_BLUE_SIZE :: 0x8273;
GL_INTERNALFORMAT_ALPHA_SIZE :: 0x8274;
GL_INTERNALFORMAT_DEPTH_SIZE :: 0x8275;
GL_INTERNALFORMAT_STENCIL_SIZE :: 0x8276;
GL_INTERNALFORMAT_SHARED_SIZE :: 0x8277;
GL_INTERNALFORMAT_RED_TYPE :: 0x8278;
GL_INTERNALFORMAT_GREEN_TYPE :: 0x8279;
GL_INTERNALFORMAT_BLUE_TYPE :: 0x827A;
GL_INTERNALFORMAT_ALPHA_TYPE :: 0x827B;
GL_INTERNALFORMAT_DEPTH_TYPE :: 0x827C;
GL_INTERNALFORMAT_STENCIL_TYPE :: 0x827D;
GL_MAX_WIDTH :: 0x827E;
GL_MAX_HEIGHT :: 0x827F;
GL_MAX_DEPTH :: 0x8280;
GL_MAX_LAYERS :: 0x8281;
GL_MAX_COMBINED_DIMENSIONS :: 0x8282;
GL_COLOR_COMPONENTS :: 0x8283;
GL_DEPTH_COMPONENTS :: 0x8284;
GL_STENCIL_COMPONENTS :: 0x8285;
GL_COLOR_RENDERABLE :: 0x8286;
GL_DEPTH_RENDERABLE :: 0x8287;
GL_STENCIL_RENDERABLE :: 0x8288;
GL_FRAMEBUFFER_RENDERABLE :: 0x8289;
GL_FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A;
GL_FRAMEBUFFER_BLEND :: 0x828B;
GL_READ_PIXELS :: 0x828C;
GL_READ_PIXELS_FORMAT :: 0x828D;
GL_READ_PIXELS_TYPE :: 0x828E;
GL_TEXTURE_IMAGE_FORMAT :: 0x828F;
GL_TEXTURE_IMAGE_TYPE :: 0x8290;
GL_GET_TEXTURE_IMAGE_FORMAT :: 0x8291;
GL_GET_TEXTURE_IMAGE_TYPE :: 0x8292;
GL_MIPMAP :: 0x8293;
GL_MANUAL_GENERATE_MIPMAP :: 0x8294;
GL_AUTO_GENERATE_MIPMAP :: 0x8295;
GL_COLOR_ENCODING :: 0x8296;
GL_SRGB_READ :: 0x8297;
GL_SRGB_WRITE :: 0x8298;
GL_FILTER :: 0x829A;
GL_VERTEX_TEXTURE :: 0x829B;
GL_TESS_CONTROL_TEXTURE :: 0x829C;
GL_TESS_EVALUATION_TEXTURE :: 0x829D;
GL_GEOMETRY_TEXTURE :: 0x829E;
GL_FRAGMENT_TEXTURE :: 0x829F;
GL_COMPUTE_TEXTURE :: 0x82A0;
GL_TEXTURE_SHADOW :: 0x82A1;
GL_TEXTURE_GATHER :: 0x82A2;
GL_TEXTURE_GATHER_SHADOW :: 0x82A3;
GL_SHADER_IMAGE_LOAD :: 0x82A4;
GL_SHADER_IMAGE_STORE :: 0x82A5;
GL_SHADER_IMAGE_ATOMIC :: 0x82A6;
GL_IMAGE_TEXEL_SIZE :: 0x82A7;
GL_IMAGE_COMPATIBILITY_CLASS :: 0x82A8;
GL_IMAGE_PIXEL_FORMAT :: 0x82A9;
GL_IMAGE_PIXEL_TYPE :: 0x82AA;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD;
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE;
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF;
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1;
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2;
GL_TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3;
GL_CLEAR_BUFFER :: 0x82B4;
GL_TEXTURE_VIEW :: 0x82B5;
GL_VIEW_COMPATIBILITY_CLASS :: 0x82B6;
GL_FULL_SUPPORT :: 0x82B7;
GL_CAVEAT_SUPPORT :: 0x82B8;
GL_IMAGE_CLASS_4_X_32 :: 0x82B9;
GL_IMAGE_CLASS_2_X_32 :: 0x82BA;
GL_IMAGE_CLASS_1_X_32 :: 0x82BB;
GL_IMAGE_CLASS_4_X_16 :: 0x82BC;
GL_IMAGE_CLASS_2_X_16 :: 0x82BD;
GL_IMAGE_CLASS_1_X_16 :: 0x82BE;
GL_IMAGE_CLASS_4_X_8 :: 0x82BF;
GL_IMAGE_CLASS_2_X_8 :: 0x82C0;
GL_IMAGE_CLASS_1_X_8 :: 0x82C1;
GL_IMAGE_CLASS_11_11_10 :: 0x82C2;
GL_IMAGE_CLASS_10_10_10_2 :: 0x82C3;
GL_VIEW_CLASS_128_BITS :: 0x82C4;
GL_VIEW_CLASS_96_BITS :: 0x82C5;
GL_VIEW_CLASS_64_BITS :: 0x82C6;
GL_VIEW_CLASS_48_BITS :: 0x82C7;
GL_VIEW_CLASS_32_BITS :: 0x82C8;
GL_VIEW_CLASS_24_BITS :: 0x82C9;
GL_VIEW_CLASS_16_BITS :: 0x82CA;
GL_VIEW_CLASS_8_BITS :: 0x82CB;
GL_VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC;
GL_VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD;
GL_VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE;
GL_VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF;
GL_VIEW_CLASS_RGTC1_RED :: 0x82D0;
GL_VIEW_CLASS_RGTC2_RG :: 0x82D1;
GL_VIEW_CLASS_BPTC_UNORM :: 0x82D2;
GL_VIEW_CLASS_BPTC_FLOAT :: 0x82D3;
GL_UNIFORM :: 0x92E1;
GL_UNIFORM_BLOCK :: 0x92E2;
GL_PROGRAM_INPUT :: 0x92E3;
GL_PROGRAM_OUTPUT :: 0x92E4;
GL_BUFFER_VARIABLE :: 0x92E5;
GL_SHADER_STORAGE_BLOCK :: 0x92E6;
GL_VERTEX_SUBROUTINE :: 0x92E8;
GL_TESS_CONTROL_SUBROUTINE :: 0x92E9;
GL_TESS_EVALUATION_SUBROUTINE :: 0x92EA;
GL_GEOMETRY_SUBROUTINE :: 0x92EB;
GL_FRAGMENT_SUBROUTINE :: 0x92EC;
GL_COMPUTE_SUBROUTINE :: 0x92ED;
GL_VERTEX_SUBROUTINE_UNIFORM :: 0x92EE;
GL_TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF;
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0;
GL_GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1;
GL_FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2;
GL_COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3;
GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F4;
GL_ACTIVE_RESOURCES :: 0x92F5;
GL_MAX_NAME_LENGTH :: 0x92F6;
GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F7;
GL_MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8;
GL_NAME_LENGTH :: 0x92F9;
GL_TYPE :: 0x92FA;
GL_ARRAY_SIZE :: 0x92FB;
GL_OFFSET :: 0x92FC;
GL_BLOCK_INDEX :: 0x92FD;
GL_ARRAY_STRIDE :: 0x92FE;
GL_MATRIX_STRIDE :: 0x92FF;
GL_IS_ROW_MAJOR :: 0x9300;
GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301;
GL_BUFFER_BINDING :: 0x9302;
GL_BUFFER_DATA_SIZE :: 0x9303;
GL_NUM_ACTIVE_VARIABLES :: 0x9304;
GL_ACTIVE_VARIABLES :: 0x9305;
GL_REFERENCED_BY_VERTEX_SHADER :: 0x9306;
GL_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307;
GL_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308;
GL_REFERENCED_BY_GEOMETRY_SHADER :: 0x9309;
GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930A;
GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930B;
GL_TOP_LEVEL_ARRAY_SIZE :: 0x930C;
GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930D;
GL_LOCATION :: 0x930E;
GL_LOCATION_INDEX :: 0x930F;
GL_IS_PER_PATCH :: 0x92E7;
GL_SHADER_STORAGE_BUFFER :: 0x90D2;
GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D3;
GL_SHADER_STORAGE_BUFFER_START :: 0x90D4;
GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D5;
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6;
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7;
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8;
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9;
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA;
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB;
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC;
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD;
GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE;
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF;
GL_SHADER_STORAGE_BARRIER_BIT :: 0x00002000;
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39;
GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA;
GL_TEXTURE_BUFFER_OFFSET :: 0x919D;
GL_TEXTURE_BUFFER_SIZE :: 0x919E;
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F;
GL_TEXTURE_VIEW_MIN_LEVEL :: 0x82DB;
GL_TEXTURE_VIEW_NUM_LEVELS :: 0x82DC;
GL_TEXTURE_VIEW_MIN_LAYER :: 0x82DD;
GL_TEXTURE_VIEW_NUM_LAYERS :: 0x82DE;
GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82DF;
GL_VERTEX_ATTRIB_BINDING :: 0x82D4;
GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5;
GL_VERTEX_BINDING_DIVISOR :: 0x82D6;
GL_VERTEX_BINDING_OFFSET :: 0x82D7;
GL_VERTEX_BINDING_STRIDE :: 0x82D8;
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9;
GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA;
GL_VERTEX_BINDING_BUFFER :: 0x8F4F;
GL_DISPLAY_LIST :: 0x82E7;

// GL_VERSION_4_4
GL_MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5;
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED :: 0x8221;
GL_TEXTURE_BUFFER_BINDING :: 0x8C2A;
// GL_MAP_READ_BIT :: 0x0001;
// GL_MAP_WRITE_BIT :: 0x0002;
GL_MAP_PERSISTENT_BIT :: 0x0040;
GL_MAP_COHERENT_BIT :: 0x0080;
GL_DYNAMIC_STORAGE_BIT :: 0x0100;
GL_CLIENT_STORAGE_BIT :: 0x0200;
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000;
GL_BUFFER_IMMUTABLE_STORAGE :: 0x821F;
GL_BUFFER_STORAGE_FLAGS :: 0x8220;
GL_CLEAR_TEXTURE :: 0x9365;
GL_LOCATION_COMPONENT :: 0x934A;
// GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E;
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B;
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C;
GL_QUERY_BUFFER :: 0x9192;
GL_QUERY_BUFFER_BARRIER_BIT :: 0x00008000;
GL_QUERY_BUFFER_BINDING :: 0x9193;
GL_QUERY_RESULT_NO_WAIT :: 0x9194;
GL_MIRROR_CLAMP_TO_EDGE :: 0x8743;
// GL_STENCIL_INDEX :: 0x1901;
// GL_STENCIL_INDEX8 :: 0x8D48;
// GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B;

// GL_VERSION_4_5
GL_CONTEXT_LOST :: 0x0507;
// GL_LOWER_LEFT :: 0x8CA1;
// GL_UPPER_LEFT :: 0x8CA2;
GL_NEGATIVE_ONE_TO_ONE :: 0x935E;
GL_ZERO_TO_ONE :: 0x935F;
GL_CLIP_ORIGIN :: 0x935C;
GL_CLIP_DEPTH_MODE :: 0x935D;
GL_QUERY_WAIT_INVERTED :: 0x8E17;
GL_QUERY_NO_WAIT_INVERTED :: 0x8E18;
GL_QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19;
GL_QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A;
GL_MAX_CULL_DISTANCES :: 0x82F9;
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA;
GL_TEXTURE_TARGET :: 0x1006;
GL_QUERY_TARGET :: 0x82EA;
// GL_TEXTURE_BINDING_1D :: 0x8068;
// GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
// GL_TEXTURE_BINDING_2D :: 0x8069;
// GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
// GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
// GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
// GL_TEXTURE_BINDING_3D :: 0x806A;
// GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
// GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
// GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
// GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;
// GL_BACK :: 0x0405;
// GL_NO_ERROR :: 0;
GL_GUILTY_CONTEXT_RESET :: 0x8253;
GL_INNOCENT_CONTEXT_RESET :: 0x8254;
GL_UNKNOWN_CONTEXT_RESET :: 0x8255;
GL_RESET_NOTIFICATION_STRATEGY :: 0x8256;
GL_LOSE_CONTEXT_ON_RESET :: 0x8252;
GL_NO_RESET_NOTIFICATION :: 0x8261;
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT :: 0x00000004;
// GL_CONTEXT_LOST :: 0x0507;
GL_CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
// GL_NONE :: 0;
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;

// GL_VERSION_4_6
// GL_CONTEXT_RELEASE_BEHAVIOR :: 0x82FB;
// GL_NONE :: 0;
// GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC;
GL_SHADER_BINARY_FORMAT_SPIR_V :: 0x9551;
GL_SPIR_V_BINARY :: 0x9552;
GL_PARAMETER_BUFFER :: 0x80EE;
GL_PARAMETER_BUFFER_BINDING :: 0x80EF;
GL_CONTEXT_FLAG_NO_ERROR_BIT :: 0x00000008;
GL_VERTICES_SUBMITTED :: 0x82EE;
GL_PRIMITIVES_SUBMITTED :: 0x82EF;
GL_VERTEX_SHADER_INVOCATIONS :: 0x82F0;
GL_TESS_CONTROL_SHADER_PATCHES :: 0x82F1;
GL_TESS_EVALUATION_SHADER_INVOCATIONS :: 0x82F2;
// GL_GEOMETRY_SHADER_INVOCATIONS :: 0x887F;
GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED :: 0x82F3;
GL_FRAGMENT_SHADER_INVOCATIONS :: 0x82F4;
GL_COMPUTE_SHADER_INVOCATIONS :: 0x82F5;
GL_CLIPPING_INPUT_PRIMITIVES :: 0x82F6;
GL_CLIPPING_OUTPUT_PRIMITIVES :: 0x82F7;
GL_POLYGON_OFFSET_CLAMP :: 0x8E1B;
GL_SPIR_V_EXTENSIONS :: 0x9553;
GL_NUM_SPIR_V_EXTENSIONS :: 0x9554;
GL_TEXTURE_MAX_ANISOTROPY :: 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF;
GL_TRANSFORM_FEEDBACK_OVERFLOW :: 0x82EC;
GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW :: 0x82ED;




// Extension enums:

// GL_ARB_clip_control
// GL_LOWER_LEFT :: 0x8CA1;
// GL_UPPER_LEFT :: 0x8CA2;
// GL_NEGATIVE_ONE_TO_ONE :: 0x935E;
// GL_ZERO_TO_ONE :: 0x935F;
// GL_CLIP_ORIGIN :: 0x935C;
// GL_CLIP_DEPTH_MODE :: 0x935D;

// GL_ARB_debug_output
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION_ARB :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM_ARB :: 0x8245;
GL_DEBUG_SOURCE_API_ARB :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY_ARB :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION_ARB :: 0x824A;
GL_DEBUG_SOURCE_OTHER_ARB :: 0x824B;
GL_DEBUG_TYPE_ERROR_ARB :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY_ARB :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE_ARB :: 0x8250;
GL_DEBUG_TYPE_OTHER_ARB :: 0x8251;
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES_ARB :: 0x9145;
GL_DEBUG_SEVERITY_HIGH_ARB :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM_ARB :: 0x9147;
GL_DEBUG_SEVERITY_LOW_ARB :: 0x9148;

// GL_ARB_direct_state_access
// GL_TEXTURE_TARGET :: 0x1006;
// GL_QUERY_TARGET :: 0x82EA;
// GL_TEXTURE_BINDING_1D :: 0x8068;
// GL_TEXTURE_BINDING_1D_ARRAY :: 0x8C1C;
// GL_TEXTURE_BINDING_2D :: 0x8069;
// GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D;
// GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104;
// GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105;
// GL_TEXTURE_BINDING_3D :: 0x806A;
// GL_TEXTURE_BINDING_BUFFER :: 0x8C2C;
// GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514;
// GL_TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A;
// GL_TEXTURE_BINDING_RECTANGLE :: 0x84F6;

// GL_ARB_parallel_shader_compile
GL_MAX_SHADER_COMPILER_THREADS_ARB :: 0x91B0;
GL_COMPLETION_STATUS_ARB :: 0x91B1;

// GL_ARB_sampler_objects

// GL_AMD_vertex_shader_viewport_index

// GL_EXT_debug_label
GL_PROGRAM_PIPELINE_OBJECT_EXT :: 0x8A4F;
GL_PROGRAM_OBJECT_EXT :: 0x8B40;
GL_SHADER_OBJECT_EXT :: 0x8B48;
GL_BUFFER_OBJECT_EXT :: 0x9151;
GL_QUERY_OBJECT_EXT :: 0x9153;
GL_VERTEX_ARRAY_OBJECT_EXT :: 0x9154;
// GL_SAMPLER :: 0x82E6;
// GL_TRANSFORM_FEEDBACK :: 0x8E22;

// GL_EXT_texture_compression_latc
GL_COMPRESSED_LUMINANCE_LATC1_EXT :: 0x8C70;
GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT :: 0x8C71;
GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT :: 0x8C72;
GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT :: 0x8C73;

// GL_EXT_texture_compression_rgtc
GL_COMPRESSED_RED_RGTC1_EXT :: 0x8DBB;
GL_COMPRESSED_SIGNED_RED_RGTC1_EXT :: 0x8DBC;
GL_COMPRESSED_RED_GREEN_RGTC2_EXT :: 0x8DBD;
GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT :: 0x8DBE;

// GL_EXT_texture_compression_s3tc
GL_COMPRESSED_RGB_S3TC_DXT1_EXT :: 0x83F0;
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT :: 0x83F1;
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT :: 0x83F2;
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT :: 0x83F3;

// GL_EXT_texture_filter_anisotropic
GL_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FE;
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT :: 0x84FF;

// GL_EXT_texture_sRGB
GL_SRGB_EXT :: 0x8C40;
GL_SRGB8_EXT :: 0x8C41;
GL_SRGB_ALPHA_EXT :: 0x8C42;
GL_SRGB8_ALPHA8_EXT :: 0x8C43;
GL_SLUMINANCE_ALPHA_EXT :: 0x8C44;
GL_SLUMINANCE8_ALPHA8_EXT :: 0x8C45;
GL_SLUMINANCE_EXT :: 0x8C46;
GL_SLUMINANCE8_EXT :: 0x8C47;
GL_COMPRESSED_SRGB_EXT :: 0x8C48;
GL_COMPRESSED_SRGB_ALPHA_EXT :: 0x8C49;
GL_COMPRESSED_SLUMINANCE_EXT :: 0x8C4A;
GL_COMPRESSED_SLUMINANCE_ALPHA_EXT :: 0x8C4B;
GL_COMPRESSED_SRGB_S3TC_DXT1_EXT :: 0x8C4C;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT :: 0x8C4D;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT :: 0x8C4E;
GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT :: 0x8C4F;

// GL_KHR_debug
// GL_DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242;
// GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243;
// GL_DEBUG_CALLBACK_FUNCTION :: 0x8244;
// GL_DEBUG_CALLBACK_USER_PARAM :: 0x8245;
// GL_DEBUG_SOURCE_API :: 0x8246;
// GL_DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247;
// GL_DEBUG_SOURCE_SHADER_COMPILER :: 0x8248;
// GL_DEBUG_SOURCE_THIRD_PARTY :: 0x8249;
// GL_DEBUG_SOURCE_APPLICATION :: 0x824A;
// GL_DEBUG_SOURCE_OTHER :: 0x824B;
// GL_DEBUG_TYPE_ERROR :: 0x824C;
// GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D;
// GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E;
// GL_DEBUG_TYPE_PORTABILITY :: 0x824F;
// GL_DEBUG_TYPE_PERFORMANCE :: 0x8250;
// GL_DEBUG_TYPE_OTHER :: 0x8251;
// GL_DEBUG_TYPE_MARKER :: 0x8268;
// GL_DEBUG_TYPE_PUSH_GROUP :: 0x8269;
// GL_DEBUG_TYPE_POP_GROUP :: 0x826A;
// GL_DEBUG_SEVERITY_NOTIFICATION :: 0x826B;
// GL_MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C;
// GL_DEBUG_GROUP_STACK_DEPTH :: 0x826D;
// GL_BUFFER :: 0x82E0;
// GL_SHADER :: 0x82E1;
// GL_PROGRAM :: 0x82E2;
GL_VERTEX_ARRAY :: 0x8074;
// GL_QUERY :: 0x82E3;
// GL_PROGRAM_PIPELINE :: 0x82E4;
// GL_SAMPLER :: 0x82E6;
// GL_MAX_LABEL_LENGTH :: 0x82E8;
// GL_MAX_DEBUG_MESSAGE_LENGTH :: 0x9143;
// GL_MAX_DEBUG_LOGGED_MESSAGES :: 0x9144;
// GL_DEBUG_LOGGED_MESSAGES :: 0x9145;
// GL_DEBUG_SEVERITY_HIGH :: 0x9146;
// GL_DEBUG_SEVERITY_MEDIUM :: 0x9147;
// GL_DEBUG_SEVERITY_LOW :: 0x9148;
// GL_DEBUG_OUTPUT :: 0x92E0;
// GL_CONTEXT_FLAG_DEBUG_BIT :: 0x00000002;
GL_STACK_OVERFLOW :: 0x0503;
GL_STACK_UNDERFLOW :: 0x0504;
GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR :: 0x8242;
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR :: 0x8243;
GL_DEBUG_CALLBACK_FUNCTION_KHR :: 0x8244;
GL_DEBUG_CALLBACK_USER_PARAM_KHR :: 0x8245;
GL_DEBUG_SOURCE_API_KHR :: 0x8246;
GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR :: 0x8247;
GL_DEBUG_SOURCE_SHADER_COMPILER_KHR :: 0x8248;
GL_DEBUG_SOURCE_THIRD_PARTY_KHR :: 0x8249;
GL_DEBUG_SOURCE_APPLICATION_KHR :: 0x824A;
GL_DEBUG_SOURCE_OTHER_KHR :: 0x824B;
GL_DEBUG_TYPE_ERROR_KHR :: 0x824C;
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR :: 0x824D;
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR :: 0x824E;
GL_DEBUG_TYPE_PORTABILITY_KHR :: 0x824F;
GL_DEBUG_TYPE_PERFORMANCE_KHR :: 0x8250;
GL_DEBUG_TYPE_OTHER_KHR :: 0x8251;
GL_DEBUG_TYPE_MARKER_KHR :: 0x8268;
GL_DEBUG_TYPE_PUSH_GROUP_KHR :: 0x8269;
GL_DEBUG_TYPE_POP_GROUP_KHR :: 0x826A;
GL_DEBUG_SEVERITY_NOTIFICATION_KHR :: 0x826B;
GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826C;
GL_DEBUG_GROUP_STACK_DEPTH_KHR :: 0x826D;
GL_BUFFER_KHR :: 0x82E0;
GL_SHADER_KHR :: 0x82E1;
GL_PROGRAM_KHR :: 0x82E2;
GL_VERTEX_ARRAY_KHR :: 0x8074;
GL_QUERY_KHR :: 0x82E3;
GL_PROGRAM_PIPELINE_KHR :: 0x82E4;
GL_SAMPLER_KHR :: 0x82E6;
GL_MAX_LABEL_LENGTH_KHR :: 0x82E8;
GL_MAX_DEBUG_MESSAGE_LENGTH_KHR :: 0x9143;
GL_MAX_DEBUG_LOGGED_MESSAGES_KHR :: 0x9144;
GL_DEBUG_LOGGED_MESSAGES_KHR :: 0x9145;
GL_DEBUG_SEVERITY_HIGH_KHR :: 0x9146;
GL_DEBUG_SEVERITY_MEDIUM_KHR :: 0x9147;
GL_DEBUG_SEVERITY_LOW_KHR :: 0x9148;
GL_DEBUG_OUTPUT_KHR :: 0x92E0;
GL_CONTEXT_FLAG_DEBUG_BIT_KHR :: 0x00000002;
GL_STACK_OVERFLOW_KHR :: 0x0503;
GL_STACK_UNDERFLOW_KHR :: 0x0504;
// GL_DISPLAY_LIST :: 0x82E7;

// GL_NV_depth_buffer_float
GL_DEPTH_COMPONENT32F_NV :: 0x8DAB;
GL_DEPTH32F_STENCIL8_NV :: 0x8DAC;
GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV :: 0x8DAD;
GL_DEPTH_BUFFER_FLOAT_MODE_NV :: 0x8DAF;

// GL_S3_s3tc
GL_RGB_S3TC :: 0x83A0;
GL_RGB4_S3TC :: 0x83A1;
GL_RGBA_S3TC :: 0x83A2;
GL_RGBA4_S3TC :: 0x83A3;
GL_RGBA_DXT5_S3TC :: 0x83A4;
GL_RGBA4_DXT5_S3TC :: 0x83A5;


// GL_ARB_direct_state_access
// glCreateTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
// glTransformFeedbackBufferBase : (xfb: GLuint, index: GLuint, buffer: GLuint) #foreign;
// glTransformFeedbackBufferRange : (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
// glGetTransformFeedbackiv : (xfb: GLuint, pname: GLenum, param: *GLint) #foreign;
// glGetTransformFeedbacki_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) #foreign;
// glGetTransformFeedbacki64_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) #foreign;
// glCreateBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
// glNamedBufferStorage : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
// glNamedBufferData : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
// glNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
// glCopyNamedBufferSubData : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
// glClearNamedBufferData : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
// glClearNamedBufferSubData : (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
// glMapNamedBuffer : (buffer: GLuint, access: GLenum) #foreign;
// glMapNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) #foreign;
// glUnmapNamedBuffer : (buffer: GLuint) -> GLboolean #foreign;
// glFlushMappedNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
// glGetNamedBufferParameteriv : (buffer: GLuint, pname: GLenum, params: *GLint) #foreign;
// glGetNamedBufferParameteri64v : (buffer: GLuint, pname: GLenum, params: *GLint64) #foreign;
// glGetNamedBufferPointerv : (buffer: GLuint, pname: GLenum, params: **void) #foreign;
// glGetNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
// glCreateFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
// glNamedFramebufferRenderbuffer : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
// glNamedFramebufferParameteri : (framebuffer: GLuint, pname: GLenum, param: GLint) #foreign;
// glNamedFramebufferTexture : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
// glNamedFramebufferTextureLayer : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
// glNamedFramebufferDrawBuffer : (framebuffer: GLuint, buf: GLenum) #foreign;
// glNamedFramebufferDrawBuffers : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #foreign;
// glNamedFramebufferReadBuffer : (framebuffer: GLuint, src: GLenum) #foreign;
// glInvalidateNamedFramebufferData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) #foreign;
// glInvalidateNamedFramebufferSubData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
// glClearNamedFramebufferiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) #foreign;
// glClearNamedFramebufferuiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) #foreign;
// glClearNamedFramebufferfv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #foreign;
// glClearNamedFramebufferfi : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #foreign;
// glBlitNamedFramebuffer : (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
// glCheckNamedFramebufferStatus : (framebuffer: GLuint, target: GLenum) -> GLenum #foreign;
// glGetNamedFramebufferParameteriv : (framebuffer: GLuint, pname: GLenum, param: *GLint) #foreign;
// glGetNamedFramebufferAttachmentParameteriv : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
// glCreateRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
// glNamedRenderbufferStorage : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
// glNamedRenderbufferStorageMultisample : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
// glGetNamedRenderbufferParameteriv : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
// glCreateTextures : (target: GLenum, n: GLsizei, textures: *GLuint) #foreign;
// glTextureBuffer : (texture: GLuint, internalformat: GLenum, buffer: GLuint) #foreign;
// glTextureBufferRange : (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
// glTextureStorage1D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
// glTextureStorage2D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
// glTextureStorage3D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
// glTextureStorage2DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
// glTextureStorage3DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
// glTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
// glTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
// glTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
// glCompressedTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
// glCompressedTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
// glCompressedTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
// glCopyTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
// glCopyTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
// glCopyTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
// glTextureParameterf : (texture: GLuint, pname: GLenum, param: GLfloat) #foreign;
// glTextureParameterfv : (texture: GLuint, pname: GLenum, param: *GLfloat) #foreign;
// glTextureParameteri : (texture: GLuint, pname: GLenum, param: GLint) #foreign;
// glTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
// glTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
// glTextureParameteriv : (texture: GLuint, pname: GLenum, param: *GLint) #foreign;
// glGenerateTextureMipmap : (texture: GLuint) #foreign;
// glBindTextureUnit : (unit: GLuint, texture: GLuint) #foreign;
// glGetTextureImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
// glGetCompressedTextureImage : (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) #foreign;
// glGetTextureLevelParameterfv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
// glGetTextureLevelParameteriv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) #foreign;
// glGetTextureParameterfv : (texture: GLuint, pname: GLenum, params: *GLfloat) #foreign;
// glGetTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
// glGetTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
// glGetTextureParameteriv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
// glCreateVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
// glDisableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
// glEnableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
// glVertexArrayElementBuffer : (vaobj: GLuint, buffer: GLuint) #foreign;
// glVertexArrayVertexBuffer : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
// glVertexArrayVertexBuffers : (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;
// glVertexArrayAttribBinding : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #foreign;
// glVertexArrayAttribFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
// glVertexArrayAttribIFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
// glVertexArrayAttribLFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
// glVertexArrayBindingDivisor : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #foreign;
// glGetVertexArrayiv : (vaobj: GLuint, pname: GLenum, param: *GLint) #foreign;
// glGetVertexArrayIndexediv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #foreign;
// glGetVertexArrayIndexed64iv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) #foreign;
// glCreateSamplers : (n: GLsizei, samplers: *GLuint) #foreign;
// glCreateProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
// glCreateQueries : (target: GLenum, n: GLsizei, ids: *GLuint) #foreign;
// glGetQueryBufferObjecti64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
// glGetQueryBufferObjectiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
// glGetQueryBufferObjectui64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
// glGetQueryBufferObjectuiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;

// GL_EXT_texture_compression_latc

// GL_EXT_texture_compression_rgtc

// GL_EXT_texture_compression_s3tc

// GL_EXT_texture_filter_anisotropic

// GL_EXT_texture_sRGB

// GL_KHR_debug
// glDebugMessageControl : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
// glDebugMessageInsert : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
// glDebugMessageCallback : (callback: GLDEBUGPROC, userParam: *void) #foreign;
// glGetDebugMessageLog : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
// glPushDebugGroup : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #foreign;
// glPopDebugGroup : () #foreign;
// glObjectLabel : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #foreign;
// glGetObjectLabel : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
// glObjectPtrLabel : (ptr: *void, length: GLsizei, label: *GLchar) #foreign;
// glGetObjectPtrLabel : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
// GL_S3_s3tc

#if OS == .WINDOWS {
    #import "Windows";  // For HDC, etc. Sigh ... @Speed: should make a sub-struct like Windows.Minimal?

    // Extension enums:

    // WGL_ARB_create_context
    WGL_CONTEXT_DEBUG_BIT_ARB :: 0x00000001;
    WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB :: 0x00000002;
    WGL_CONTEXT_MAJOR_VERSION_ARB :: 0x2091;
    WGL_CONTEXT_MINOR_VERSION_ARB :: 0x2092;
    WGL_CONTEXT_LAYER_PLANE_ARB :: 0x2093;
    WGL_CONTEXT_FLAGS_ARB :: 0x2094;
    ERROR_INVALID_VERSION_ARB :: 0x2095;

    // WGL_ARB_create_context_no_error
    WGL_CONTEXT_OPENGL_NO_ERROR_ARB :: 0x31B3;

    // WGL_ARB_create_context_profile
    WGL_CONTEXT_PROFILE_MASK_ARB :: 0x9126;
    WGL_CONTEXT_CORE_PROFILE_BIT_ARB :: 0x00000001;
    WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB :: 0x00000002;
    ERROR_INVALID_PROFILE_ARB :: 0x2096;

    // WGL_ARB_create_context_robustness
    WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB :: 0x00000004;
    WGL_LOSE_CONTEXT_ON_RESET_ARB :: 0x8252;
    WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB :: 0x8256;
    WGL_NO_RESET_NOTIFICATION_ARB :: 0x8261;

    // WGL_ARB_framebuffer_sRGB
    WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB :: 0x20A9;

    // WGL_ARB_multisample
    WGL_SAMPLE_BUFFERS_ARB :: 0x2041;
    WGL_SAMPLES_ARB :: 0x2042;

    // WGL_ARB_pixel_format
    WGL_NUMBER_PIXEL_FORMATS_ARB :: 0x2000;
    WGL_DRAW_TO_WINDOW_ARB :: 0x2001;
    WGL_DRAW_TO_BITMAP_ARB :: 0x2002;
    WGL_ACCELERATION_ARB :: 0x2003;
    WGL_NEED_PALETTE_ARB :: 0x2004;
    WGL_NEED_SYSTEM_PALETTE_ARB :: 0x2005;
    WGL_SWAP_LAYER_BUFFERS_ARB :: 0x2006;
    WGL_SWAP_METHOD_ARB :: 0x2007;
    WGL_NUMBER_OVERLAYS_ARB :: 0x2008;
    WGL_NUMBER_UNDERLAYS_ARB :: 0x2009;
    WGL_TRANSPARENT_ARB :: 0x200A;
    WGL_TRANSPARENT_RED_VALUE_ARB :: 0x2037;
    WGL_TRANSPARENT_GREEN_VALUE_ARB :: 0x2038;
    WGL_TRANSPARENT_BLUE_VALUE_ARB :: 0x2039;
    WGL_TRANSPARENT_ALPHA_VALUE_ARB :: 0x203A;
    WGL_TRANSPARENT_INDEX_VALUE_ARB :: 0x203B;
    WGL_SHARE_DEPTH_ARB :: 0x200C;
    WGL_SHARE_STENCIL_ARB :: 0x200D;
    WGL_SHARE_ACCUM_ARB :: 0x200E;
    WGL_SUPPORT_GDI_ARB :: 0x200F;
    WGL_SUPPORT_OPENGL_ARB :: 0x2010;
    WGL_DOUBLE_BUFFER_ARB :: 0x2011;
    WGL_STEREO_ARB :: 0x2012;
    WGL_PIXEL_TYPE_ARB :: 0x2013;
    WGL_COLOR_BITS_ARB :: 0x2014;
    WGL_RED_BITS_ARB :: 0x2015;
    WGL_RED_SHIFT_ARB :: 0x2016;
    WGL_GREEN_BITS_ARB :: 0x2017;
    WGL_GREEN_SHIFT_ARB :: 0x2018;
    WGL_BLUE_BITS_ARB :: 0x2019;
    WGL_BLUE_SHIFT_ARB :: 0x201A;
    WGL_ALPHA_BITS_ARB :: 0x201B;
    WGL_ALPHA_SHIFT_ARB :: 0x201C;
    WGL_ACCUM_BITS_ARB :: 0x201D;
    WGL_ACCUM_RED_BITS_ARB :: 0x201E;
    WGL_ACCUM_GREEN_BITS_ARB :: 0x201F;
    WGL_ACCUM_BLUE_BITS_ARB :: 0x2020;
    WGL_ACCUM_ALPHA_BITS_ARB :: 0x2021;
    WGL_DEPTH_BITS_ARB :: 0x2022;
    WGL_STENCIL_BITS_ARB :: 0x2023;
    WGL_AUX_BUFFERS_ARB :: 0x2024;
    WGL_NO_ACCELERATION_ARB :: 0x2025;
    WGL_GENERIC_ACCELERATION_ARB :: 0x2026;
    WGL_FULL_ACCELERATION_ARB :: 0x2027;
    WGL_SWAP_EXCHANGE_ARB :: 0x2028;
    WGL_SWAP_COPY_ARB :: 0x2029;
    WGL_SWAP_UNDEFINED_ARB :: 0x202A;
    WGL_TYPE_RGBA_ARB :: 0x202B;
    WGL_TYPE_COLORINDEX_ARB :: 0x202C;

    // WGL_ARB_pixel_format_float
    WGL_TYPE_RGBA_FLOAT_ARB :: 0x21A0;

    // WGL_EXT_extensions_string

    // WGL_EXT_swap_control

    // WGL_EXT_swap_control_tear

    // Extension functions:

    // WGL_ARB_create_context

    // WGL_ARB_create_context_no_error

    // WGL_ARB_create_context_profile

    // WGL_ARB_create_context_robustness

    // WGL_ARB_framebuffer_sRGB

    // WGL_ARB_multisample

    // WGL_ARB_pixel_format_float


    // WGL_EXT_swap_control_tear

}

#if OS == .LINUX {
    GLX_EXT_swap_control : bool;
    GLX_EXT_swap_control_tear : bool;

    GLX_SWAP_INTERVAL_EXT             :: 0x20F1;
    GLX_MAX_SWAP_INTERVAL_EXT         :: 0x20F2;
}

// #type_info_procedures_are_void_pointers does not actually work right now,
// in that the size is the same whether we add it or not!
// I think this is because the procedures go through the messaging system
// and get their types added that way anyway, so they don't rely on gather()
// coming from the struct. Except, we are not supposed to store these in the
// executable unless type_info() is called on them, except maybe there is a clause
// that says if it's in a struct we need it ... I don't know ... investigation required!
//    -jblow, 10 August 2021
GL_Procedures :: struct #type_info_procedures_are_void_pointers #type_info_no_size_complaint {
    // Version flags:

    gl_version_major : s32;
    gl_version_minor : s32;
    GL_VERSION_1_0 : bool;
    GL_VERSION_1_1 : bool;
    GL_VERSION_1_2 : bool;
    GL_VERSION_1_3 : bool;
    GL_VERSION_1_4 : bool;
    GL_VERSION_1_5 : bool;
    GL_VERSION_2_0 : bool;
    GL_VERSION_2_1 : bool;
    GL_VERSION_3_0 : bool;
    GL_VERSION_3_1 : bool;
    GL_VERSION_3_2 : bool;
    GL_VERSION_3_3 : bool;
    GL_VERSION_4_0 : bool;
    GL_VERSION_4_1 : bool;
    GL_VERSION_4_2 : bool;
    GL_VERSION_4_3 : bool;
    GL_VERSION_4_4 : bool;
    GL_VERSION_4_5 : bool;
    GL_VERSION_4_6 : bool;

    // Core functions:

    // GL_VERSION_1_0
    #if OS == .WINDOWS || OS == .MACOS || OS == .LINUX {
        glBegin :: (mode: GLenum) #foreign gl_lib;
        glEnd :: () #foreign gl_lib;
        glColor4f :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib;
        glVertex2f :: (x: GLfloat, y: GLfloat) #foreign gl_lib;
        glCullFace :: (mode: GLenum) #foreign gl_lib;
        glFrontFace :: (mode: GLenum) #foreign gl_lib;
        glHint :: (target: GLenum, mode: GLenum) #foreign gl_lib;
        glLineWidth :: (width: GLfloat) #foreign gl_lib;
        glPointSize :: (size: GLfloat) #foreign gl_lib;
        glPolygonMode :: (face: GLenum, mode: GLenum) #foreign gl_lib;
        glScissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib;
        glTexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib;
        glTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib;
        glTexParameteri :: (target: GLenum, pname: GLenum, param: GLint) #foreign gl_lib;
        glTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib;
        glTexImage1D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib;
        glTexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib;
        glDrawBuffer :: (buf: GLenum) #foreign gl_lib;
        glClear :: (mask: GLbitfield) #foreign gl_lib;
        glClearColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib;
        glClearStencil :: (s: GLint) #foreign gl_lib;
        glClearDepth :: (depth: GLdouble) #foreign gl_lib;
        glStencilMask :: (mask: GLuint) #foreign gl_lib;
        glColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #foreign gl_lib;
        glDepthMask :: (flag: GLboolean) #foreign gl_lib;
        glDisable :: (cap: GLenum) #foreign gl_lib;
        glEnable :: (cap: GLenum) #foreign gl_lib;
        glFinish :: () #foreign gl_lib;
        glFlush :: () #foreign gl_lib;
        glBlendFunc :: (sfactor: GLenum, dfactor: GLenum) #foreign gl_lib;
        glLogicOp :: (opcode: GLenum) #foreign gl_lib;
        glStencilFunc :: (func: GLenum, ref: GLint, mask: GLuint) #foreign gl_lib;
        glStencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) #foreign gl_lib;
        glDepthFunc :: (func: GLenum) #foreign gl_lib;
        glPixelStoref :: (pname: GLenum, param: GLfloat) #foreign gl_lib;
        glPixelStorei :: (pname: GLenum, param: GLint) #foreign gl_lib;
        glReadBuffer :: (src: GLenum) #foreign gl_lib;
        glReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib;
        glGetBooleanv :: (pname: GLenum, data: *GLboolean) #foreign gl_lib;
        glGetDoublev :: (pname: GLenum, data: *GLdouble) #foreign gl_lib;
        glGetError :: () -> GLenum #foreign gl_lib;
        glGetFloatv :: (pname: GLenum, data: *GLfloat) #foreign gl_lib;
        glGetIntegerv :: (pname: GLenum, data: *GLint) #foreign gl_lib;
        glGetString :: (name: GLenum) -> *GLubyte #foreign gl_lib;
        glGetTexImage :: (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib;
        glGetTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib;
        glGetTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib;
        glGetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign gl_lib;
        glGetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign gl_lib;
        glIsEnabled :: (cap: GLenum) -> GLboolean #foreign gl_lib;
        glDepthRange :: (near: GLdouble, far: GLdouble) #foreign gl_lib;
        glViewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib;
    }
    else #if OS == .NN_SWITCH {
        glBegin :: (mode: GLenum) #foreign gl_lib "_glBegin";
        glEnd :: () #foreign gl_lib "_glEnd";
        glColor4f :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib "_glColor4f";
        glVertex2f :: (x: GLfloat, y: GLfloat) #foreign gl_lib "_glVertex2f";
        glCullFace :: (mode: GLenum) #foreign gl_lib "_glCullFace";
        glFrontFace :: (mode: GLenum) #foreign gl_lib "_glFrontFace";
        glHint :: (target: GLenum, mode: GLenum) #foreign gl_lib "_glHint";
        glLineWidth :: (width: GLfloat) #foreign gl_lib "_glLineWidth";
        glPointSize :: (size: GLfloat) #foreign gl_lib "_glPointSize";
        glPolygonMode :: (face: GLenum, mode: GLenum) #foreign gl_lib "_glPolygonMode";
        glScissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib "_glScissor";
        glTexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) #foreign gl_lib "_glTexParameterf";
        glTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "_glTexParameterfv";
        glTexParameteri :: (target: GLenum, pname: GLenum, param: GLint) #foreign gl_lib "_glTexParameteri";
        glTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "_glTexParameteriv";
        glTexImage1D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "_glTexImage1D";
        glTexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "_glTexImage2D";
        glDrawBuffer :: (buf: GLenum) #foreign gl_lib "_glDrawBuffer";
        glClear :: (mask: GLbitfield) #foreign gl_lib "_glClear";
        glClearColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign gl_lib "_glClearColor";
        glClearStencil :: (s: GLint) #foreign gl_lib "_glClearStencil";
        glClearDepth :: (depth: GLdouble) #foreign gl_lib "_glClearDepth";
        glStencilMask :: (mask: GLuint) #foreign gl_lib "_glStencilMask";
        glColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #foreign gl_lib "_glColorMask";
        glDepthMask :: (flag: GLboolean) #foreign gl_lib "_glDepthMask";
        glDisable :: (cap: GLenum) #foreign gl_lib "_glDisable";
        glEnable :: (cap: GLenum) #foreign gl_lib "_glEnable";
        glFinish :: () #foreign gl_lib "_glFinish";
        glFlush :: () #foreign gl_lib "_glFlush";
        glBlendFunc :: (sfactor: GLenum, dfactor: GLenum) #foreign gl_lib "_glBlendFunc";
        glLogicOp :: (opcode: GLenum) #foreign gl_lib "_glLogicOp";
        glStencilFunc :: (func: GLenum, ref: GLint, mask: GLuint) #foreign gl_lib "_glStencilFunc";
        glStencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) #foreign gl_lib "_glStencilOp";
        glDepthFunc :: (func: GLenum) #foreign gl_lib "_glDepthFunc";
        glPixelStoref :: (pname: GLenum, param: GLfloat) #foreign gl_lib "_glPixelStoref";
        glPixelStorei :: (pname: GLenum, param: GLint) #foreign gl_lib "_glPixelStorei";
        glReadBuffer :: (src: GLenum) #foreign gl_lib "_glReadBuffer";
        glReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "_glReadPixels";
        glGetBooleanv :: (pname: GLenum, data: *GLboolean) #foreign gl_lib "_glGetBooleanv";
        glGetDoublev :: (pname: GLenum, data: *GLdouble) #foreign gl_lib "_glGetDoublev";
        glGetError :: () -> GLenum #foreign gl_lib "_glGetError";
        glGetFloatv :: (pname: GLenum, data: *GLfloat) #foreign gl_lib "_glGetFloatv";
        glGetIntegerv :: (pname: GLenum, data: *GLint) #foreign gl_lib "_glGetIntegerv";
        glGetString :: (name: GLenum) -> *GLubyte #foreign gl_lib "_glGetString";
        glGetTexImage :: (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib "_glGetTexImage";
        glGetTexParameterfv :: (target: GLenum, pname: GLenum, params: *GLfloat) #foreign gl_lib "_glGetTexParameterfv";
        glGetTexParameteriv :: (target: GLenum, pname: GLenum, params: *GLint) #foreign gl_lib "_glGetTexParameteriv";
        glGetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign gl_lib "_glGetTexLevelParameterfv";
        glGetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign gl_lib "_glGetTexLevelParameteriv";
        glIsEnabled :: (cap: GLenum) -> GLboolean #foreign gl_lib "_glIsEnabled";
        glDepthRange :: (near: GLdouble, far: GLdouble) #foreign gl_lib "_glDepthRange";
        glViewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib "_glViewport";
    }
    else {
        glCullFace : (mode: GLenum) #foreign;
        glFrontFace : (mode: GLenum) #foreign;
        glHint : (target: GLenum, mode: GLenum) #foreign;
        glLineWidth : (width: GLfloat) #foreign;
        glPointSize : (size: GLfloat) #foreign;
        glPolygonMode : (face: GLenum, mode: GLenum) #foreign;
        glScissor : (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
        glTexParameterf : (target: GLenum, pname: GLenum, param: GLfloat) #foreign;
        glTexParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
        glTexParameteri : (target: GLenum, pname: GLenum, param: GLint) #foreign;
        glTexParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
        glTexImage1D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
        glTexImage2D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
        glDrawBuffer : (buf: GLenum) #foreign;
        glClear : (mask: GLbitfield) #foreign;
        glClearColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
        glClearStencil : (s: GLint) #foreign;
        glClearDepth : (depth: GLdouble) #foreign;
        glStencilMask : (mask: GLuint) #foreign;
        glColorMask : (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) #foreign;
        glDepthMask : (flag: GLboolean) #foreign;
        glDisable : (cap: GLenum) #foreign;
        glEnable : (cap: GLenum) #foreign;
        glFinish : () #foreign;
        glFlush : () #foreign;
        glBlendFunc : (sfactor: GLenum, dfactor: GLenum) #foreign;
        glLogicOp : (opcode: GLenum) #foreign;
        glStencilFunc : (func: GLenum, ref: GLint, mask: GLuint) #foreign;
        glStencilOp : (fail: GLenum, zfail: GLenum, zpass: GLenum) #foreign;
        glDepthFunc : (func: GLenum) #foreign;
        glPixelStoref : (pname: GLenum, param: GLfloat) #foreign;
        glPixelStorei : (pname: GLenum, param: GLint) #foreign;
        glReadBuffer : (src: GLenum) #foreign;
        glReadPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
        glGetBooleanv : (pname: GLenum, data: *GLboolean) #foreign;
        glGetDoublev : (pname: GLenum, data: *GLdouble) #foreign;
        glGetError : () -> GLenum #foreign;
        glGetFloatv : (pname: GLenum, data: *GLfloat) #foreign;
        glGetIntegerv : (pname: GLenum, data: *GLint) #foreign;
        glGetString : (name: GLenum) -> *GLubyte #foreign;
        glGetTexImage : (target: GLenum, level: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
        glGetTexParameterfv : (target: GLenum, pname: GLenum, params: *GLfloat) #foreign;
        glGetTexParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
        glGetTexLevelParameterfv : (target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
        glGetTexLevelParameteriv : (target: GLenum, level: GLint, pname: GLenum, params: *GLint) #foreign;
        glIsEnabled : (cap: GLenum) -> GLboolean #foreign;
        glDepthRange : (near: GLdouble, far: GLdouble) #foreign;
        glViewport : (x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
    }
    // GL_VERSION_1_1
    #if OS == .WINDOWS || OS == .MACOS {
        glDrawArrays :: (mode: GLenum, first: GLint, count: GLsizei) #foreign gl_lib;
        glDrawElements :: (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) #foreign gl_lib;
        glPolygonOffset :: (factor: GLfloat, units: GLfloat) #foreign gl_lib;
        glCopyTexImage1D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign gl_lib;
        glCopyTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign gl_lib;
        glCopyTexSubImage1D :: (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign gl_lib;
        glCopyTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign gl_lib;
        glTexSubImage1D :: (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib;
        glTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign gl_lib;
        glBindTexture :: (target: GLenum, texture: GLuint) #foreign gl_lib;
        glDeleteTextures :: (n: GLsizei, textures: *GLuint) #foreign gl_lib;
        glGenTextures :: (n: GLsizei, textures: *GLuint) #foreign gl_lib;
        glIsTexture :: (texture: GLuint) -> GLboolean #foreign gl_lib;
    }
    else {
        glDrawArrays : (mode: GLenum, first: GLint, count: GLsizei) #foreign;
        glDrawElements : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void) #foreign;
        glPolygonOffset : (factor: GLfloat, units: GLfloat) #foreign;
        glCopyTexImage1D : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) #foreign;
        glCopyTexImage2D : (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) #foreign;
        glCopyTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
        glCopyTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
        glTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
        glTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
        glBindTexture : (target: GLenum, texture: GLuint) #foreign;
        glDeleteTextures : (n: GLsizei, textures: *GLuint) #foreign;
        glGenTextures : (n: GLsizei, textures: *GLuint) #foreign;
        glIsTexture : (texture: GLuint) -> GLboolean #foreign;
    }

    // GL_VERSION_1_2
    glDrawRangeElements : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void) #foreign;
    glTexImage3D : (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: *void) #foreign;
    glTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
    glCopyTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;

    // GL_VERSION_1_3
    glActiveTexture : (texture: GLenum) #foreign;
    glSampleCoverage : (value: GLfloat, invert: GLboolean) #foreign;
    glCompressedTexImage3D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTexImage2D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTexImage1D : (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTexSubImage3D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTexSubImage2D : (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTexSubImage1D : (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
    glGetCompressedTexImage : (target: GLenum, level: GLint, img: *void) #foreign;

    // GL_VERSION_1_4
    glBlendFuncSeparate : (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) #foreign;
    glMultiDrawArrays : (mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) #foreign;
    glMultiDrawElements : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei) #foreign;
    glPointParameterf : (pname: GLenum, param: GLfloat) #foreign;
    glPointParameterfv : (pname: GLenum, params: *GLfloat) #foreign;
    glPointParameteri : (pname: GLenum, param: GLint) #foreign;
    glPointParameteriv : (pname: GLenum, params: *GLint) #foreign;
    glBlendColor : (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) #foreign;
    glBlendEquation : (mode: GLenum) #foreign;

    // GL_VERSION_1_5
    glGenQueries : (n: GLsizei, ids: *GLuint) #foreign;
    glDeleteQueries : (n: GLsizei, ids: *GLuint) #foreign;
    glIsQuery : (id: GLuint) -> GLboolean #foreign;
    glBeginQuery : (target: GLenum, id: GLuint) #foreign;
    glEndQuery : (target: GLenum) #foreign;
    glGetQueryiv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
    glGetQueryObjectiv : (id: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetQueryObjectuiv : (id: GLuint, pname: GLenum, params: *GLuint) #foreign;
    glBindBuffer : (target: GLenum, buffer: GLuint) #foreign;
    glDeleteBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
    glGenBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
    glIsBuffer : (buffer: GLuint) -> GLboolean #foreign;
    glBufferData : (target: GLenum, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
    glBufferSubData : (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
    glGetBufferSubData : (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
    glMapBuffer : (target: GLenum, access: GLenum) -> *void #foreign;
    glUnmapBuffer : (target: GLenum) -> GLboolean #foreign;
    glGetBufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
    glGetBufferPointerv : (target: GLenum, pname: GLenum, params: **void) #foreign;

    // GL_VERSION_2_0
    glBlendEquationSeparate : (modeRGB: GLenum, modeAlpha: GLenum) #foreign;
    glDrawBuffers : (n: GLsizei, bufs: *GLenum) #foreign;
    glStencilOpSeparate : (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) #foreign;
    glStencilFuncSeparate : (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) #foreign;
    glStencilMaskSeparate : (face: GLenum, mask: GLuint) #foreign;
    glAttachShader : (program: GLuint, shader: GLuint) #foreign;
    glBindAttribLocation : (program: GLuint, index: GLuint, name: *GLchar) #foreign;
    glCompileShader : (shader: GLuint) #foreign;
    glCreateProgram : () -> GLuint #foreign;
    glCreateShader : (type: GLenum) -> GLuint #foreign;
    glDeleteProgram : (program: GLuint) #foreign;
    glDeleteShader : (shader: GLuint) #foreign;
    glDetachShader : (program: GLuint, shader: GLuint) #foreign;
    glDisableVertexAttribArray : (index: GLuint) #foreign;
    glEnableVertexAttribArray : (index: GLuint) #foreign;
    glGetActiveAttrib : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #foreign;
    glGetActiveUniform : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type: *GLenum, name: *GLchar) #foreign;
    glGetAttachedShaders : (program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) #foreign;
    glGetAttribLocation : (program: GLuint, name: *GLchar) -> GLint #foreign;
    glGetProgramiv : (program: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetProgramInfoLog : (program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
    glGetShaderiv : (shader: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetShaderInfoLog : (shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
    glGetShaderSource : (shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) #foreign;
    glGetUniformLocation : (program: GLuint, name: *GLchar) -> GLint #foreign;
    glGetUniformfv : (program: GLuint, location: GLint, params: *GLfloat) #foreign;
    glGetUniformiv : (program: GLuint, location: GLint, params: *GLint) #foreign;
    glGetVertexAttribdv : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
    glGetVertexAttribfv : (index: GLuint, pname: GLenum, params: *GLfloat) #foreign;
    glGetVertexAttribiv : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetVertexAttribPointerv : (index: GLuint, pname: GLenum, pointer: **void) #foreign;
    glIsProgram : (program: GLuint) -> GLboolean #foreign;
    glIsShader : (shader: GLuint) -> GLboolean #foreign;
    glLinkProgram : (program: GLuint) #foreign;
    glShaderSource : (shader: GLuint, count: GLsizei, str: **GLchar, length: *GLint) #foreign;
    glUseProgram : (program: GLuint) #foreign;
    glUniform1f : (location: GLint, v0: GLfloat) #foreign;
    glUniform2f : (location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
    glUniform3f : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
    glUniform4f : (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
    glUniform1i : (location: GLint, v0: GLint) #foreign;
    glUniform2i : (location: GLint, v0: GLint, v1: GLint) #foreign;
    glUniform3i : (location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
    glUniform4i : (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
    glUniform1fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform2fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform3fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform4fv : (location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glUniform1iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniform2iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniform3iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniform4iv : (location: GLint, count: GLsizei, value: *GLint) #foreign;
    glUniformMatrix2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glValidateProgram : (program: GLuint) #foreign;
    glVertexAttrib1d : (index: GLuint, x: GLdouble) #foreign;
    glVertexAttrib1dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttrib1f : (index: GLuint, x: GLfloat) #foreign;
    glVertexAttrib1fv : (index: GLuint, v: *GLfloat) #foreign;
    glVertexAttrib1s : (index: GLuint, x: GLshort) #foreign;
    glVertexAttrib1sv : (index: GLuint, v: *GLshort) #foreign;
    glVertexAttrib2d : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
    glVertexAttrib2dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttrib2f : (index: GLuint, x: GLfloat, y: GLfloat) #foreign;
    glVertexAttrib2fv : (index: GLuint, v: *GLfloat) #foreign;
    glVertexAttrib2s : (index: GLuint, x: GLshort, y: GLshort) #foreign;
    glVertexAttrib2sv : (index: GLuint, v: *GLshort) #foreign;
    glVertexAttrib3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
    glVertexAttrib3dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttrib3f : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) #foreign;
    glVertexAttrib3fv : (index: GLuint, v: *GLfloat) #foreign;
    glVertexAttrib3s : (index: GLuint, x: GLshort, y: GLshort, z: GLshort) #foreign;
    glVertexAttrib3sv : (index: GLuint, v: *GLshort) #foreign;
    glVertexAttrib4Nbv : (index: GLuint, v: *GLbyte) #foreign;
    glVertexAttrib4Niv : (index: GLuint, v: *GLint) #foreign;
    glVertexAttrib4Nsv : (index: GLuint, v: *GLshort) #foreign;
    glVertexAttrib4Nub : (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) #foreign;
    glVertexAttrib4Nubv : (index: GLuint, v: *GLubyte) #foreign;
    glVertexAttrib4Nuiv : (index: GLuint, v: *GLuint) #foreign;
    glVertexAttrib4Nusv : (index: GLuint, v: *GLushort) #foreign;
    glVertexAttrib4bv : (index: GLuint, v: *GLbyte) #foreign;
    glVertexAttrib4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
    glVertexAttrib4dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttrib4f : (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) #foreign;
    glVertexAttrib4fv : (index: GLuint, v: *GLfloat) #foreign;
    glVertexAttrib4iv : (index: GLuint, v: *GLint) #foreign;
    glVertexAttrib4s : (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) #foreign;
    glVertexAttrib4sv : (index: GLuint, v: *GLshort) #foreign;
    glVertexAttrib4ubv : (index: GLuint, v: *GLubyte) #foreign;
    glVertexAttrib4uiv : (index: GLuint, v: *GLuint) #foreign;
    glVertexAttrib4usv : (index: GLuint, v: *GLushort) #foreign;
    glVertexAttribPointer : (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *void) #foreign;

    // GL_VERSION_2_1
    glUniformMatrix2x3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix3x2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix2x4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix4x2fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix3x4fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glUniformMatrix4x3fv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;

    // GL_VERSION_3_0
    glColorMaski : (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) #foreign;
    glGetBooleani_v : (target: GLenum, index: GLuint, data: *GLboolean) #foreign;
    glGetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #foreign;
    glEnablei : (target: GLenum, index: GLuint) #foreign;
    glDisablei : (target: GLenum, index: GLuint) #foreign;
    glIsEnabledi : (target: GLenum, index: GLuint) -> GLboolean #foreign;
    glBeginTransformFeedback : (primitiveMode: GLenum) #foreign;
    glEndTransformFeedback : () #foreign;
    glBindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
    glBindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
    glTransformFeedbackVaryings : (program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) #foreign;
    glGetTransformFeedbackVarying : (program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type: *GLenum, name: *GLchar) #foreign;
    glClampColor : (target: GLenum, clamp: GLenum) #foreign;
    glBeginConditionalRender : (id: GLuint, mode: GLenum) #foreign;
    glEndConditionalRender : () #foreign;
    glVertexAttribIPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
    glGetVertexAttribIiv : (index: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetVertexAttribIuiv : (index: GLuint, pname: GLenum, params: *GLuint) #foreign;
    glVertexAttribI1i : (index: GLuint, x: GLint) #foreign;
    glVertexAttribI2i : (index: GLuint, x: GLint, y: GLint) #foreign;
    glVertexAttribI3i : (index: GLuint, x: GLint, y: GLint, z: GLint) #foreign;
    glVertexAttribI4i : (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) #foreign;
    glVertexAttribI1ui : (index: GLuint, x: GLuint) #foreign;
    glVertexAttribI2ui : (index: GLuint, x: GLuint, y: GLuint) #foreign;
    glVertexAttribI3ui : (index: GLuint, x: GLuint, y: GLuint, z: GLuint) #foreign;
    glVertexAttribI4ui : (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) #foreign;
    glVertexAttribI1iv : (index: GLuint, v: *GLint) #foreign;
    glVertexAttribI2iv : (index: GLuint, v: *GLint) #foreign;
    glVertexAttribI3iv : (index: GLuint, v: *GLint) #foreign;
    glVertexAttribI4iv : (index: GLuint, v: *GLint) #foreign;
    glVertexAttribI1uiv : (index: GLuint, v: *GLuint) #foreign;
    glVertexAttribI2uiv : (index: GLuint, v: *GLuint) #foreign;
    glVertexAttribI3uiv : (index: GLuint, v: *GLuint) #foreign;
    glVertexAttribI4uiv : (index: GLuint, v: *GLuint) #foreign;
    glVertexAttribI4bv : (index: GLuint, v: *GLbyte) #foreign;
    glVertexAttribI4sv : (index: GLuint, v: *GLshort) #foreign;
    glVertexAttribI4ubv : (index: GLuint, v: *GLubyte) #foreign;
    glVertexAttribI4usv : (index: GLuint, v: *GLushort) #foreign;
    glGetUniformuiv : (program: GLuint, location: GLint, params: *GLuint) #foreign;
    glBindFragDataLocation : (program: GLuint, color: GLuint, name: *GLchar) #foreign;
    glGetFragDataLocation : (program: GLuint, name: *GLchar) -> GLint #foreign;
    glUniform1ui : (location: GLint, v0: GLuint) #foreign;
    glUniform2ui : (location: GLint, v0: GLuint, v1: GLuint) #foreign;
    glUniform3ui : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
    glUniform4ui : (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
    glUniform1uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glUniform2uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glUniform3uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glUniform4uiv : (location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glTexParameterIiv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
    glTexParameterIuiv : (target: GLenum, pname: GLenum, params: *GLuint) #foreign;
    glGetTexParameterIiv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
    glGetTexParameterIuiv : (target: GLenum, pname: GLenum, params: *GLuint) #foreign;
    glClearBufferiv : (buffer: GLenum, drawbuffer: GLint, value: *GLint) #foreign;
    glClearBufferuiv : (buffer: GLenum, drawbuffer: GLint, value: *GLuint) #foreign;
    glClearBufferfv : (buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #foreign;
    glClearBufferfi : (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #foreign;
    glGetStringi : (name: GLenum, index: GLuint) -> *GLubyte #foreign;
    glIsRenderbuffer : (renderbuffer: GLuint) -> GLboolean #foreign;
    glBindRenderbuffer : (target: GLenum, renderbuffer: GLuint) #foreign;
    glDeleteRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
    glGenRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
    glRenderbufferStorage : (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glGetRenderbufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
    glIsFramebuffer : (framebuffer: GLuint) -> GLboolean #foreign;
    glBindFramebuffer : (target: GLenum, framebuffer: GLuint) #foreign;
    glDeleteFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
    glGenFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
    glCheckFramebufferStatus : (target: GLenum) -> GLenum #foreign;
    glFramebufferTexture1D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
    glFramebufferTexture2D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) #foreign;
    glFramebufferTexture3D : (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) #foreign;
    glFramebufferRenderbuffer : (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
    glGetFramebufferAttachmentParameteriv : (target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
    glGenerateMipmap : (target: GLenum) #foreign;
    glBlitFramebuffer : (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
    glRenderbufferStorageMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glFramebufferTextureLayer : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
    glMapBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #foreign;
    glFlushMappedBufferRange : (target: GLenum, offset: GLintptr, length: GLsizeiptr) #foreign;
    glBindVertexArray : (array: GLuint) #foreign;
    glDeleteVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
    glGenVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
    glIsVertexArray : (array: GLuint) -> GLboolean #foreign;

    // GL_VERSION_3_1
    glDrawArraysInstanced : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) #foreign;
    glDrawElementsInstanced : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei) #foreign;
    glTexBuffer : (target: GLenum, internalformat: GLenum, buffer: GLuint) #foreign;
    glPrimitiveRestartIndex : (index: GLuint) #foreign;
    glCopyBufferSubData : (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
    glGetUniformIndices : (program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) #foreign;
    glGetActiveUniformsiv : (program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetActiveUniformName : (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) #foreign;
    glGetUniformBlockIndex : (program: GLuint, uniformBlockName: *GLchar) -> GLuint #foreign;
    glGetActiveUniformBlockiv : (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetActiveUniformBlockName : (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) #foreign;
    glUniformBlockBinding : (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) #foreign;
    // glBindBufferRange : (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
    // glBindBufferBase : (target: GLenum, index: GLuint, buffer: GLuint) #foreign;
    // glGetIntegeri_v : (target: GLenum, index: GLuint, data: *GLint) #foreign;

    // GL_VERSION_3_2
    glDrawElementsBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #foreign;
    glDrawRangeElementsBaseVertex : (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: *void, basevertex: GLint) #foreign;
    glDrawElementsInstancedBaseVertex : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint) #foreign;
    glMultiDrawElementsBaseVertex : (mode: GLenum, count: *GLsizei, type: GLenum, indices: **void, drawcount: GLsizei, basevertex: *GLint) #foreign;
    glProvokingVertex : (mode: GLenum) #foreign;
    glFenceSync : (condition: GLenum, flags: GLbitfield) -> GLsync #foreign;
    glIsSync : (sync: GLsync) -> GLboolean #foreign;
    glDeleteSync : (sync: GLsync) #foreign;
    glClientWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum #foreign;
    glWaitSync : (sync: GLsync, flags: GLbitfield, timeout: GLuint64) #foreign;
    glGetInteger64v : (pname: GLenum, data: *GLint64) #foreign;
    glGetSynciv : (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) #foreign;
    glGetInteger64i_v : (target: GLenum, index: GLuint, data: *GLint64) #foreign;
    glGetBufferParameteri64v : (target: GLenum, pname: GLenum, params: *GLint64) #foreign;
    glFramebufferTexture : (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
    glTexImage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
    glTexImage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
    glGetMultisamplefv : (pname: GLenum, index: GLuint, val: *GLfloat) #foreign;
    glSampleMaski : (maskNumber: GLuint, mask: GLbitfield) #foreign;

    // GL_VERSION_3_3
    glBindFragDataLocationIndexed : (program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) #foreign;
    glGetFragDataIndex : (program: GLuint, name: *GLchar) -> GLint #foreign;
    glGenSamplers : (count: GLsizei, samplers: *GLuint) #foreign;
    glDeleteSamplers : (count: GLsizei, samplers: *GLuint) #foreign;
    glIsSampler : (sampler: GLuint) -> GLboolean #foreign;
    glBindSampler : (unit: GLuint, sampler: GLuint) #foreign;
    glSamplerParameteri : (sampler: GLuint, pname: GLenum, param: GLint) #foreign;
    glSamplerParameteriv : (sampler: GLuint, pname: GLenum, param: *GLint) #foreign;
    glSamplerParameterf : (sampler: GLuint, pname: GLenum, param: GLfloat) #foreign;
    glSamplerParameterfv : (sampler: GLuint, pname: GLenum, param: *GLfloat) #foreign;
    glSamplerParameterIiv : (sampler: GLuint, pname: GLenum, param: *GLint) #foreign;
    glSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, param: *GLuint) #foreign;
    glGetSamplerParameteriv : (sampler: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetSamplerParameterIiv : (sampler: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetSamplerParameterfv : (sampler: GLuint, pname: GLenum, params: *GLfloat) #foreign;
    glGetSamplerParameterIuiv : (sampler: GLuint, pname: GLenum, params: *GLuint) #foreign;
    glQueryCounter : (id: GLuint, target: GLenum) #foreign;
    glGetQueryObjecti64v : (id: GLuint, pname: GLenum, params: *GLint64) #foreign;
    glGetQueryObjectui64v : (id: GLuint, pname: GLenum, params: *GLuint64) #foreign;
    glVertexAttribDivisor : (index: GLuint, divisor: GLuint) #foreign;
    glVertexAttribP1ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
    glVertexAttribP1uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
    glVertexAttribP2ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
    glVertexAttribP2uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
    glVertexAttribP3ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
    glVertexAttribP3uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
    glVertexAttribP4ui : (index: GLuint, type: GLenum, normalized: GLboolean, value: GLuint) #foreign;
    glVertexAttribP4uiv : (index: GLuint, type: GLenum, normalized: GLboolean, value: *GLuint) #foreign;
    glVertexP2ui : (type: GLenum, value: GLuint) #foreign;
    glVertexP2uiv : (type: GLenum, value: *GLuint) #foreign;
    glVertexP3ui : (type: GLenum, value: GLuint) #foreign;
    glVertexP3uiv : (type: GLenum, value: *GLuint) #foreign;
    glVertexP4ui : (type: GLenum, value: GLuint) #foreign;
    glVertexP4uiv : (type: GLenum, value: *GLuint) #foreign;
    glTexCoordP1ui : (type: GLenum, coords: GLuint) #foreign;
    glTexCoordP1uiv : (type: GLenum, coords: *GLuint) #foreign;
    glTexCoordP2ui : (type: GLenum, coords: GLuint) #foreign;
    glTexCoordP2uiv : (type: GLenum, coords: *GLuint) #foreign;
    glTexCoordP3ui : (type: GLenum, coords: GLuint) #foreign;
    glTexCoordP3uiv : (type: GLenum, coords: *GLuint) #foreign;
    glTexCoordP4ui : (type: GLenum, coords: GLuint) #foreign;
    glTexCoordP4uiv : (type: GLenum, coords: *GLuint) #foreign;
    glMultiTexCoordP1ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
    glMultiTexCoordP1uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
    glMultiTexCoordP2ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
    glMultiTexCoordP2uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
    glMultiTexCoordP3ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
    glMultiTexCoordP3uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
    glMultiTexCoordP4ui : (texture: GLenum, type: GLenum, coords: GLuint) #foreign;
    glMultiTexCoordP4uiv : (texture: GLenum, type: GLenum, coords: *GLuint) #foreign;
    glNormalP3ui : (type: GLenum, coords: GLuint) #foreign;
    glNormalP3uiv : (type: GLenum, coords: *GLuint) #foreign;
    glColorP3ui : (type: GLenum, color: GLuint) #foreign;
    glColorP3uiv : (type: GLenum, color: *GLuint) #foreign;
    glColorP4ui : (type: GLenum, color: GLuint) #foreign;
    glColorP4uiv : (type: GLenum, color: *GLuint) #foreign;
    glSecondaryColorP3ui : (type: GLenum, color: GLuint) #foreign;
    glSecondaryColorP3uiv : (type: GLenum, color: *GLuint) #foreign;

    // GL_VERSION_4_0
    glMinSampleShading : (value: GLfloat) #foreign;
    glBlendEquationi : (buf: GLuint, mode: GLenum) #foreign;
    glBlendEquationSeparatei : (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) #foreign;
    glBlendFunci : (buf: GLuint, src: GLenum, dst: GLenum) #foreign;
    glBlendFuncSeparatei : (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) #foreign;
    glDrawArraysIndirect : (mode: GLenum, indirect: *void) #foreign;
    glDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void) #foreign;
    glUniform1d : (location: GLint, x: GLdouble) #foreign;
    glUniform2d : (location: GLint, x: GLdouble, y: GLdouble) #foreign;
    glUniform3d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
    glUniform4d : (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
    glUniform1dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glUniform2dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glUniform3dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glUniform4dv : (location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glUniformMatrix2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix2x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix2x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix3x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix3x4dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix4x2dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glUniformMatrix4x3dv : (location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glGetUniformdv : (program: GLuint, location: GLint, params: *GLdouble) #foreign;
    glGetSubroutineUniformLocation : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint #foreign;
    glGetSubroutineIndex : (program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint #foreign;
    glGetActiveSubroutineUniformiv : (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) #foreign;
    glGetActiveSubroutineUniformName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
    glGetActiveSubroutineName : (program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
    glUniformSubroutinesuiv : (shadertype: GLenum, count: GLsizei, indices: *GLuint) #foreign;
    glGetUniformSubroutineuiv : (shadertype: GLenum, location: GLint, params: *GLuint) #foreign;
    glGetProgramStageiv : (program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) #foreign;
    glPatchParameteri : (pname: GLenum, value: GLint) #foreign;
    glPatchParameterfv : (pname: GLenum, values: *GLfloat) #foreign;
    glBindTransformFeedback : (target: GLenum, id: GLuint) #foreign;
    glDeleteTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
    glGenTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
    glIsTransformFeedback : (id: GLuint) -> GLboolean #foreign;
    glPauseTransformFeedback : () #foreign;
    glResumeTransformFeedback : () #foreign;
    glDrawTransformFeedback : (mode: GLenum, id: GLuint) #foreign;
    glDrawTransformFeedbackStream : (mode: GLenum, id: GLuint, stream: GLuint) #foreign;
    glBeginQueryIndexed : (target: GLenum, index: GLuint, id: GLuint) #foreign;
    glEndQueryIndexed : (target: GLenum, index: GLuint) #foreign;
    glGetQueryIndexediv : (target: GLenum, index: GLuint, pname: GLenum, params: *GLint) #foreign;

    // GL_VERSION_4_1
    glReleaseShaderCompiler : () #foreign;
    glShaderBinary : (count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *void, length: GLsizei) #foreign;
    glGetShaderPrecisionFormat : (shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) #foreign;
    glDepthRangef : (n: GLfloat, f: GLfloat) #foreign;
    glClearDepthf : (d: GLfloat) #foreign;
    glGetProgramBinary : (program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *void) #foreign;
    glProgramBinary : (program: GLuint, binaryFormat: GLenum, binary: *void, length: GLsizei) #foreign;
    glProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #foreign;
    glUseProgramStages : (pipeline: GLuint, stages: GLbitfield, program: GLuint) #foreign;
    glActiveShaderProgram : (pipeline: GLuint, program: GLuint) #foreign;
    glCreateShaderProgramv : (type: GLenum, count: GLsizei, strings: **GLchar) -> GLuint #foreign;
    glBindProgramPipeline : (pipeline: GLuint) #foreign;
    glDeleteProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
    glGenProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
    glIsProgramPipeline : (pipeline: GLuint) -> GLboolean #foreign;
    glGetProgramPipelineiv : (pipeline: GLuint, pname: GLenum, params: *GLint) #foreign;
    // glProgramParameteri : (program: GLuint, pname: GLenum, value: GLint) #foreign;
    glProgramUniform1i : (program: GLuint, location: GLint, v0: GLint) #foreign;
    glProgramUniform1iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
    glProgramUniform1f : (program: GLuint, location: GLint, v0: GLfloat) #foreign;
    glProgramUniform1fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glProgramUniform1d : (program: GLuint, location: GLint, v0: GLdouble) #foreign;
    glProgramUniform1dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glProgramUniform1ui : (program: GLuint, location: GLint, v0: GLuint) #foreign;
    glProgramUniform1uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glProgramUniform2i : (program: GLuint, location: GLint, v0: GLint, v1: GLint) #foreign;
    glProgramUniform2iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
    glProgramUniform2f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) #foreign;
    glProgramUniform2fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glProgramUniform2d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) #foreign;
    glProgramUniform2dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glProgramUniform2ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) #foreign;
    glProgramUniform2uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glProgramUniform3i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) #foreign;
    glProgramUniform3iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
    glProgramUniform3f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) #foreign;
    glProgramUniform3fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glProgramUniform3d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) #foreign;
    glProgramUniform3dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glProgramUniform3ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) #foreign;
    glProgramUniform3uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glProgramUniform4i : (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) #foreign;
    glProgramUniform4iv : (program: GLuint, location: GLint, count: GLsizei, value: *GLint) #foreign;
    glProgramUniform4f : (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) #foreign;
    glProgramUniform4fv : (program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) #foreign;
    glProgramUniform4d : (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) #foreign;
    glProgramUniform4dv : (program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) #foreign;
    glProgramUniform4ui : (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) #foreign;
    glProgramUniform4uiv : (program: GLuint, location: GLint, count: GLsizei, value: *GLuint) #foreign;
    glProgramUniformMatrix2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix2x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix3x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix2x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix4x2fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix3x4fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix4x3fv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) #foreign;
    glProgramUniformMatrix2x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix3x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix2x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix4x2dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix3x4dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glProgramUniformMatrix4x3dv : (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) #foreign;
    glValidateProgramPipeline : (pipeline: GLuint) #foreign;
    glGetProgramPipelineInfoLog : (pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) #foreign;
    glVertexAttribL1d : (index: GLuint, x: GLdouble) #foreign;
    glVertexAttribL2d : (index: GLuint, x: GLdouble, y: GLdouble) #foreign;
    glVertexAttribL3d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) #foreign;
    glVertexAttribL4d : (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) #foreign;
    glVertexAttribL1dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttribL2dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttribL3dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttribL4dv : (index: GLuint, v: *GLdouble) #foreign;
    glVertexAttribLPointer : (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: *void) #foreign;
    glGetVertexAttribLdv : (index: GLuint, pname: GLenum, params: *GLdouble) #foreign;
    glViewportArrayv : (first: GLuint, count: GLsizei, v: *GLfloat) #foreign;
    glViewportIndexedf : (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) #foreign;
    glViewportIndexedfv : (index: GLuint, v: *GLfloat) #foreign;
    glScissorArrayv : (first: GLuint, count: GLsizei, v: *GLint) #foreign;
    glScissorIndexed : (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) #foreign;
    glScissorIndexedv : (index: GLuint, v: *GLint) #foreign;
    glDepthRangeArrayv : (first: GLuint, count: GLsizei, v: *GLdouble) #foreign;
    glDepthRangeIndexed : (index: GLuint, n: GLdouble, f: GLdouble) #foreign;
    glGetFloati_v : (target: GLenum, index: GLuint, data: *GLfloat) #foreign;
    glGetDoublei_v : (target: GLenum, index: GLuint, data: *GLdouble) #foreign;

    // GL_VERSION_4_2
    glDrawArraysInstancedBaseInstance : (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) #foreign;
    glDrawElementsInstancedBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, baseinstance: GLuint) #foreign;
    glDrawElementsInstancedBaseVertexBaseInstance : (mode: GLenum, count: GLsizei, type: GLenum, indices: *void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) #foreign;
    glGetInternalformativ : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) #foreign;
    glGetActiveAtomicCounterBufferiv : (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) #foreign;
    glBindImageTexture : (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) #foreign;
    glMemoryBarrier : (barriers: GLbitfield) #foreign;
    glTexStorage1D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
    glTexStorage2D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glTexStorage3D : (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
    glDrawTransformFeedbackInstanced : (mode: GLenum, id: GLuint, instancecount: GLsizei) #foreign;
    glDrawTransformFeedbackStreamInstanced : (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) #foreign;

    // GL_VERSION_4_3
    glClearBufferData : (target: GLenum, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
    glClearBufferSubData : (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
    glDispatchCompute : (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) #foreign;
    glDispatchComputeIndirect : (indirect: GLintptr) #foreign;
    glCopyImageSubData : (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) #foreign;
    glFramebufferParameteri : (target: GLenum, pname: GLenum, param: GLint) #foreign;
    glGetFramebufferParameteriv : (target: GLenum, pname: GLenum, params: *GLint) #foreign;
    glGetInternalformati64v : (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) #foreign;
    glInvalidateTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
    glInvalidateTexImage : (texture: GLuint, level: GLint) #foreign;
    glInvalidateBufferSubData : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
    glInvalidateBufferData : (buffer: GLuint) #foreign;
    glInvalidateFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum) #foreign;
    glInvalidateSubFramebuffer : (target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
    glMultiDrawArraysIndirect : (mode: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #foreign;
    glMultiDrawElementsIndirect : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLsizei, stride: GLsizei) #foreign;
    glGetProgramInterfaceiv : (program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) #foreign;
    glGetProgramResourceIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint #foreign;
    glGetProgramResourceName : (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) #foreign;
    glGetProgramResourceiv : (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) #foreign;
    glGetProgramResourceLocation : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign;
    glGetProgramResourceLocationIndex : (program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint #foreign;
    glShaderStorageBlockBinding : (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) #foreign;
    glTexBufferRange : (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
    glTexStorage2DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
    glTexStorage3DMultisample : (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
    glTextureView : (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) #foreign;
    glBindVertexBuffer : (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
    glVertexAttribFormat : (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
    glVertexAttribIFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
    glVertexAttribLFormat : (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
    glVertexAttribBinding : (attribindex: GLuint, bindingindex: GLuint) #foreign;
    glVertexBindingDivisor : (bindingindex: GLuint, divisor: GLuint) #foreign;
    glDebugMessageControl : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
    glDebugMessageInsert : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
    glDebugMessageCallback : (callback: GLDEBUGPROC, userParam: *void) #foreign;
    glGetDebugMessageLog : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
    glPushDebugGroup : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #foreign;
    glPopDebugGroup : () #foreign;
    glObjectLabel : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #foreign;
    glGetObjectLabel : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
    glObjectPtrLabel : (ptr: *void, length: GLsizei, label: *GLchar) #foreign;
    glGetObjectPtrLabel : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;

    // GL_VERSION_4_4
    glBufferStorage : (target: GLenum, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
    glClearTexImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, data: *void) #foreign;
    glClearTexSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, data: *void) #foreign;
    glBindBuffersBase : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) #foreign;
    glBindBuffersRange : (target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) #foreign;
    glBindTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #foreign;
    glBindSamplers : (first: GLuint, count: GLsizei, samplers: *GLuint) #foreign;
    glBindImageTextures : (first: GLuint, count: GLsizei, textures: *GLuint) #foreign;
    glBindVertexBuffers : (first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;

    // GL_VERSION_4_5
    glClipControl : (origin: GLenum, depth: GLenum) #foreign;
    glCreateTransformFeedbacks : (n: GLsizei, ids: *GLuint) #foreign;
    glTransformFeedbackBufferBase : (xfb: GLuint, index: GLuint, buffer: GLuint) #foreign;
    glTransformFeedbackBufferRange : (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
    glGetTransformFeedbackiv : (xfb: GLuint, pname: GLenum, param: *GLint) #foreign;
    glGetTransformFeedbacki_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint) #foreign;
    glGetTransformFeedbacki64_v : (xfb: GLuint, pname: GLenum, index: GLuint, param: *GLint64) #foreign;
    glCreateBuffers : (n: GLsizei, buffers: *GLuint) #foreign;
    glNamedBufferStorage : (buffer: GLuint, size: GLsizeiptr, data: *void, flags: GLbitfield) #foreign;
    glNamedBufferData : (buffer: GLuint, size: GLsizeiptr, data: *void, usage: GLenum) #foreign;
    glNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
    glCopyNamedBufferSubData : (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) #foreign;
    glClearNamedBufferData : (buffer: GLuint, internalformat: GLenum, format: GLenum, type: GLenum, data: *void) #foreign;
    glClearNamedBufferSubData : (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type: GLenum, data: *void) #foreign;
    glMapNamedBuffer : (buffer: GLuint, access: GLenum) -> *void #foreign;
    glMapNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *void #foreign;
    glUnmapNamedBuffer : (buffer: GLuint) -> GLboolean #foreign;
    glFlushMappedNamedBufferRange : (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) #foreign;
    glGetNamedBufferParameteriv : (buffer: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetNamedBufferParameteri64v : (buffer: GLuint, pname: GLenum, params: *GLint64) #foreign;
    glGetNamedBufferPointerv : (buffer: GLuint, pname: GLenum, params: **void) #foreign;
    glGetNamedBufferSubData : (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *void) #foreign;
    glCreateFramebuffers : (n: GLsizei, framebuffers: *GLuint) #foreign;
    glNamedFramebufferRenderbuffer : (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) #foreign;
    glNamedFramebufferParameteri : (framebuffer: GLuint, pname: GLenum, param: GLint) #foreign;
    glNamedFramebufferTexture : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) #foreign;
    glNamedFramebufferTextureLayer : (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) #foreign;
    glNamedFramebufferDrawBuffer : (framebuffer: GLuint, buf: GLenum) #foreign;
    glNamedFramebufferDrawBuffers : (framebuffer: GLuint, n: GLsizei, bufs: *GLenum) #foreign;
    glNamedFramebufferReadBuffer : (framebuffer: GLuint, src: GLenum) #foreign;
    glInvalidateNamedFramebufferData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum) #foreign;
    glInvalidateNamedFramebufferSubData : (framebuffer: GLuint, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
    glClearNamedFramebufferiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLint) #foreign;
    glClearNamedFramebufferuiv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLuint) #foreign;
    glClearNamedFramebufferfv : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) #foreign;
    glClearNamedFramebufferfi : (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) #foreign;
    glBlitNamedFramebuffer : (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) #foreign;
    glCheckNamedFramebufferStatus : (framebuffer: GLuint, target: GLenum) -> GLenum #foreign;
    glGetNamedFramebufferParameteriv : (framebuffer: GLuint, pname: GLenum, param: *GLint) #foreign;
    glGetNamedFramebufferAttachmentParameteriv : (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) #foreign;
    glCreateRenderbuffers : (n: GLsizei, renderbuffers: *GLuint) #foreign;
    glNamedRenderbufferStorage : (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glNamedRenderbufferStorageMultisample : (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glGetNamedRenderbufferParameteriv : (renderbuffer: GLuint, pname: GLenum, params: *GLint) #foreign;
    glCreateTextures : (target: GLenum, n: GLsizei, textures: *GLuint) #foreign;
    glTextureBuffer : (texture: GLuint, internalformat: GLenum, buffer: GLuint) #foreign;
    glTextureBufferRange : (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) #foreign;
    glTextureStorage1D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) #foreign;
    glTextureStorage2D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) #foreign;
    glTextureStorage3D : (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) #foreign;
    glTextureStorage2DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) #foreign;
    glTextureStorage3DMultisample : (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) #foreign;
    glTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
    glTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
    glTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: *void) #foreign;
    glCompressedTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
    glCompressedTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *void) #foreign;
    glCopyTextureSubImage1D : (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) #foreign;
    glCopyTextureSubImage2D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
    glCopyTextureSubImage3D : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) #foreign;
    glTextureParameterf : (texture: GLuint, pname: GLenum, param: GLfloat) #foreign;
    glTextureParameterfv : (texture: GLuint, pname: GLenum, param: *GLfloat) #foreign;
    glTextureParameteri : (texture: GLuint, pname: GLenum, param: GLint) #foreign;
    glTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
    glTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
    glTextureParameteriv : (texture: GLuint, pname: GLenum, param: *GLint) #foreign;
    glGenerateTextureMipmap : (texture: GLuint) #foreign;
    glBindTextureUnit : (unit: GLuint, texture: GLuint) #foreign;
    glGetTextureImage : (texture: GLuint, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
    glGetCompressedTextureImage : (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *void) #foreign;
    glGetTextureLevelParameterfv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLfloat) #foreign;
    glGetTextureLevelParameteriv : (texture: GLuint, level: GLint, pname: GLenum, params: *GLint) #foreign;
    glGetTextureParameterfv : (texture: GLuint, pname: GLenum, params: *GLfloat) #foreign;
    glGetTextureParameterIiv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
    glGetTextureParameterIuiv : (texture: GLuint, pname: GLenum, params: *GLuint) #foreign;
    glGetTextureParameteriv : (texture: GLuint, pname: GLenum, params: *GLint) #foreign;
    glCreateVertexArrays : (n: GLsizei, arrays: *GLuint) #foreign;
    glDisableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
    glEnableVertexArrayAttrib : (vaobj: GLuint, index: GLuint) #foreign;
    glVertexArrayElementBuffer : (vaobj: GLuint, buffer: GLuint) #foreign;
    glVertexArrayVertexBuffer : (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) #foreign;
    glVertexArrayVertexBuffers : (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) #foreign;
    glVertexArrayAttribBinding : (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) #foreign;
    glVertexArrayAttribFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) #foreign;
    glVertexArrayAttribIFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
    glVertexArrayAttribLFormat : (vaobj: GLuint, attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) #foreign;
    glVertexArrayBindingDivisor : (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) #foreign;
    glGetVertexArrayiv : (vaobj: GLuint, pname: GLenum, param: *GLint) #foreign;
    glGetVertexArrayIndexediv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) #foreign;
    glGetVertexArrayIndexed64iv : (vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint64) #foreign;
    glCreateSamplers : (n: GLsizei, samplers: *GLuint) #foreign;
    glCreateProgramPipelines : (n: GLsizei, pipelines: *GLuint) #foreign;
    glCreateQueries : (target: GLenum, n: GLsizei, ids: *GLuint) #foreign;
    glGetQueryBufferObjecti64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
    glGetQueryBufferObjectiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
    glGetQueryBufferObjectui64v : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
    glGetQueryBufferObjectuiv : (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) #foreign;
    glMemoryBarrierByRegion : (barriers: GLbitfield) #foreign;
    glGetTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
    glGetCompressedTextureSubImage : (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *void) #foreign;
    glGetGraphicsResetStatus : () -> GLenum #foreign;
    glGetnCompressedTexImage : (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *void) #foreign;
    glGetnTexImage : (target: GLenum, level: GLint, format: GLenum, type: GLenum, bufSize: GLsizei, pixels: *void) #foreign;
    glGetnUniformdv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) #foreign;
    glGetnUniformfv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) #foreign;
    glGetnUniformiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) #foreign;
    glGetnUniformuiv : (program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) #foreign;
    glReadnPixels : (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, bufSize: GLsizei, data: *void) #foreign;
    glGetnMapdv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) #foreign;
    glGetnMapfv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) #foreign;
    glGetnMapiv : (target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) #foreign;
    glGetnPixelMapfv : (map: GLenum, bufSize: GLsizei, values: *GLfloat) #foreign;
    glGetnPixelMapuiv : (map: GLenum, bufSize: GLsizei, values: *GLuint) #foreign;
    glGetnPixelMapusv : (map: GLenum, bufSize: GLsizei, values: *GLushort) #foreign;
    glGetnPolygonStipple : (bufSize: GLsizei, pattern: *GLubyte) #foreign;
    glGetnColorTable : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, table: *void) #foreign;
    glGetnConvolutionFilter : (target: GLenum, format: GLenum, type: GLenum, bufSize: GLsizei, image: *void) #foreign;
    glGetnSeparableFilter : (target: GLenum, format: GLenum, type: GLenum, rowBufSize: GLsizei, row: *void, columnBufSize: GLsizei, column: *void, span: *void) #foreign;
    glGetnHistogram : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #foreign;
    glGetnMinmax : (target: GLenum, reset: GLboolean, format: GLenum, type: GLenum, bufSize: GLsizei, values: *void) #foreign;
    glTextureBarrier : () #foreign;

    // GL_VERSION_4_6
    glSpecializeShader : (shader: GLuint, pEntryPoint: *GLchar, numSpecializationConstants: GLuint, pConstantIndex: *GLuint, pConstantValue: *GLuint) #foreign;
    glMultiDrawArraysIndirectCount : (mode: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #foreign;
    glMultiDrawElementsIndirectCount : (mode: GLenum, type: GLenum, indirect: *void, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) #foreign;
    glPolygonOffsetClamp : (factor: GLfloat, units: GLfloat, clamp: GLfloat) #foreign;

    // Extension functions:

    // GL_ARB_clip_control
    // glClipControl : (origin: GLenum, depth: GLenum) #foreign;

    // GL_ARB_debug_output
    glDebugMessageControlARB : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
    glDebugMessageInsertARB : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
    glDebugMessageCallbackARB : (callback: GLDEBUGPROCARB, userParam: *void) #foreign;
    glGetDebugMessageLogARB : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;

    // GL_AMD_vertex_shader_viewport_index

    // GL_EXT_debug_label
    glLabelObjectEXT : (type: GLenum, object: GLuint, length: GLsizei, label: *GLchar) #foreign;
    glGetObjectLabelEXT : (type: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;

    // GL_EXT_debug_marker
    glInsertEventMarkerEXT : (length: GLsizei, marker: *GLchar) #foreign;
    glPushGroupMarkerEXT : (length: GLsizei, marker: *GLchar) #foreign;
    glPopGroupMarkerEXT : () #foreign;

    // GL_KHR_debug
    glGetPointerv : (pname: GLenum, params: **void) #foreign;
    glDebugMessageControlKHR : (source: GLenum, type: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) #foreign;
    glDebugMessageInsertKHR : (source: GLenum, type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) #foreign;
    glDebugMessageCallbackKHR : (callback: GLDEBUGPROCKHR, userParam: *void) #foreign;
    glGetDebugMessageLogKHR : (count: GLuint, bufSize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint #foreign;
    glPushDebugGroupKHR : (source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) #foreign;
    glPopDebugGroupKHR : () #foreign;
    glObjectLabelKHR : (identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) #foreign;
    glGetObjectLabelKHR : (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
    glObjectPtrLabelKHR : (ptr: *void, length: GLsizei, label: *GLchar) #foreign;
    glGetObjectPtrLabelKHR : (ptr: *void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) #foreign;
    glGetPointervKHR : (pname: GLenum, params: **void) #foreign;

    // GL_NV_depth_buffer_float
    glDepthRangedNV : (zNear: GLdouble, zFar: GLdouble) #foreign;
    glClearDepthdNV : (depth: GLdouble) #foreign;
    glDepthBoundsdNV : (zmin: GLdouble, zmax: GLdouble) #foreign;


    #if OS == .WINDOWS {
        wglCreateContextAttribsARB : (hDC: HDC, hShareContext: HGLRC, attribList: *s32) -> HGLRC #foreign;
        // WGL_ARB_pixel_format
        wglGetPixelFormatAttribivARB : (hdc: HDC, iPixelFormat: s32, iLayerPlane: s32, nAttributes: u32, piAttributes: *s32, piValues: *s32) -> BOOL #foreign;
        wglGetPixelFormatAttribfvARB : (hdc: HDC, iPixelFormat: s32, iLayerPlane: s32, nAttributes: u32, piAttributes: *s32, pfValues: *float) -> BOOL #foreign;
        wglChoosePixelFormatARB : (hdc: HDC, piAttribIList: *s32, pfAttribFList: *float, nMaxFormats: u32, piFormats: *s32, nNumFormats: *u32) -> BOOL #foreign;
        // WGL_EXT_extensions_string
        wglGetExtensionsStringEXT : () -> *u8 #foreign;

        // WGL_EXT_swap_control
        wglSwapIntervalEXT : (interval: s32) -> BOOL #foreign;
        wglGetSwapIntervalEXT : () -> s32 #foreign;
    }

    #if OS == .LINUX {
        // glXSwapIntervalEXT : (dpy: *Display, draw: GLXDrawable, interval: s32) -> s32 #foreign;
        // glXSwapIntervalSGI : (interval: s32) -> s32 #foreign;
        // glXSwapIntervalMESA : (interval: s32) -> s32 #foreign;
    }

    // Extension flags:

    GL_ARB_clip_control : bool;
    GL_ARB_debug_output : bool;
    GL_ARB_direct_state_access : bool;
    GL_ARB_parallel_shader_compile : bool;
    GL_ARB_sampler_objects : bool;
    GL_ARB_seamless_cube_map : bool;
    GL_ARB_shader_viewport_layer_array : bool;
    GL_ARB_texture_storage : bool;
    GL_ARB_vertex_attrib_binding : bool;
    GL_AMD_vertex_shader_viewport_index : bool;
    GL_EXT_debug_label : bool;
    GL_EXT_debug_marker : bool;
    GL_EXT_texture_compression_latc : bool;
    GL_EXT_texture_compression_rgtc : bool;
    GL_EXT_texture_compression_s3tc : bool;
    GL_EXT_texture_filter_anisotropic : bool;
    GL_EXT_texture_sRGB : bool;
    GL_KHR_debug : bool;
    GL_NV_depth_buffer_float : bool;
    GL_S3_s3tc : bool;

    #if OS == .WINDOWS {
        // Extension flags:

        WGL_ARB_create_context : bool;
        WGL_ARB_create_context_no_error : bool;
        WGL_ARB_create_context_profile : bool;
        WGL_ARB_create_context_robustness : bool;
        WGL_ARB_framebuffer_sRGB : bool;
        WGL_ARB_multisample : bool;
        WGL_ARB_pixel_format : bool;
        WGL_ARB_pixel_format_float : bool;
        WGL_EXT_extensions_string : bool;
        WGL_EXT_swap_control : bool;
        WGL_EXT_swap_control_tear : bool;
    }
}

gl : GL_Procedures;

#if OS == .WINDOWS {
    gl_lib :: #system_library "opengl32";
} else #if OS == .MACOS {
    gl_lib :: #system_library "OpenGL";
} else #if OS == .LINUX {
    // #import "X11";
    gl_lib :: #system_library "libGL";
    //glXGetProcAddress :: (procName: *u8) -> *void #foreign gl_lib;
} else #if OS == .NN_SWITCH {
    // NN_SWITCH_GL_2 has been deleted here for license reasons; we cannot distribute it.
    // See J Blow for the code.
}

