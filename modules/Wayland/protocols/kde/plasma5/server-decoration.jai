/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: server_decoration
 */

org_kde_kwin_server_decoration_manager_interface: wl_interface;
org_kde_kwin_server_decoration_manager :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_server_decoration_manager_interface;

    /* ENUM: org_kde_kwin_server_decoration_manager::mode */
    mode_None   : u32 : 0;
    mode_Client : u32 : 1;
    mode_Server : u32 : 2;

    set_user_data :: inline (self: *org_kde_kwin_server_decoration_manager, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_server_decoration_manager) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_server_decoration_manager) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_server_decoration_manager) #c_call {
        wl_proxy.destroy(self);
    }

    create :: inline (self: *org_kde_kwin_server_decoration_manager, surface: *wl_surface) -> *org_kde_kwin_server_decoration #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_CREATE,
            *org_kde_kwin_server_decoration_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*org_kde_kwin_server_decoration) ret;
    }

    add_listener :: inline (self: *org_kde_kwin_server_decoration_manager, listener: *org_kde_kwin_server_decoration_manager_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_CREATE             : u32 : 0;
ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_CREATE_SINCE       : u32 : 1;
ORG_KDE_KWIN_SERVER_DECORATION_MANAGER_DEFAULT_MODE_SINCE : u32 : 1;

org_kde_kwin_server_decoration_manager_listener :: struct {
    default_mode := _stubs_.default_mode;

    _stubs_ :: struct {
        default_mode :: (data: *void,
            self: *org_kde_kwin_server_decoration_manager,
            mode: u32) -> void #c_call {}
    }
}

org_kde_kwin_server_decoration_interface: wl_interface;
org_kde_kwin_server_decoration :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_server_decoration_interface;

    /* ENUM: org_kde_kwin_server_decoration::mode */
    mode_None   : u32 : 0;
    mode_Client : u32 : 1;
    mode_Server : u32 : 2;

    set_user_data :: inline (self: *org_kde_kwin_server_decoration, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_server_decoration) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_server_decoration) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_server_decoration) #c_call {
        wl_proxy.destroy(self);
    }

    release :: inline (self: *org_kde_kwin_server_decoration) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_SERVER_DECORATION_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    request_mode :: inline (self: *org_kde_kwin_server_decoration, mode: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_SERVER_DECORATION_REQUEST_MODE,
            null, wl_proxy.get_version(self), 0,
            mode);
    }

    add_listener :: inline (self: *org_kde_kwin_server_decoration, listener: *org_kde_kwin_server_decoration_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_KWIN_SERVER_DECORATION_RELEASE            : u32 : 0;
ORG_KDE_KWIN_SERVER_DECORATION_REQUEST_MODE       : u32 : 1;
ORG_KDE_KWIN_SERVER_DECORATION_RELEASE_SINCE      : u32 : 1;
ORG_KDE_KWIN_SERVER_DECORATION_REQUEST_MODE_SINCE : u32 : 1;
ORG_KDE_KWIN_SERVER_DECORATION_MODE_SINCE         : u32 : 1;

org_kde_kwin_server_decoration_listener :: struct {
    mode := _stubs_.mode;

    _stubs_ :: struct {
        mode :: (data: *void,
            self: *org_kde_kwin_server_decoration,
            mode: u32) -> void #c_call {}
    }
}


#scope_module
server_decoration_protocol_init :: () {
    server_decoration_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_server_decoration_manager::create */
        *org_kde_kwin_server_decoration_interface,   // 1
        *wl_surface_interface,   // 2
        /* EVENT: org_kde_kwin_server_decoration_manager::default_mode */
        null,  // 3
        /* REQUEST: org_kde_kwin_server_decoration::request_mode */
        null,  // 4
        /* EVENT: org_kde_kwin_server_decoration::mode */
        null,  // 5
    ];

    org_kde_kwin_server_decoration_manager_requests[0] = .{"create", "no", server_decoration_types_storage.data + 0};
    org_kde_kwin_server_decoration_manager_events[0] = .{"default_mode", "u", server_decoration_types_storage.data + 1};
    org_kde_kwin_server_decoration_manager_interface = .{
        "org_kde_kwin_server_decoration_manager", 1,
        org_kde_kwin_server_decoration_manager_requests.count, org_kde_kwin_server_decoration_manager_requests.data,
        org_kde_kwin_server_decoration_manager_events.count, org_kde_kwin_server_decoration_manager_events.data,
    };

    org_kde_kwin_server_decoration_requests[0] = .{"release", "", server_decoration_types_storage.data + 0};
    org_kde_kwin_server_decoration_requests[1] = .{"request_mode", "u", server_decoration_types_storage.data + 3};
    org_kde_kwin_server_decoration_events[0] = .{"mode", "u", server_decoration_types_storage.data + 4};
    org_kde_kwin_server_decoration_interface = .{
        "org_kde_kwin_server_decoration", 1,
        org_kde_kwin_server_decoration_requests.count, org_kde_kwin_server_decoration_requests.data,
        org_kde_kwin_server_decoration_events.count, org_kde_kwin_server_decoration_events.data,
    };
}


#scope_file
server_decoration_types_storage: []*wl_interface;

org_kde_kwin_server_decoration_manager_requests: [1]wl_message;
org_kde_kwin_server_decoration_manager_events  : [1]wl_message;

org_kde_kwin_server_decoration_requests: [2]wl_message;
org_kde_kwin_server_decoration_events  : [1]wl_message;

#assert size_of(org_kde_kwin_server_decoration_manager) == 0 "wayland-scanner bug: org_kde_kwin_server_decoration_manager is non-empty";
#assert size_of(org_kde_kwin_server_decoration) == 0 "wayland-scanner bug: org_kde_kwin_server_decoration is non-empty";
