/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: contrast
 */

org_kde_kwin_contrast_manager_interface: wl_interface;
org_kde_kwin_contrast_manager :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_contrast_manager_interface;

    set_user_data :: inline (self: *org_kde_kwin_contrast_manager, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_contrast_manager) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_contrast_manager) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_contrast_manager) #c_call {
        wl_proxy.destroy(self);
    }

    create :: inline (self: *org_kde_kwin_contrast_manager, surface: *wl_surface) -> *org_kde_kwin_contrast #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_MANAGER_CREATE,
            *org_kde_kwin_contrast_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*org_kde_kwin_contrast) ret;
    }

    unset :: inline (self: *org_kde_kwin_contrast_manager, surface: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_MANAGER_UNSET,
            null, wl_proxy.get_version(self), 0,
            surface);
    }
}

ORG_KDE_KWIN_CONTRAST_MANAGER_CREATE       : u32 : 0;
ORG_KDE_KWIN_CONTRAST_MANAGER_UNSET        : u32 : 1;
ORG_KDE_KWIN_CONTRAST_MANAGER_CREATE_SINCE : u32 : 1;
ORG_KDE_KWIN_CONTRAST_MANAGER_UNSET_SINCE  : u32 : 1;

org_kde_kwin_contrast_interface: wl_interface;
org_kde_kwin_contrast :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_contrast_interface;

    set_user_data :: inline (self: *org_kde_kwin_contrast, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_contrast) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_contrast) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_contrast) #c_call {
        wl_proxy.destroy(self);
    }

    commit :: inline (self: *org_kde_kwin_contrast) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_COMMIT,
            null, wl_proxy.get_version(self), 0);
    }

    set_region :: inline (self: *org_kde_kwin_contrast, region: *wl_region) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_SET_REGION,
            null, wl_proxy.get_version(self), 0,
            region);
    }

    set_contrast :: inline (self: *org_kde_kwin_contrast, contrast: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_SET_CONTRAST,
            null, wl_proxy.get_version(self), 0,
            contrast);
    }

    set_intensity :: inline (self: *org_kde_kwin_contrast, intensity: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_SET_INTENSITY,
            null, wl_proxy.get_version(self), 0,
            intensity);
    }

    set_saturation :: inline (self: *org_kde_kwin_contrast, saturation: wl_fixed_t) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_SET_SATURATION,
            null, wl_proxy.get_version(self), 0,
            saturation);
    }

    release :: inline (self: *org_kde_kwin_contrast) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    set_frost :: inline (self: *org_kde_kwin_contrast, red: s32, green: s32, blue: s32, alpha: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_SET_FROST,
            null, wl_proxy.get_version(self), 0,
            red, green, blue, alpha);
    }

    unset_frost :: inline (self: *org_kde_kwin_contrast) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_CONTRAST_UNSET_FROST,
            null, wl_proxy.get_version(self), 0);
    }
}

ORG_KDE_KWIN_CONTRAST_COMMIT               : u32 : 0;
ORG_KDE_KWIN_CONTRAST_SET_REGION           : u32 : 1;
ORG_KDE_KWIN_CONTRAST_SET_CONTRAST         : u32 : 2;
ORG_KDE_KWIN_CONTRAST_SET_INTENSITY        : u32 : 3;
ORG_KDE_KWIN_CONTRAST_SET_SATURATION       : u32 : 4;
ORG_KDE_KWIN_CONTRAST_RELEASE              : u32 : 5;
ORG_KDE_KWIN_CONTRAST_SET_FROST            : u32 : 6;
ORG_KDE_KWIN_CONTRAST_UNSET_FROST          : u32 : 7;
ORG_KDE_KWIN_CONTRAST_COMMIT_SINCE         : u32 : 1;
ORG_KDE_KWIN_CONTRAST_SET_REGION_SINCE     : u32 : 1;
ORG_KDE_KWIN_CONTRAST_SET_CONTRAST_SINCE   : u32 : 1;
ORG_KDE_KWIN_CONTRAST_SET_INTENSITY_SINCE  : u32 : 1;
ORG_KDE_KWIN_CONTRAST_SET_SATURATION_SINCE : u32 : 1;
ORG_KDE_KWIN_CONTRAST_RELEASE_SINCE        : u32 : 1;
ORG_KDE_KWIN_CONTRAST_SET_FROST_SINCE      : u32 : 2;
ORG_KDE_KWIN_CONTRAST_UNSET_FROST_SINCE    : u32 : 2;


#scope_module
contrast_protocol_init :: () {
    contrast_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_contrast_manager::create */
        *org_kde_kwin_contrast_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: org_kde_kwin_contrast_manager::unset */
        *wl_surface_interface,   // 3
        /* REQUEST: org_kde_kwin_contrast::set_region */
        *wl_region_interface,   // 4
        /* REQUEST: org_kde_kwin_contrast::set_contrast */
        null,  // 5
        /* REQUEST: org_kde_kwin_contrast::set_intensity */
        null,  // 6
        /* REQUEST: org_kde_kwin_contrast::set_saturation */
        null,  // 7
        /* REQUEST: org_kde_kwin_contrast::set_frost */
        null,  // 8
        null,  // 9
        null,  // 10
        null,  // 11
    ];

    org_kde_kwin_contrast_manager_requests[0] = .{"create", "no", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_manager_requests[1] = .{"unset", "o", contrast_types_storage.data + 1};
    org_kde_kwin_contrast_manager_interface = .{
        "org_kde_kwin_contrast_manager", 2,
        org_kde_kwin_contrast_manager_requests.count, org_kde_kwin_contrast_manager_requests.data,
        0, null,
    };

    org_kde_kwin_contrast_requests[0] = .{"commit", "", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_requests[1] = .{"set_region", "o", contrast_types_storage.data + 3};
    org_kde_kwin_contrast_requests[2] = .{"set_contrast", "f", contrast_types_storage.data + 4};
    org_kde_kwin_contrast_requests[3] = .{"set_intensity", "f", contrast_types_storage.data + 5};
    org_kde_kwin_contrast_requests[4] = .{"set_saturation", "f", contrast_types_storage.data + 6};
    org_kde_kwin_contrast_requests[5] = .{"release", "", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_requests[6] = .{"set_frost", "iiii", contrast_types_storage.data + 7};
    org_kde_kwin_contrast_requests[7] = .{"unset_frost", "", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_interface = .{
        "org_kde_kwin_contrast", 2,
        org_kde_kwin_contrast_requests.count, org_kde_kwin_contrast_requests.data,
        0, null,
    };
}


#scope_file
contrast_types_storage: []*wl_interface;

org_kde_kwin_contrast_manager_requests: [2]wl_message;

org_kde_kwin_contrast_requests: [8]wl_message;

#assert size_of(org_kde_kwin_contrast_manager) == 0 "wayland-scanner bug: org_kde_kwin_contrast_manager is non-empty";
#assert size_of(org_kde_kwin_contrast) == 0 "wayland-scanner bug: org_kde_kwin_contrast is non-empty";
