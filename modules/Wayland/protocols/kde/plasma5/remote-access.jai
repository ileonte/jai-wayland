/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: remote_access
 */

org_kde_kwin_remote_access_manager_interface: wl_interface;
org_kde_kwin_remote_access_manager :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_remote_access_manager_interface;

    set_user_data :: inline (self: *org_kde_kwin_remote_access_manager, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_remote_access_manager) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_remote_access_manager) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_remote_access_manager) #c_call {
        wl_proxy.destroy(self);
    }

    get_buffer :: inline (self: *org_kde_kwin_remote_access_manager, internal_buffer_id: s32) -> *org_kde_kwin_remote_buffer #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_GET_BUFFER,
            *org_kde_kwin_remote_buffer_interface, wl_proxy.get_version(self), 0,
            null, internal_buffer_id);
        return cast(*org_kde_kwin_remote_buffer) ret;
    }

    release :: inline (self: *org_kde_kwin_remote_access_manager) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *org_kde_kwin_remote_access_manager, listener: *org_kde_kwin_remote_access_manager_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_GET_BUFFER         : u32 : 0;
ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_RELEASE            : u32 : 1;
ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_GET_BUFFER_SINCE   : u32 : 1;
ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_RELEASE_SINCE      : u32 : 1;
ORG_KDE_KWIN_REMOTE_ACCESS_MANAGER_BUFFER_READY_SINCE : u32 : 1;

org_kde_kwin_remote_access_manager_listener :: struct {
    buffer_ready := _stubs_.buffer_ready;

    _stubs_ :: struct {
        buffer_ready :: (data: *void,
            self: *org_kde_kwin_remote_access_manager,
            id: s32,
            output: *wl_output) -> void #c_call {}
    }
}

org_kde_kwin_remote_buffer_interface: wl_interface;
org_kde_kwin_remote_buffer :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_remote_buffer_interface;

    set_user_data :: inline (self: *org_kde_kwin_remote_buffer, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_remote_buffer) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_remote_buffer) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_remote_buffer) #c_call {
        wl_proxy.destroy(self);
    }

    release :: inline (self: *org_kde_kwin_remote_buffer) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_REMOTE_BUFFER_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *org_kde_kwin_remote_buffer, listener: *org_kde_kwin_remote_buffer_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_KWIN_REMOTE_BUFFER_RELEASE          : u32 : 0;
ORG_KDE_KWIN_REMOTE_BUFFER_RELEASE_SINCE    : u32 : 1;
ORG_KDE_KWIN_REMOTE_BUFFER_GBM_HANDLE_SINCE : u32 : 1;

org_kde_kwin_remote_buffer_listener :: struct {
    gbm_handle := _stubs_.gbm_handle;

    _stubs_ :: struct {
        gbm_handle :: (data: *void,
            self: *org_kde_kwin_remote_buffer,
            fd: s32,
            width: u32,
            height: u32,
            stride: u32,
            format: u32) -> void #c_call {}
    }
}


#scope_module
remote_access_protocol_init :: () {
    remote_access_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_remote_access_manager::get_buffer */
        *org_kde_kwin_remote_buffer_interface,   // 1
        null,  // 2
        /* EVENT: org_kde_kwin_remote_access_manager::buffer_ready */
        null,  // 3
        *wl_output_interface,  // 4
        /* EVENT: org_kde_kwin_remote_buffer::gbm_handle */
        null,  // 5
        null,  // 6
        null,  // 7
        null,  // 8
        null,  // 9
    ];

    org_kde_kwin_remote_access_manager_requests[0] = .{"get_buffer", "ni", remote_access_types_storage.data + 1};
    org_kde_kwin_remote_access_manager_requests[1] = .{"release", "", remote_access_types_storage.data + 0};
    org_kde_kwin_remote_access_manager_events[0] = .{"buffer_ready", "io", remote_access_types_storage.data + 3};
    org_kde_kwin_remote_access_manager_interface = .{
        "org_kde_kwin_remote_access_manager", 1,
        org_kde_kwin_remote_access_manager_requests.count, org_kde_kwin_remote_access_manager_requests.data,
        org_kde_kwin_remote_access_manager_events.count, org_kde_kwin_remote_access_manager_events.data,
    };

    org_kde_kwin_remote_buffer_requests[0] = .{"release", "", remote_access_types_storage.data + 0};
    org_kde_kwin_remote_buffer_events[0] = .{"gbm_handle", "huuuu", remote_access_types_storage.data + 5};
    org_kde_kwin_remote_buffer_interface = .{
        "org_kde_kwin_remote_buffer", 1,
        org_kde_kwin_remote_buffer_requests.count, org_kde_kwin_remote_buffer_requests.data,
        org_kde_kwin_remote_buffer_events.count, org_kde_kwin_remote_buffer_events.data,
    };
}


#scope_file
remote_access_types_storage: []*wl_interface;

org_kde_kwin_remote_access_manager_requests: [2]wl_message;
org_kde_kwin_remote_access_manager_events  : [1]wl_message;

org_kde_kwin_remote_buffer_requests: [1]wl_message;
org_kde_kwin_remote_buffer_events  : [1]wl_message;

#assert size_of(org_kde_kwin_remote_access_manager) == 0 "wayland-scanner bug: org_kde_kwin_remote_access_manager is non-empty";
#assert size_of(org_kde_kwin_remote_buffer) == 0 "wayland-scanner bug: org_kde_kwin_remote_buffer is non-empty";
