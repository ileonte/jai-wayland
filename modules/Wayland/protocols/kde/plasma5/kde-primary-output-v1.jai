/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: kde_primary_output_v1
 */

kde_primary_output_v1_interface: wl_interface;
kde_primary_output_v1 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *kde_primary_output_v1_interface;

    set_user_data :: inline (self: *kde_primary_output_v1, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *kde_primary_output_v1) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *kde_primary_output_v1) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *kde_primary_output_v1) #c_call {
        wl_proxy.marshal_flags(
            self, KDE_PRIMARY_OUTPUT_V1_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *kde_primary_output_v1, listener: *kde_primary_output_v1_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

KDE_PRIMARY_OUTPUT_V1_DESTROY              : u32 : 0;
KDE_PRIMARY_OUTPUT_V1_DESTROY_SINCE        : u32 : 2;
KDE_PRIMARY_OUTPUT_V1_PRIMARY_OUTPUT_SINCE : u32 : 1;

kde_primary_output_v1_listener :: struct {
    primary_output := _stubs_.primary_output;

    _stubs_ :: struct {
        primary_output :: (data: *void,
            self: *kde_primary_output_v1,
            output_name: *u8) -> void #c_call {}
    }
}


#scope_module
kde_primary_output_v1_protocol_init :: () {
    kde_primary_output_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* EVENT: kde_primary_output_v1::primary_output */
        null,  // 1
    ];

    kde_primary_output_v1_requests[0] = .{"destroy", "", kde_primary_output_v1_types_storage.data + 0};
    kde_primary_output_v1_events[0] = .{"primary_output", "s", kde_primary_output_v1_types_storage.data + 1};
    kde_primary_output_v1_interface = .{
        "kde_primary_output_v1", 2,
        kde_primary_output_v1_requests.count, kde_primary_output_v1_requests.data,
        kde_primary_output_v1_events.count, kde_primary_output_v1_events.data,
    };
}


#scope_file
kde_primary_output_v1_types_storage: []*wl_interface;

kde_primary_output_v1_requests: [1]wl_message;
kde_primary_output_v1_events  : [1]wl_message;

#assert size_of(kde_primary_output_v1) == 0 "wayland-scanner bug: kde_primary_output_v1 is non-empty";
