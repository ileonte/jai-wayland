/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: dpms
 */

org_kde_kwin_dpms_manager_interface: wl_interface;
org_kde_kwin_dpms_manager :: struct {
    #as _proxy: wl_proxy;

    set_user_data :: inline (self: *org_kde_kwin_dpms_manager, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_dpms_manager) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_dpms_manager) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_dpms_manager) #c_call {
        wl_proxy.destroy(self);
    }

    get :: inline (self: *org_kde_kwin_dpms_manager, output: *wl_output) -> *org_kde_kwin_dpms #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_DPMS_MANAGER_GET,
            *org_kde_kwin_dpms_interface, wl_proxy.get_version(self), 0,
            null, output);
        return cast(*org_kde_kwin_dpms) ret;
    }
}

ORG_KDE_KWIN_DPMS_MANAGER_GET       : u32 : 0;
ORG_KDE_KWIN_DPMS_MANAGER_GET_SINCE : u32 : 1;

org_kde_kwin_dpms_interface: wl_interface;
org_kde_kwin_dpms :: struct {
    #as _proxy: wl_proxy;

    /* ENUM: org_kde_kwin_dpms::mode */
    mode_On      : u32 : 0;
    mode_Standby : u32 : 1;
    mode_Suspend : u32 : 2;
    mode_Off     : u32 : 3;

    set_user_data :: inline (self: *org_kde_kwin_dpms, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_dpms) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_dpms) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_dpms) #c_call {
        wl_proxy.destroy(self);
    }

    set :: inline (self: *org_kde_kwin_dpms, mode: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_DPMS_SET,
            null, wl_proxy.get_version(self), 0,
            mode);
    }

    release :: inline (self: *org_kde_kwin_dpms) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_DPMS_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    add_listener :: inline (self: *org_kde_kwin_dpms, listener: *org_kde_kwin_dpms_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ORG_KDE_KWIN_DPMS_SET             : u32 : 0;
ORG_KDE_KWIN_DPMS_RELEASE         : u32 : 1;
ORG_KDE_KWIN_DPMS_SET_SINCE       : u32 : 1;
ORG_KDE_KWIN_DPMS_RELEASE_SINCE   : u32 : 1;
ORG_KDE_KWIN_DPMS_SUPPORTED_SINCE : u32 : 1;
ORG_KDE_KWIN_DPMS_MODE_SINCE      : u32 : 1;
ORG_KDE_KWIN_DPMS_DONE_SINCE      : u32 : 1;

org_kde_kwin_dpms_listener :: struct {
    supported := _stubs_.supported;
    mode      := _stubs_.mode;
    done      := _stubs_.done;

    _stubs_ :: struct {
        supported :: (data: *void,
            self: *org_kde_kwin_dpms,
            supported: u32) -> void #c_call {}
        mode :: (data: *void,
            self: *org_kde_kwin_dpms,
            mode: u32) -> void #c_call {}
        done :: (data: *void,
            self: *org_kde_kwin_dpms) -> void #c_call {}
    }
}


#scope_module
dpms_protocol_init :: () {
    dpms_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_dpms_manager::get */
        *org_kde_kwin_dpms_interface,   // 1
        *wl_output_interface,   // 2
        /* REQUEST: org_kde_kwin_dpms::set */
        null,  // 3
        /* EVENT: org_kde_kwin_dpms::supported */
        null,  // 4
        /* EVENT: org_kde_kwin_dpms::mode */
        null,  // 5
    ];

    org_kde_kwin_dpms_manager_requests[0] = .{"get", "no", dpms_types_storage.data + 0};
    org_kde_kwin_dpms_manager_interface = .{
        "org_kde_kwin_dpms_manager", 1,
        org_kde_kwin_dpms_manager_requests.count, org_kde_kwin_dpms_manager_requests.data,
        0, null,
    };

    org_kde_kwin_dpms_requests[0] = .{"set", "u", dpms_types_storage.data + 1};
    org_kde_kwin_dpms_requests[1] = .{"release", "", dpms_types_storage.data + 0};
    org_kde_kwin_dpms_events[0] = .{"supported", "u", dpms_types_storage.data + 3};
    org_kde_kwin_dpms_events[1] = .{"mode", "u", dpms_types_storage.data + 4};
    org_kde_kwin_dpms_events[2] = .{"done", "", dpms_types_storage.data + 0};
    org_kde_kwin_dpms_interface = .{
        "org_kde_kwin_dpms", 1,
        org_kde_kwin_dpms_requests.count, org_kde_kwin_dpms_requests.data,
        org_kde_kwin_dpms_events.count, org_kde_kwin_dpms_events.data,
    };
}


#scope_file
dpms_types_storage: []*wl_interface;

org_kde_kwin_dpms_manager_requests: [1]wl_message;

org_kde_kwin_dpms_requests: [2]wl_message;
org_kde_kwin_dpms_events  : [3]wl_message;

#assert size_of(org_kde_kwin_dpms_manager) == 0 "wayland-scanner bug: org_kde_kwin_dpms_manager is non-empty";
#assert size_of(org_kde_kwin_dpms) == 0 "wayland-scanner bug: org_kde_kwin_dpms is non-empty";
