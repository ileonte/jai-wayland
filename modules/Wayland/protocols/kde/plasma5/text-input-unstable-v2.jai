/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: text_input_unstable_v2
 */

zwp_text_input_v2_interface: wl_interface;
zwp_text_input_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_text_input_v2_interface;

    /* ENUM: zwp_text_input_v2::content_hint */
    content_hint_none                : u32 : 0x0;
    content_hint_auto_completion     : u32 : 0x1;
    content_hint_auto_correction     : u32 : 0x2;
    content_hint_auto_capitalization : u32 : 0x4;
    content_hint_lowercase           : u32 : 0x8;
    content_hint_uppercase           : u32 : 0x10;
    content_hint_titlecase           : u32 : 0x20;
    content_hint_hidden_text         : u32 : 0x40;
    content_hint_sensitive_data      : u32 : 0x80;
    content_hint_latin               : u32 : 0x100;
    content_hint_multiline           : u32 : 0x200;

    /* ENUM: zwp_text_input_v2::content_purpose */
    content_purpose_normal   : u32 : 0;
    content_purpose_alpha    : u32 : 1;
    content_purpose_digits   : u32 : 2;
    content_purpose_number   : u32 : 3;
    content_purpose_phone    : u32 : 4;
    content_purpose_url      : u32 : 5;
    content_purpose_email    : u32 : 6;
    content_purpose_name     : u32 : 7;
    content_purpose_password : u32 : 8;
    content_purpose_date     : u32 : 9;
    content_purpose_time     : u32 : 10;
    content_purpose_datetime : u32 : 11;
    content_purpose_terminal : u32 : 12;

    /* ENUM: zwp_text_input_v2::update_state */
    update_state_change : u32 : 0;
    update_state_full   : u32 : 1;
    update_state_reset  : u32 : 2;
    update_state_enter  : u32 : 3;

    /* ENUM: zwp_text_input_v2::input_panel_visibility */
    input_panel_visibility_hidden  : u32 : 0;
    input_panel_visibility_visible : u32 : 1;

    /* ENUM: zwp_text_input_v2::preedit_style */
    preedit_style_default   : u32 : 0;
    preedit_style_none      : u32 : 1;
    preedit_style_active    : u32 : 2;
    preedit_style_inactive  : u32 : 3;
    preedit_style_highlight : u32 : 4;
    preedit_style_underline : u32 : 5;
    preedit_style_selection : u32 : 6;
    preedit_style_incorrect : u32 : 7;

    /* ENUM: zwp_text_input_v2::text_direction */
    text_direction_auto : u32 : 0;
    text_direction_ltr  : u32 : 1;
    text_direction_rtl  : u32 : 2;

    set_user_data :: inline (self: *zwp_text_input_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_text_input_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_text_input_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_text_input_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    enable :: inline (self: *zwp_text_input_v2, surface: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_ENABLE,
            null, wl_proxy.get_version(self), 0,
            surface);
    }

    disable :: inline (self: *zwp_text_input_v2, surface: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_DISABLE,
            null, wl_proxy.get_version(self), 0,
            surface);
    }

    show_input_panel :: inline (self: *zwp_text_input_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_SHOW_INPUT_PANEL,
            null, wl_proxy.get_version(self), 0);
    }

    hide_input_panel :: inline (self: *zwp_text_input_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_HIDE_INPUT_PANEL,
            null, wl_proxy.get_version(self), 0);
    }

    set_surrounding_text :: inline (self: *zwp_text_input_v2, text: *u8, cursor: s32, anchor: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_SET_SURROUNDING_TEXT,
            null, wl_proxy.get_version(self), 0,
            text, cursor, anchor);
    }

    set_content_type :: inline (self: *zwp_text_input_v2, hint: u32, purpose: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_SET_CONTENT_TYPE,
            null, wl_proxy.get_version(self), 0,
            hint, purpose);
    }

    set_cursor_rectangle :: inline (self: *zwp_text_input_v2, x: s32, y: s32, width: s32, height: s32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_SET_CURSOR_RECTANGLE,
            null, wl_proxy.get_version(self), 0,
            x, y, width, height);
    }

    set_preferred_language :: inline (self: *zwp_text_input_v2, language: *u8) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_SET_PREFERRED_LANGUAGE,
            null, wl_proxy.get_version(self), 0,
            language);
    }

    update_state :: inline (self: *zwp_text_input_v2, serial: u32, reason: u32) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_V2_UPDATE_STATE,
            null, wl_proxy.get_version(self), 0,
            serial, reason);
    }

    add_listener :: inline (self: *zwp_text_input_v2, listener: *zwp_text_input_v2_listener, data: *void) -> s32 #c_call {
        return wl_proxy.add_listener(self, cast(*generic_c_call) listener, data);
    }
}

ZWP_TEXT_INPUT_V2_DESTROY                          : u32 : 0;
ZWP_TEXT_INPUT_V2_ENABLE                           : u32 : 1;
ZWP_TEXT_INPUT_V2_DISABLE                          : u32 : 2;
ZWP_TEXT_INPUT_V2_SHOW_INPUT_PANEL                 : u32 : 3;
ZWP_TEXT_INPUT_V2_HIDE_INPUT_PANEL                 : u32 : 4;
ZWP_TEXT_INPUT_V2_SET_SURROUNDING_TEXT             : u32 : 5;
ZWP_TEXT_INPUT_V2_SET_CONTENT_TYPE                 : u32 : 6;
ZWP_TEXT_INPUT_V2_SET_CURSOR_RECTANGLE             : u32 : 7;
ZWP_TEXT_INPUT_V2_SET_PREFERRED_LANGUAGE           : u32 : 8;
ZWP_TEXT_INPUT_V2_UPDATE_STATE                     : u32 : 9;
ZWP_TEXT_INPUT_V2_DESTROY_SINCE                    : u32 : 1;
ZWP_TEXT_INPUT_V2_ENABLE_SINCE                     : u32 : 1;
ZWP_TEXT_INPUT_V2_DISABLE_SINCE                    : u32 : 1;
ZWP_TEXT_INPUT_V2_SHOW_INPUT_PANEL_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V2_HIDE_INPUT_PANEL_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V2_SET_SURROUNDING_TEXT_SINCE       : u32 : 1;
ZWP_TEXT_INPUT_V2_SET_CONTENT_TYPE_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V2_SET_CURSOR_RECTANGLE_SINCE       : u32 : 1;
ZWP_TEXT_INPUT_V2_SET_PREFERRED_LANGUAGE_SINCE     : u32 : 1;
ZWP_TEXT_INPUT_V2_UPDATE_STATE_SINCE               : u32 : 1;
ZWP_TEXT_INPUT_V2_ENTER_SINCE                      : u32 : 1;
ZWP_TEXT_INPUT_V2_LEAVE_SINCE                      : u32 : 1;
ZWP_TEXT_INPUT_V2_INPUT_PANEL_STATE_SINCE          : u32 : 1;
ZWP_TEXT_INPUT_V2_PREEDIT_STRING_SINCE             : u32 : 1;
ZWP_TEXT_INPUT_V2_PREEDIT_STYLING_SINCE            : u32 : 1;
ZWP_TEXT_INPUT_V2_PREEDIT_CURSOR_SINCE             : u32 : 1;
ZWP_TEXT_INPUT_V2_COMMIT_STRING_SINCE              : u32 : 1;
ZWP_TEXT_INPUT_V2_CURSOR_POSITION_SINCE            : u32 : 1;
ZWP_TEXT_INPUT_V2_DELETE_SURROUNDING_TEXT_SINCE    : u32 : 1;
ZWP_TEXT_INPUT_V2_MODIFIERS_MAP_SINCE              : u32 : 1;
ZWP_TEXT_INPUT_V2_KEYSYM_SINCE                     : u32 : 1;
ZWP_TEXT_INPUT_V2_LANGUAGE_SINCE                   : u32 : 1;
ZWP_TEXT_INPUT_V2_TEXT_DIRECTION_SINCE             : u32 : 1;
ZWP_TEXT_INPUT_V2_CONFIGURE_SURROUNDING_TEXT_SINCE : u32 : 1;
ZWP_TEXT_INPUT_V2_INPUT_METHOD_CHANGED_SINCE       : u32 : 1;

zwp_text_input_v2_listener :: struct {
    enter                      := _stubs_.enter;
    leave                      := _stubs_.leave;
    input_panel_state          := _stubs_.input_panel_state;
    preedit_string             := _stubs_.preedit_string;
    preedit_styling            := _stubs_.preedit_styling;
    preedit_cursor             := _stubs_.preedit_cursor;
    commit_string              := _stubs_.commit_string;
    cursor_position            := _stubs_.cursor_position;
    delete_surrounding_text    := _stubs_.delete_surrounding_text;
    modifiers_map              := _stubs_.modifiers_map;
    keysym                     := _stubs_.keysym;
    language                   := _stubs_.language;
    text_direction             := _stubs_.text_direction;
    configure_surrounding_text := _stubs_.configure_surrounding_text;
    input_method_changed       := _stubs_.input_method_changed;

    _stubs_ :: struct {
        enter :: (data: *void,
            self: *zwp_text_input_v2,
            serial: u32,
            surface: *wl_surface) -> void #c_call {}
        leave :: (data: *void,
            self: *zwp_text_input_v2,
            serial: u32,
            surface: *wl_surface) -> void #c_call {}
        input_panel_state :: (data: *void,
            self: *zwp_text_input_v2,
            state: u32,
            x: s32,
            y: s32,
            width: s32,
            height: s32) -> void #c_call {}
        preedit_string :: (data: *void,
            self: *zwp_text_input_v2,
            text: *u8,
            commit: *u8) -> void #c_call {}
        preedit_styling :: (data: *void,
            self: *zwp_text_input_v2,
            index: u32,
            length: u32,
            style: u32) -> void #c_call {}
        preedit_cursor :: (data: *void,
            self: *zwp_text_input_v2,
            index: s32) -> void #c_call {}
        commit_string :: (data: *void,
            self: *zwp_text_input_v2,
            text: *u8) -> void #c_call {}
        cursor_position :: (data: *void,
            self: *zwp_text_input_v2,
            index: s32,
            anchor: s32) -> void #c_call {}
        delete_surrounding_text :: (data: *void,
            self: *zwp_text_input_v2,
            before_length: u32,
            after_length: u32) -> void #c_call {}
        modifiers_map :: (data: *void,
            self: *zwp_text_input_v2,
            map: *wl_array) -> void #c_call {}
        keysym :: (data: *void,
            self: *zwp_text_input_v2,
            time: u32,
            sym: u32,
            state: u32,
            modifiers: u32) -> void #c_call {}
        language :: (data: *void,
            self: *zwp_text_input_v2,
            language: *u8) -> void #c_call {}
        text_direction :: (data: *void,
            self: *zwp_text_input_v2,
            direction: u32) -> void #c_call {}
        configure_surrounding_text :: (data: *void,
            self: *zwp_text_input_v2,
            before_cursor: s32,
            after_cursor: s32) -> void #c_call {}
        input_method_changed :: (data: *void,
            self: *zwp_text_input_v2,
            serial: u32,
            flags: u32) -> void #c_call {}
    }
}

zwp_text_input_manager_v2_interface: wl_interface;
zwp_text_input_manager_v2 :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *zwp_text_input_manager_v2_interface;

    set_user_data :: inline (self: *zwp_text_input_manager_v2, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *zwp_text_input_manager_v2) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *zwp_text_input_manager_v2) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *zwp_text_input_manager_v2) #c_call {
        wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_MANAGER_V2_DESTROY,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }

    get_text_input :: inline (self: *zwp_text_input_manager_v2, seat: *wl_seat) -> *zwp_text_input_v2 #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ZWP_TEXT_INPUT_MANAGER_V2_GET_TEXT_INPUT,
            *zwp_text_input_v2_interface, wl_proxy.get_version(self), 0,
            null, seat);
        return cast(*zwp_text_input_v2) ret;
    }
}

ZWP_TEXT_INPUT_MANAGER_V2_DESTROY              : u32 : 0;
ZWP_TEXT_INPUT_MANAGER_V2_GET_TEXT_INPUT       : u32 : 1;
ZWP_TEXT_INPUT_MANAGER_V2_DESTROY_SINCE        : u32 : 1;
ZWP_TEXT_INPUT_MANAGER_V2_GET_TEXT_INPUT_SINCE : u32 : 1;


#scope_module
text_input_unstable_v2_protocol_init :: () {
    text_input_unstable_v2_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_text_input_v2::enable */
        *wl_surface_interface,   // 1
        /* REQUEST: zwp_text_input_v2::disable */
        *wl_surface_interface,   // 2
        /* REQUEST: zwp_text_input_v2::set_surrounding_text */
        null,  // 3
        null,  // 4
        null,  // 5
        /* REQUEST: zwp_text_input_v2::set_content_type */
        null,  // 6
        null,  // 7
        /* REQUEST: zwp_text_input_v2::set_cursor_rectangle */
        null,  // 8
        null,  // 9
        null,  // 10
        null,  // 11
        /* REQUEST: zwp_text_input_v2::set_preferred_language */
        null,  // 12
        /* REQUEST: zwp_text_input_v2::update_state */
        null,  // 13
        null,  // 14
        /* EVENT: zwp_text_input_v2::enter */
        null,  // 15
        *wl_surface_interface,  // 16
        /* EVENT: zwp_text_input_v2::leave */
        null,  // 17
        *wl_surface_interface,  // 18
        /* EVENT: zwp_text_input_v2::input_panel_state */
        null,  // 19
        null,  // 20
        null,  // 21
        null,  // 22
        null,  // 23
        /* EVENT: zwp_text_input_v2::preedit_string */
        null,  // 24
        null,  // 25
        /* EVENT: zwp_text_input_v2::preedit_styling */
        null,  // 26
        null,  // 27
        null,  // 28
        /* EVENT: zwp_text_input_v2::preedit_cursor */
        null,  // 29
        /* EVENT: zwp_text_input_v2::commit_string */
        null,  // 30
        /* EVENT: zwp_text_input_v2::cursor_position */
        null,  // 31
        null,  // 32
        /* EVENT: zwp_text_input_v2::delete_surrounding_text */
        null,  // 33
        null,  // 34
        /* EVENT: zwp_text_input_v2::modifiers_map */
        null,  // 35
        /* EVENT: zwp_text_input_v2::keysym */
        null,  // 36
        null,  // 37
        null,  // 38
        null,  // 39
        /* EVENT: zwp_text_input_v2::language */
        null,  // 40
        /* EVENT: zwp_text_input_v2::text_direction */
        null,  // 41
        /* EVENT: zwp_text_input_v2::configure_surrounding_text */
        null,  // 42
        null,  // 43
        /* EVENT: zwp_text_input_v2::input_method_changed */
        null,  // 44
        null,  // 45
        /* REQUEST: zwp_text_input_manager_v2::get_text_input */
        *zwp_text_input_v2_interface,   // 46
        *wl_seat_interface,   // 47
    ];

    zwp_text_input_v2_requests[0] = .{"destroy", "", text_input_unstable_v2_types_storage.data + 0};
    zwp_text_input_v2_requests[1] = .{"enable", "o", text_input_unstable_v2_types_storage.data + 0};
    zwp_text_input_v2_requests[2] = .{"disable", "o", text_input_unstable_v2_types_storage.data + 1};
    zwp_text_input_v2_requests[3] = .{"show_input_panel", "", text_input_unstable_v2_types_storage.data + 0};
    zwp_text_input_v2_requests[4] = .{"hide_input_panel", "", text_input_unstable_v2_types_storage.data + 0};
    zwp_text_input_v2_requests[5] = .{"set_surrounding_text", "sii", text_input_unstable_v2_types_storage.data + 2};
    zwp_text_input_v2_requests[6] = .{"set_content_type", "uu", text_input_unstable_v2_types_storage.data + 3};
    zwp_text_input_v2_requests[7] = .{"set_cursor_rectangle", "iiii", text_input_unstable_v2_types_storage.data + 6};
    zwp_text_input_v2_requests[8] = .{"set_preferred_language", "s", text_input_unstable_v2_types_storage.data + 8};
    zwp_text_input_v2_requests[9] = .{"update_state", "uu", text_input_unstable_v2_types_storage.data + 12};
    zwp_text_input_v2_events[0] = .{"enter", "uo", text_input_unstable_v2_types_storage.data + 13};
    zwp_text_input_v2_events[1] = .{"leave", "uo", text_input_unstable_v2_types_storage.data + 15};
    zwp_text_input_v2_events[2] = .{"input_panel_state", "uiiii", text_input_unstable_v2_types_storage.data + 17};
    zwp_text_input_v2_events[3] = .{"preedit_string", "ss", text_input_unstable_v2_types_storage.data + 19};
    zwp_text_input_v2_events[4] = .{"preedit_styling", "uuu", text_input_unstable_v2_types_storage.data + 24};
    zwp_text_input_v2_events[5] = .{"preedit_cursor", "i", text_input_unstable_v2_types_storage.data + 26};
    zwp_text_input_v2_events[6] = .{"commit_string", "s", text_input_unstable_v2_types_storage.data + 29};
    zwp_text_input_v2_events[7] = .{"cursor_position", "ii", text_input_unstable_v2_types_storage.data + 30};
    zwp_text_input_v2_events[8] = .{"delete_surrounding_text", "uu", text_input_unstable_v2_types_storage.data + 31};
    zwp_text_input_v2_events[9] = .{"modifiers_map", "a", text_input_unstable_v2_types_storage.data + 33};
    zwp_text_input_v2_events[10] = .{"keysym", "uuuu", text_input_unstable_v2_types_storage.data + 35};
    zwp_text_input_v2_events[11] = .{"language", "s", text_input_unstable_v2_types_storage.data + 36};
    zwp_text_input_v2_events[12] = .{"text_direction", "u", text_input_unstable_v2_types_storage.data + 40};
    zwp_text_input_v2_events[13] = .{"configure_surrounding_text", "ii", text_input_unstable_v2_types_storage.data + 41};
    zwp_text_input_v2_events[14] = .{"input_method_changed", "uu", text_input_unstable_v2_types_storage.data + 42};
    zwp_text_input_v2_interface = .{
        "zwp_text_input_v2", 1,
        zwp_text_input_v2_requests.count, zwp_text_input_v2_requests.data,
        zwp_text_input_v2_events.count, zwp_text_input_v2_events.data,
    };

    zwp_text_input_manager_v2_requests[0] = .{"destroy", "", text_input_unstable_v2_types_storage.data + 0};
    zwp_text_input_manager_v2_requests[1] = .{"get_text_input", "no", text_input_unstable_v2_types_storage.data + 44};
    zwp_text_input_manager_v2_interface = .{
        "zwp_text_input_manager_v2", 1,
        zwp_text_input_manager_v2_requests.count, zwp_text_input_manager_v2_requests.data,
        0, null,
    };
}


#scope_file
text_input_unstable_v2_types_storage: []*wl_interface;

zwp_text_input_v2_requests: [10]wl_message;
zwp_text_input_v2_events  : [15]wl_message;

zwp_text_input_manager_v2_requests: [2]wl_message;

#assert size_of(zwp_text_input_v2) == 0 "wayland-scanner bug: zwp_text_input_v2 is non-empty";
#assert size_of(zwp_text_input_manager_v2) == 0 "wayland-scanner bug: zwp_text_input_manager_v2 is non-empty";
