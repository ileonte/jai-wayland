/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: blur
 */

org_kde_kwin_blur_manager_interface: wl_interface;
org_kde_kwin_blur_manager :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_blur_manager_interface;

    set_user_data :: inline (self: *org_kde_kwin_blur_manager, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_blur_manager) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_blur_manager) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_blur_manager) #c_call {
        wl_proxy.destroy(self);
    }

    create :: inline (self: *org_kde_kwin_blur_manager, surface: *wl_surface) -> *org_kde_kwin_blur #c_call {
        ret: *wl_proxy = wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_BLUR_MANAGER_CREATE,
            *org_kde_kwin_blur_interface, wl_proxy.get_version(self), 0,
            null, surface);
        return cast(*org_kde_kwin_blur) ret;
    }

    unset :: inline (self: *org_kde_kwin_blur_manager, surface: *wl_surface) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_BLUR_MANAGER_UNSET,
            null, wl_proxy.get_version(self), 0,
            surface);
    }
}

ORG_KDE_KWIN_BLUR_MANAGER_CREATE       : u32 : 0;
ORG_KDE_KWIN_BLUR_MANAGER_UNSET        : u32 : 1;
ORG_KDE_KWIN_BLUR_MANAGER_CREATE_SINCE : u32 : 1;
ORG_KDE_KWIN_BLUR_MANAGER_UNSET_SINCE  : u32 : 1;

org_kde_kwin_blur_interface: wl_interface;
org_kde_kwin_blur :: struct {
    #as _proxy: wl_proxy;
    _interface_ :: *org_kde_kwin_blur_interface;

    set_user_data :: inline (self: *org_kde_kwin_blur, user_data: *void) #c_call {
        wl_proxy.set_user_data(self, user_data);
    }

    get_user_data :: inline (self: *org_kde_kwin_blur) -> *void #c_call {
        return wl_proxy.get_user_data(self);
    }

    get_version :: inline (self: *org_kde_kwin_blur) -> u32 #c_call {
        return wl_proxy.get_version(self);
    }

    destroy :: inline (self: *org_kde_kwin_blur) #c_call {
        wl_proxy.destroy(self);
    }

    commit :: inline (self: *org_kde_kwin_blur) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_BLUR_COMMIT,
            null, wl_proxy.get_version(self), 0);
    }

    set_region :: inline (self: *org_kde_kwin_blur, region: *wl_region) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_BLUR_SET_REGION,
            null, wl_proxy.get_version(self), 0,
            region);
    }

    release :: inline (self: *org_kde_kwin_blur) #c_call {
        wl_proxy.marshal_flags(
            self, ORG_KDE_KWIN_BLUR_RELEASE,
            null, wl_proxy.get_version(self), WL_MARSHAL_FLAG_DESTROY);
    }
}

ORG_KDE_KWIN_BLUR_COMMIT           : u32 : 0;
ORG_KDE_KWIN_BLUR_SET_REGION       : u32 : 1;
ORG_KDE_KWIN_BLUR_RELEASE          : u32 : 2;
ORG_KDE_KWIN_BLUR_COMMIT_SINCE     : u32 : 1;
ORG_KDE_KWIN_BLUR_SET_REGION_SINCE : u32 : 1;
ORG_KDE_KWIN_BLUR_RELEASE_SINCE    : u32 : 1;


#scope_module
blur_protocol_init :: () {
    blur_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_blur_manager::create */
        *org_kde_kwin_blur_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: org_kde_kwin_blur_manager::unset */
        *wl_surface_interface,   // 3
        /* REQUEST: org_kde_kwin_blur::set_region */
        *wl_region_interface,   // 4
    ];

    org_kde_kwin_blur_manager_requests[0] = .{"create", "no", blur_types_storage.data + 1};
    org_kde_kwin_blur_manager_requests[1] = .{"unset", "o", blur_types_storage.data + 3};
    org_kde_kwin_blur_manager_interface = .{
        "org_kde_kwin_blur_manager", 1,
        org_kde_kwin_blur_manager_requests.count, org_kde_kwin_blur_manager_requests.data,
        0, null,
    };

    org_kde_kwin_blur_requests[0] = .{"commit", "", blur_types_storage.data + 0};
    org_kde_kwin_blur_requests[1] = .{"set_region", "?o", blur_types_storage.data + 4};
    org_kde_kwin_blur_requests[2] = .{"release", "", blur_types_storage.data + 0};
    org_kde_kwin_blur_interface = .{
        "org_kde_kwin_blur", 1,
        org_kde_kwin_blur_requests.count, org_kde_kwin_blur_requests.data,
        0, null,
    };
}


#scope_file
blur_types_storage: []*wl_interface;

org_kde_kwin_blur_manager_requests: [2]wl_message;

org_kde_kwin_blur_requests: [3]wl_message;

#assert size_of(org_kde_kwin_blur_manager) == 0 "wayland-scanner bug: org_kde_kwin_blur_manager is non-empty";
#assert size_of(org_kde_kwin_blur) == 0 "wayland-scanner bug: org_kde_kwin_blur is non-empty";
