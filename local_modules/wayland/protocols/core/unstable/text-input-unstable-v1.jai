/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: text_input_unstable_v1
 */

zwp_text_input_v1 :: struct { #as _proxy: wl_proxy; }
zwp_text_input_v1_interface: wl_interface;

zwp_text_input_v1_content_hint_constants :: enum {
    content_hint_none                :: 0x0;
    content_hint_default             :: 0x7;
    content_hint_password            :: 0xc0;
    content_hint_auto_completion     :: 0x1;
    content_hint_auto_correction     :: 0x2;
    content_hint_auto_capitalization :: 0x4;
    content_hint_lowercase           :: 0x8;
    content_hint_uppercase           :: 0x10;
    content_hint_titlecase           :: 0x20;
    content_hint_hidden_text         :: 0x40;
    content_hint_sensitive_data      :: 0x80;
    content_hint_latin               :: 0x100;
    content_hint_multiline           :: 0x200;
}

zwp_text_input_v1_content_purpose_constants :: enum {
    content_purpose_normal   :: 0;
    content_purpose_alpha    :: 1;
    content_purpose_digits   :: 2;
    content_purpose_number   :: 3;
    content_purpose_phone    :: 4;
    content_purpose_url      :: 5;
    content_purpose_email    :: 6;
    content_purpose_name     :: 7;
    content_purpose_password :: 8;
    content_purpose_date     :: 9;
    content_purpose_time     :: 10;
    content_purpose_datetime :: 11;
    content_purpose_terminal :: 12;
}

zwp_text_input_v1_preedit_style_constants :: enum {
    preedit_style_default   :: 0;
    preedit_style_none      :: 1;
    preedit_style_active    :: 2;
    preedit_style_inactive  :: 3;
    preedit_style_highlight :: 4;
    preedit_style_underline :: 5;
    preedit_style_selection :: 6;
    preedit_style_incorrect :: 7;
}

zwp_text_input_v1_text_direction_constants :: enum {
    text_direction_auto :: 0;
    text_direction_ltr  :: 1;
    text_direction_rtl  :: 2;
}

zwp_text_input_v1_set_user_data :: inline (self: *zwp_text_input_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_text_input_v1_get_user_data :: inline (self: *zwp_text_input_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_text_input_v1_get_version :: (self: *zwp_text_input_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_text_input_v1_destroy :: inline (self: *zwp_text_input_v1) #c_call {
    wl_proxy_destroy(self);
}

zwp_text_input_v1_activate_req :: inline (self: *zwp_text_input_v1, seat: *wl_seat, surface: *wl_surface) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_ACTIVATE,
        null, wl_proxy_get_version(self), 0,
        seat, surface);
}

zwp_text_input_v1_deactivate_req :: inline (self: *zwp_text_input_v1, seat: *wl_seat) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_DEACTIVATE,
        null, wl_proxy_get_version(self), 0,
        seat);
}

zwp_text_input_v1_show_input_panel_req :: inline (self: *zwp_text_input_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_SHOW_INPUT_PANEL,
        null, wl_proxy_get_version(self), 0);
}

zwp_text_input_v1_hide_input_panel_req :: inline (self: *zwp_text_input_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_HIDE_INPUT_PANEL,
        null, wl_proxy_get_version(self), 0);
}

zwp_text_input_v1_reset_req :: inline (self: *zwp_text_input_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_RESET,
        null, wl_proxy_get_version(self), 0);
}

zwp_text_input_v1_set_surrounding_text_req :: inline (self: *zwp_text_input_v1, text: *u8, cursor: u32, anchor: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_SET_SURROUNDING_TEXT,
        null, wl_proxy_get_version(self), 0,
        text, cursor, anchor);
}

zwp_text_input_v1_set_content_type_req :: inline (self: *zwp_text_input_v1, hint: u32, purpose: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_SET_CONTENT_TYPE,
        null, wl_proxy_get_version(self), 0,
        hint, purpose);
}

zwp_text_input_v1_set_cursor_rectangle_req :: inline (self: *zwp_text_input_v1, x: s32, y: s32, width: s32, height: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_SET_CURSOR_RECTANGLE,
        null, wl_proxy_get_version(self), 0,
        x, y, width, height);
}

zwp_text_input_v1_set_preferred_language_req :: inline (self: *zwp_text_input_v1, language: *u8) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_SET_PREFERRED_LANGUAGE,
        null, wl_proxy_get_version(self), 0,
        language);
}

zwp_text_input_v1_commit_state_req :: inline (self: *zwp_text_input_v1, serial: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_COMMIT_STATE,
        null, wl_proxy_get_version(self), 0,
        serial);
}

zwp_text_input_v1_invoke_action_req :: inline (self: *zwp_text_input_v1, button: u32, index: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_V1_INVOKE_ACTION,
        null, wl_proxy_get_version(self), 0,
        button, index);
}

zwp_text_input_v1_add_listener :: inline (self: *zwp_text_input_v1, listener: *zwp_text_input_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ZWP_TEXT_INPUT_V1_ACTIVATE                      : u32 : 0;
ZWP_TEXT_INPUT_V1_DEACTIVATE                    : u32 : 1;
ZWP_TEXT_INPUT_V1_SHOW_INPUT_PANEL              : u32 : 2;
ZWP_TEXT_INPUT_V1_HIDE_INPUT_PANEL              : u32 : 3;
ZWP_TEXT_INPUT_V1_RESET                         : u32 : 4;
ZWP_TEXT_INPUT_V1_SET_SURROUNDING_TEXT          : u32 : 5;
ZWP_TEXT_INPUT_V1_SET_CONTENT_TYPE              : u32 : 6;
ZWP_TEXT_INPUT_V1_SET_CURSOR_RECTANGLE          : u32 : 7;
ZWP_TEXT_INPUT_V1_SET_PREFERRED_LANGUAGE        : u32 : 8;
ZWP_TEXT_INPUT_V1_COMMIT_STATE                  : u32 : 9;
ZWP_TEXT_INPUT_V1_INVOKE_ACTION                 : u32 : 10;
ZWP_TEXT_INPUT_V1_ACTIVATE_SINCE                : u32 : 1;
ZWP_TEXT_INPUT_V1_DEACTIVATE_SINCE              : u32 : 1;
ZWP_TEXT_INPUT_V1_SHOW_INPUT_PANEL_SINCE        : u32 : 1;
ZWP_TEXT_INPUT_V1_HIDE_INPUT_PANEL_SINCE        : u32 : 1;
ZWP_TEXT_INPUT_V1_RESET_SINCE                   : u32 : 1;
ZWP_TEXT_INPUT_V1_SET_SURROUNDING_TEXT_SINCE    : u32 : 1;
ZWP_TEXT_INPUT_V1_SET_CONTENT_TYPE_SINCE        : u32 : 1;
ZWP_TEXT_INPUT_V1_SET_CURSOR_RECTANGLE_SINCE    : u32 : 1;
ZWP_TEXT_INPUT_V1_SET_PREFERRED_LANGUAGE_SINCE  : u32 : 1;
ZWP_TEXT_INPUT_V1_COMMIT_STATE_SINCE            : u32 : 1;
ZWP_TEXT_INPUT_V1_INVOKE_ACTION_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V1_ENTER_SINCE                   : u32 : 1;
ZWP_TEXT_INPUT_V1_LEAVE_SINCE                   : u32 : 1;
ZWP_TEXT_INPUT_V1_MODIFIERS_MAP_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V1_INPUT_PANEL_STATE_SINCE       : u32 : 1;
ZWP_TEXT_INPUT_V1_PREEDIT_STRING_SINCE          : u32 : 1;
ZWP_TEXT_INPUT_V1_PREEDIT_STYLING_SINCE         : u32 : 1;
ZWP_TEXT_INPUT_V1_PREEDIT_CURSOR_SINCE          : u32 : 1;
ZWP_TEXT_INPUT_V1_COMMIT_STRING_SINCE           : u32 : 1;
ZWP_TEXT_INPUT_V1_CURSOR_POSITION_SINCE         : u32 : 1;
ZWP_TEXT_INPUT_V1_DELETE_SURROUNDING_TEXT_SINCE : u32 : 1;
ZWP_TEXT_INPUT_V1_KEYSYM_SINCE                  : u32 : 1;
ZWP_TEXT_INPUT_V1_LANGUAGE_SINCE                : u32 : 1;
ZWP_TEXT_INPUT_V1_TEXT_DIRECTION_SINCE          : u32 : 1;

zwp_text_input_v1_listener :: struct {
    enter: #type (data: *void,
        self: *zwp_text_input_v1,
        surface: wl_surface) -> void #c_call;
    leave: #type (data: *void,
        self: *zwp_text_input_v1) -> void #c_call;
    modifiers_map: #type (data: *void,
        self: *zwp_text_input_v1,
        map: *wl_array) -> void #c_call;
    input_panel_state: #type (data: *void,
        self: *zwp_text_input_v1,
        state: u32) -> void #c_call;
    preedit_string: #type (data: *void,
        self: *zwp_text_input_v1,
        serial: u32,
        text: *u8,
        commit: *u8) -> void #c_call;
    preedit_styling: #type (data: *void,
        self: *zwp_text_input_v1,
        index: u32,
        length: u32,
        style: u32) -> void #c_call;
    preedit_cursor: #type (data: *void,
        self: *zwp_text_input_v1,
        index: s32) -> void #c_call;
    commit_string: #type (data: *void,
        self: *zwp_text_input_v1,
        serial: u32,
        text: *u8) -> void #c_call;
    cursor_position: #type (data: *void,
        self: *zwp_text_input_v1,
        index: s32,
        anchor: s32) -> void #c_call;
    delete_surrounding_text: #type (data: *void,
        self: *zwp_text_input_v1,
        index: s32,
        length: u32) -> void #c_call;
    keysym: #type (data: *void,
        self: *zwp_text_input_v1,
        serial: u32,
        time: u32,
        sym: u32,
        state: u32,
        modifiers: u32) -> void #c_call;
    language: #type (data: *void,
        self: *zwp_text_input_v1,
        serial: u32,
        language: *u8) -> void #c_call;
    text_direction: #type (data: *void,
        self: *zwp_text_input_v1,
        serial: u32,
        direction: u32) -> void #c_call;
}

zwp_text_input_manager_v1 :: struct { #as _proxy: wl_proxy; }
zwp_text_input_manager_v1_interface: wl_interface;

zwp_text_input_manager_v1_set_user_data :: inline (self: *zwp_text_input_manager_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_text_input_manager_v1_get_user_data :: inline (self: *zwp_text_input_manager_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_text_input_manager_v1_get_version :: (self: *zwp_text_input_manager_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_text_input_manager_v1_destroy :: inline (self: *zwp_text_input_manager_v1) #c_call {
    wl_proxy_destroy(self);
}

zwp_text_input_manager_v1_create_text_input_req :: inline (self: *zwp_text_input_manager_v1) -> *zwp_text_input_v1 #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ZWP_TEXT_INPUT_MANAGER_V1_CREATE_TEXT_INPUT,
        *zwp_text_input_v1_interface, wl_proxy_get_version(self), 0,
        null);
    return cast(*zwp_text_input_v1) ret;
}

#scope_module
text_input_unstable_v1_protocol_init :: () {
    text_input_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_text_input_v1::activate */
        *wl_seat_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: zwp_text_input_v1::deactivate */
        *wl_seat_interface,   // 3
        /* REQUEST: zwp_text_input_v1::set_surrounding_text */
        null,  // 4
        null,  // 5
        null,  // 6
        /* REQUEST: zwp_text_input_v1::set_content_type */
        null,  // 7
        null,  // 8
        /* REQUEST: zwp_text_input_v1::set_cursor_rectangle */
        null,  // 9
        null,  // 10
        null,  // 11
        null,  // 12
        /* REQUEST: zwp_text_input_v1::set_preferred_language */
        null,  // 13
        /* REQUEST: zwp_text_input_v1::commit_state */
        null,  // 14
        /* REQUEST: zwp_text_input_v1::invoke_action */
        null,  // 15
        null,  // 16
        /* EVENT: zwp_text_input_v1::enter */
        *wl_surface_interface,  // 17
        /* EVENT: zwp_text_input_v1::modifiers_map */
        null,  // 18
        /* EVENT: zwp_text_input_v1::input_panel_state */
        null,  // 19
        /* EVENT: zwp_text_input_v1::preedit_string */
        null,  // 20
        null,  // 21
        null,  // 22
        /* EVENT: zwp_text_input_v1::preedit_styling */
        null,  // 23
        null,  // 24
        null,  // 25
        /* EVENT: zwp_text_input_v1::preedit_cursor */
        null,  // 26
        /* EVENT: zwp_text_input_v1::commit_string */
        null,  // 27
        null,  // 28
        /* EVENT: zwp_text_input_v1::cursor_position */
        null,  // 29
        null,  // 30
        /* EVENT: zwp_text_input_v1::delete_surrounding_text */
        null,  // 31
        null,  // 32
        /* EVENT: zwp_text_input_v1::keysym */
        null,  // 33
        null,  // 34
        null,  // 35
        null,  // 36
        null,  // 37
        /* EVENT: zwp_text_input_v1::language */
        null,  // 38
        null,  // 39
        /* EVENT: zwp_text_input_v1::text_direction */
        null,  // 40
        null,  // 41
        /* REQUEST: zwp_text_input_manager_v1::create_text_input */
        *zwp_text_input_v1_interface,   // 42
    ];

    zwp_text_input_v1_requests[0] = .{"activate", "oo", text_input_unstable_v1_types_storage.data + 0};
    zwp_text_input_v1_requests[1] = .{"deactivate", "o", text_input_unstable_v1_types_storage.data + 1};
    zwp_text_input_v1_requests[2] = .{"show_input_panel", "", text_input_unstable_v1_types_storage.data + 0};
    zwp_text_input_v1_requests[3] = .{"hide_input_panel", "", text_input_unstable_v1_types_storage.data + 0};
    zwp_text_input_v1_requests[4] = .{"reset", "", text_input_unstable_v1_types_storage.data + 0};
    zwp_text_input_v1_requests[5] = .{"set_surrounding_text", "suu", text_input_unstable_v1_types_storage.data + 3};
    zwp_text_input_v1_requests[6] = .{"set_content_type", "uu", text_input_unstable_v1_types_storage.data + 4};
    zwp_text_input_v1_requests[7] = .{"set_cursor_rectangle", "iiii", text_input_unstable_v1_types_storage.data + 7};
    zwp_text_input_v1_requests[8] = .{"set_preferred_language", "s", text_input_unstable_v1_types_storage.data + 9};
    zwp_text_input_v1_requests[9] = .{"commit_state", "u", text_input_unstable_v1_types_storage.data + 13};
    zwp_text_input_v1_requests[10] = .{"invoke_action", "uu", text_input_unstable_v1_types_storage.data + 14};
    zwp_text_input_v1_events[0] = .{"enter", "o", text_input_unstable_v1_types_storage.data + 15};
    zwp_text_input_v1_events[1] = .{"leave", "", text_input_unstable_v1_types_storage.data + 0};
    zwp_text_input_v1_events[2] = .{"modifiers_map", "a", text_input_unstable_v1_types_storage.data + 17};
    zwp_text_input_v1_events[3] = .{"input_panel_state", "u", text_input_unstable_v1_types_storage.data + 18};
    zwp_text_input_v1_events[4] = .{"preedit_string", "uss", text_input_unstable_v1_types_storage.data + 19};
    zwp_text_input_v1_events[5] = .{"preedit_styling", "uuu", text_input_unstable_v1_types_storage.data + 20};
    zwp_text_input_v1_events[6] = .{"preedit_cursor", "i", text_input_unstable_v1_types_storage.data + 23};
    zwp_text_input_v1_events[7] = .{"commit_string", "us", text_input_unstable_v1_types_storage.data + 26};
    zwp_text_input_v1_events[8] = .{"cursor_position", "ii", text_input_unstable_v1_types_storage.data + 27};
    zwp_text_input_v1_events[9] = .{"delete_surrounding_text", "iu", text_input_unstable_v1_types_storage.data + 29};
    zwp_text_input_v1_events[10] = .{"keysym", "uuuuu", text_input_unstable_v1_types_storage.data + 31};
    zwp_text_input_v1_events[11] = .{"language", "us", text_input_unstable_v1_types_storage.data + 33};
    zwp_text_input_v1_events[12] = .{"text_direction", "uu", text_input_unstable_v1_types_storage.data + 38};
    zwp_text_input_v1_interface = .{
        "zwp_text_input_v1", 1,
        zwp_text_input_v1_requests.count, zwp_text_input_v1_requests.data,
        zwp_text_input_v1_events.count, zwp_text_input_v1_events.data,
    };

    zwp_text_input_manager_v1_requests[0] = .{"create_text_input", "n", text_input_unstable_v1_types_storage.data + 40};
    zwp_text_input_manager_v1_interface = .{
        "zwp_text_input_manager_v1", 1,
        zwp_text_input_manager_v1_requests.count, zwp_text_input_manager_v1_requests.data,
        0, null,
    };
}

#scope_file
text_input_unstable_v1_types_storage: []*wl_interface;

zwp_text_input_v1_requests: [11]wl_message;
zwp_text_input_v1_events  : [13]wl_message;

zwp_text_input_manager_v1_requests: [1]wl_message;
