/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: fullscreen_shell_unstable_v1
 */

zwp_fullscreen_shell_v1 :: struct { #as _proxy: wl_proxy; }
zwp_fullscreen_shell_v1_interface: wl_interface;

zwp_fullscreen_shell_v1_capability_constants :: enum {
    capability_arbitrary_modes :: 1;
    capability_cursor_plane    :: 2;
}

zwp_fullscreen_shell_v1_present_method_constants :: enum {
    present_method_default   :: 0;
    present_method_center    :: 1;
    present_method_zoom      :: 2;
    present_method_zoom_crop :: 3;
    present_method_stretch   :: 4;
}

zwp_fullscreen_shell_v1_error_constants :: enum {
    error_invalid_method :: 0;
    error_role           :: 1;
}

zwp_fullscreen_shell_v1_set_user_data :: inline (self: *zwp_fullscreen_shell_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_fullscreen_shell_v1_get_user_data :: inline (self: *zwp_fullscreen_shell_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_fullscreen_shell_v1_get_version :: (self: *zwp_fullscreen_shell_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_fullscreen_shell_v1_destroy :: inline (self: *zwp_fullscreen_shell_v1) #c_call {
    wl_proxy_destroy(self);
}

zwp_fullscreen_shell_v1_release_req :: inline (self: *zwp_fullscreen_shell_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_FULLSCREEN_SHELL_V1_RELEASE,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

zwp_fullscreen_shell_v1_present_surface_req :: inline (self: *zwp_fullscreen_shell_v1, surface: *wl_surface, method: u32, output: *wl_output) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE,
        null, wl_proxy_get_version(self), 0,
        surface, method, output);
}

zwp_fullscreen_shell_v1_present_surface_for_mode_req :: inline (self: *zwp_fullscreen_shell_v1, surface: *wl_surface, output: *wl_output, framerate: s32) -> *zwp_fullscreen_shell_mode_feedback_v1 #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_FOR_MODE,
        *zwp_fullscreen_shell_mode_feedback_v1_interface, wl_proxy_get_version(self), 0,
        surface, output, framerate, null);
    return cast(*zwp_fullscreen_shell_mode_feedback_v1) ret;
}

zwp_fullscreen_shell_v1_add_listener :: inline (self: *zwp_fullscreen_shell_v1, listener: *zwp_fullscreen_shell_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ZWP_FULLSCREEN_SHELL_V1_RELEASE                        : u32 : 0;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE                : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_FOR_MODE       : u32 : 2;
ZWP_FULLSCREEN_SHELL_V1_RELEASE_SINCE                  : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_SINCE          : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_PRESENT_SURFACE_FOR_MODE_SINCE : u32 : 1;
ZWP_FULLSCREEN_SHELL_V1_CAPABILITY_SINCE               : u32 : 1;

zwp_fullscreen_shell_v1_listener :: struct {
    capability: #type (data: *void,
        self: *zwp_fullscreen_shell_v1,
        capability: u32) -> void #c_call;
}

zwp_fullscreen_shell_mode_feedback_v1 :: struct { #as _proxy: wl_proxy; }
zwp_fullscreen_shell_mode_feedback_v1_interface: wl_interface;

zwp_fullscreen_shell_mode_feedback_v1_set_user_data :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_fullscreen_shell_mode_feedback_v1_get_user_data :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_fullscreen_shell_mode_feedback_v1_get_version :: (self: *zwp_fullscreen_shell_mode_feedback_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_fullscreen_shell_mode_feedback_v1_destroy :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1) #c_call {
    wl_proxy_destroy(self);
}

zwp_fullscreen_shell_mode_feedback_v1_add_listener :: inline (self: *zwp_fullscreen_shell_mode_feedback_v1, listener: *zwp_fullscreen_shell_mode_feedback_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ZWP_FULLSCREEN_SHELL_MODE_FEEDBACK_V1_MODE_SUCCESSFUL_SINCE   : u32 : 1;
ZWP_FULLSCREEN_SHELL_MODE_FEEDBACK_V1_MODE_FAILED_SINCE       : u32 : 1;
ZWP_FULLSCREEN_SHELL_MODE_FEEDBACK_V1_PRESENT_CANCELLED_SINCE : u32 : 1;

zwp_fullscreen_shell_mode_feedback_v1_listener :: struct {
    mode_successful: #type (data: *void,
        self: *zwp_fullscreen_shell_mode_feedback_v1) -> void #c_call;
    mode_failed: #type (data: *void,
        self: *zwp_fullscreen_shell_mode_feedback_v1) -> void #c_call;
    present_cancelled: #type (data: *void,
        self: *zwp_fullscreen_shell_mode_feedback_v1) -> void #c_call;
}


#scope_module
fullscreen_shell_unstable_v1_protocol_init :: () {
    fullscreen_shell_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_fullscreen_shell_v1::present_surface */
        *wl_surface_interface,   // 1
        null,  // 2
        *wl_output_interface,   // 3
        /* REQUEST: zwp_fullscreen_shell_v1::present_surface_for_mode */
        *wl_surface_interface,   // 4
        *wl_output_interface,   // 5
        null,  // 6
        *zwp_fullscreen_shell_mode_feedback_v1_interface,   // 7
        /* EVENT: zwp_fullscreen_shell_v1::capability */
        null,  // 8
    ];

    zwp_fullscreen_shell_v1_requests[0] = .{"release", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_v1_requests[1] = .{"present_surface", "ouo", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_v1_requests[2] = .{"present_surface_for_mode", "ooin", fullscreen_shell_unstable_v1_types_storage.data + 1};
    zwp_fullscreen_shell_v1_events[0] = .{"capability", "u", fullscreen_shell_unstable_v1_types_storage.data + 4};
    zwp_fullscreen_shell_v1_interface = .{
        "zwp_fullscreen_shell_v1", 1,
        zwp_fullscreen_shell_v1_requests.count, zwp_fullscreen_shell_v1_requests.data,
        zwp_fullscreen_shell_v1_events.count, zwp_fullscreen_shell_v1_events.data,
    };

    zwp_fullscreen_shell_mode_feedback_v1_events[0] = .{"mode_successful", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_mode_feedback_v1_events[1] = .{"mode_failed", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_mode_feedback_v1_events[2] = .{"present_cancelled", "", fullscreen_shell_unstable_v1_types_storage.data + 0};
    zwp_fullscreen_shell_mode_feedback_v1_interface = .{
        "zwp_fullscreen_shell_mode_feedback_v1", 1,
        0, null,
        zwp_fullscreen_shell_mode_feedback_v1_events.count, zwp_fullscreen_shell_mode_feedback_v1_events.data,
    };
}

#scope_file
fullscreen_shell_unstable_v1_types_storage: []*wl_interface;

zwp_fullscreen_shell_v1_requests: [3]wl_message;
zwp_fullscreen_shell_v1_events  : [1]wl_message;

zwp_fullscreen_shell_mode_feedback_v1_events  : [3]wl_message;
