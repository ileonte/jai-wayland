/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: tablet_unstable_v1
 */

zwp_tablet_manager_v1 :: struct { #as _proxy: wl_proxy; }
zwp_tablet_manager_v1_interface: wl_interface;

zwp_tablet_manager_v1_set_user_data :: inline (self: *zwp_tablet_manager_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_tablet_manager_v1_get_user_data :: inline (self: *zwp_tablet_manager_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_tablet_manager_v1_get_version :: (self: *zwp_tablet_manager_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_tablet_manager_v1_get_tablet_seat_req :: inline (self: *zwp_tablet_manager_v1, seat: *wl_seat) -> *zwp_tablet_seat_v1 #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT,
        *zwp_tablet_seat_v1_interface, wl_proxy_get_version(self), 0,
        null, seat);
    return cast(*zwp_tablet_seat_v1) ret;
}

zwp_tablet_manager_v1_destroy_req :: inline (self: *zwp_tablet_manager_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TABLET_MANAGER_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

zwp_tablet_seat_v1 :: struct { #as _proxy: wl_proxy; }
zwp_tablet_seat_v1_interface: wl_interface;

zwp_tablet_seat_v1_set_user_data :: inline (self: *zwp_tablet_seat_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_tablet_seat_v1_get_user_data :: inline (self: *zwp_tablet_seat_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_tablet_seat_v1_get_version :: (self: *zwp_tablet_seat_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_tablet_seat_v1_destroy_req :: inline (self: *zwp_tablet_seat_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TABLET_SEAT_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

zwp_tablet_seat_v1_add_listener :: inline (self: *zwp_tablet_seat_v1, listener: *zwp_tablet_seat_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ZWP_TABLET_SEAT_V1_DESTROY            : u32 : 0;
ZWP_TABLET_SEAT_V1_DESTROY_SINCE      : u32 : 1;
ZWP_TABLET_SEAT_V1_TABLET_ADDED_SINCE : u32 : 1;
ZWP_TABLET_SEAT_V1_TOOL_ADDED_SINCE   : u32 : 1;

zwp_tablet_seat_v1_listener :: struct {
    tablet_added: #type (data: *void,
        self: *zwp_tablet_seat_v1,
        id: *zwp_tablet_v1) -> void #c_call;
    tool_added: #type (data: *void,
        self: *zwp_tablet_seat_v1,
        id: *zwp_tablet_tool_v1) -> void #c_call;
}

zwp_tablet_tool_v1 :: struct { #as _proxy: wl_proxy; }
zwp_tablet_tool_v1_interface: wl_interface;

zwp_tablet_tool_v1_type_constants :: enum {
    type_pen      :: 0x140;
    type_eraser   :: 0x141;
    type_brush    :: 0x142;
    type_pencil   :: 0x143;
    type_airbrush :: 0x144;
    type_finger   :: 0x145;
    type_mouse    :: 0x146;
    type_lens     :: 0x147;
}

zwp_tablet_tool_v1_capability_constants :: enum {
    capability_tilt     :: 1;
    capability_pressure :: 2;
    capability_distance :: 3;
    capability_rotation :: 4;
    capability_slider   :: 5;
    capability_wheel    :: 6;
}

zwp_tablet_tool_v1_button_state_constants :: enum {
    button_state_released :: 0;
    button_state_pressed  :: 1;
}

zwp_tablet_tool_v1_error_constants :: enum {
    error_role :: 0;
}

zwp_tablet_tool_v1_set_user_data :: inline (self: *zwp_tablet_tool_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_tablet_tool_v1_get_user_data :: inline (self: *zwp_tablet_tool_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_tablet_tool_v1_get_version :: (self: *zwp_tablet_tool_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_tablet_tool_v1_set_cursor_req :: inline (self: *zwp_tablet_tool_v1, serial: u32, surface: *wl_surface, hotspot_x: s32, hotspot_y: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TABLET_TOOL_V1_SET_CURSOR,
        null, wl_proxy_get_version(self), 0,
        serial, surface, hotspot_x, hotspot_y);
}

zwp_tablet_tool_v1_destroy_req :: inline (self: *zwp_tablet_tool_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TABLET_TOOL_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

zwp_tablet_tool_v1_add_listener :: inline (self: *zwp_tablet_tool_v1, listener: *zwp_tablet_tool_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ZWP_TABLET_TOOL_V1_SET_CURSOR              : u32 : 0;
ZWP_TABLET_TOOL_V1_DESTROY                 : u32 : 1;
ZWP_TABLET_TOOL_V1_SET_CURSOR_SINCE        : u32 : 1;
ZWP_TABLET_TOOL_V1_DESTROY_SINCE           : u32 : 1;
ZWP_TABLET_TOOL_V1_TYPE_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_HARDWARE_SERIAL_SINCE   : u32 : 1;
ZWP_TABLET_TOOL_V1_HARDWARE_ID_WACOM_SINCE : u32 : 1;
ZWP_TABLET_TOOL_V1_CAPABILITY_SINCE        : u32 : 1;
ZWP_TABLET_TOOL_V1_DONE_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_REMOVED_SINCE           : u32 : 1;
ZWP_TABLET_TOOL_V1_PROXIMITY_IN_SINCE      : u32 : 1;
ZWP_TABLET_TOOL_V1_PROXIMITY_OUT_SINCE     : u32 : 1;
ZWP_TABLET_TOOL_V1_DOWN_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_UP_SINCE                : u32 : 1;
ZWP_TABLET_TOOL_V1_MOTION_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V1_PRESSURE_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V1_DISTANCE_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V1_TILT_SINCE              : u32 : 1;
ZWP_TABLET_TOOL_V1_ROTATION_SINCE          : u32 : 1;
ZWP_TABLET_TOOL_V1_SLIDER_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V1_WHEEL_SINCE             : u32 : 1;
ZWP_TABLET_TOOL_V1_BUTTON_SINCE            : u32 : 1;
ZWP_TABLET_TOOL_V1_FRAME_SINCE             : u32 : 1;

zwp_tablet_tool_v1_listener :: struct {
    type: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        tool_type: u32) -> void #c_call;
    hardware_serial: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        hardware_serial_hi: u32,
        hardware_serial_lo: u32) -> void #c_call;
    hardware_id_wacom: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        hardware_id_hi: u32,
        hardware_id_lo: u32) -> void #c_call;
    capability: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        capability: u32) -> void #c_call;
    done: #type (data: *void,
        self: *zwp_tablet_tool_v1) -> void #c_call;
    removed: #type (data: *void,
        self: *zwp_tablet_tool_v1) -> void #c_call;
    proximity_in: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        serial: u32,
        tablet: zwp_tablet_v1,
        surface: wl_surface) -> void #c_call;
    proximity_out: #type (data: *void,
        self: *zwp_tablet_tool_v1) -> void #c_call;
    down: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        serial: u32) -> void #c_call;
    up: #type (data: *void,
        self: *zwp_tablet_tool_v1) -> void #c_call;
    motion: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        x: wl_fixed_t,
        y: wl_fixed_t) -> void #c_call;
    pressure: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        pressure: u32) -> void #c_call;
    distance: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        distance: u32) -> void #c_call;
    tilt: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        tilt_x: s32,
        tilt_y: s32) -> void #c_call;
    rotation: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        degrees: s32) -> void #c_call;
    slider: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        position: s32) -> void #c_call;
    wheel: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        degrees: s32,
        clicks: s32) -> void #c_call;
    button: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        serial: u32,
        button: u32,
        state: u32) -> void #c_call;
    frame: #type (data: *void,
        self: *zwp_tablet_tool_v1,
        time: u32) -> void #c_call;
}

zwp_tablet_v1 :: struct { #as _proxy: wl_proxy; }
zwp_tablet_v1_interface: wl_interface;

zwp_tablet_v1_set_user_data :: inline (self: *zwp_tablet_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

zwp_tablet_v1_get_user_data :: inline (self: *zwp_tablet_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

zwp_tablet_v1_get_version :: (self: *zwp_tablet_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

zwp_tablet_v1_destroy_req :: inline (self: *zwp_tablet_v1) #c_call {
    wl_proxy_marshal_flags(
        self, ZWP_TABLET_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}
zwp_tablet_v1_add_listener :: inline (self: *zwp_tablet_v1, listener: *zwp_tablet_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ZWP_TABLET_V1_DESTROY       : u32 : 0;
ZWP_TABLET_V1_DESTROY_SINCE : u32 : 1;
ZWP_TABLET_V1_NAME_SINCE    : u32 : 1;
ZWP_TABLET_V1_ID_SINCE      : u32 : 1;
ZWP_TABLET_V1_PATH_SINCE    : u32 : 1;
ZWP_TABLET_V1_DONE_SINCE    : u32 : 1;
ZWP_TABLET_V1_REMOVED_SINCE : u32 : 1;

zwp_tablet_v1_listener :: struct {
    name: #type (data: *void,
        self: *zwp_tablet_v1,
        name: *u8) -> void #c_call;
    id: #type (data: *void,
        self: *zwp_tablet_v1,
        vid: u32,
        pid: u32) -> void #c_call;
    path: #type (data: *void,
        self: *zwp_tablet_v1,
        path: *u8) -> void #c_call;
    done: #type (data: *void,
        self: *zwp_tablet_v1) -> void #c_call;
    removed: #type (data: *void,
        self: *zwp_tablet_v1) -> void #c_call;
}


#scope_module
tablet_unstable_v1_protocol_init :: () {
    tablet_unstable_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: zwp_tablet_manager_v1::get_tablet_seat */
        *zwp_tablet_seat_v1_interface,   // 1
        *wl_seat_interface,   // 2
        /* EVENT: zwp_tablet_seat_v1::tablet_added */
        *zwp_tablet_v1_interface,  // 3
        /* EVENT: zwp_tablet_seat_v1::tool_added */
        *zwp_tablet_tool_v1_interface,  // 4
        /* REQUEST: zwp_tablet_tool_v1::set_cursor */
        null,  // 5
        *wl_surface_interface,   // 6
        null,  // 7
        null,  // 8
        /* EVENT: zwp_tablet_tool_v1::type */
        null,  // 9
        /* EVENT: zwp_tablet_tool_v1::hardware_serial */
        null,  // 10
        null,  // 11
        /* EVENT: zwp_tablet_tool_v1::hardware_id_wacom */
        null,  // 12
        null,  // 13
        /* EVENT: zwp_tablet_tool_v1::capability */
        null,  // 14
        /* EVENT: zwp_tablet_tool_v1::proximity_in */
        null,  // 15
        *zwp_tablet_v1_interface,  // 16
        *wl_surface_interface,  // 17
        /* EVENT: zwp_tablet_tool_v1::down */
        null,  // 18
        /* EVENT: zwp_tablet_tool_v1::motion */
        null,  // 19
        null,  // 20
        /* EVENT: zwp_tablet_tool_v1::pressure */
        null,  // 21
        /* EVENT: zwp_tablet_tool_v1::distance */
        null,  // 22
        /* EVENT: zwp_tablet_tool_v1::tilt */
        null,  // 23
        null,  // 24
        /* EVENT: zwp_tablet_tool_v1::rotation */
        null,  // 25
        /* EVENT: zwp_tablet_tool_v1::slider */
        null,  // 26
        /* EVENT: zwp_tablet_tool_v1::wheel */
        null,  // 27
        null,  // 28
        /* EVENT: zwp_tablet_tool_v1::button */
        null,  // 29
        null,  // 30
        null,  // 31
        /* EVENT: zwp_tablet_tool_v1::frame */
        null,  // 32
        /* EVENT: zwp_tablet_v1::name */
        null,  // 33
        /* EVENT: zwp_tablet_v1::id */
        null,  // 34
        null,  // 35
        /* EVENT: zwp_tablet_v1::path */
        null,  // 36
    ];

    zwp_tablet_manager_v1_requests[0] = .{"get_tablet_seat", "no", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_manager_v1_requests[1] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_manager_v1_interface = .{
        "zwp_tablet_manager_v1", 1,
        zwp_tablet_manager_v1_requests.count, zwp_tablet_manager_v1_requests.data,
        0, null,
    };

    zwp_tablet_seat_v1_requests[0] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_seat_v1_events[0] = .{"tablet_added", "n", tablet_unstable_v1_types_storage.data + 1};
    zwp_tablet_seat_v1_events[1] = .{"tool_added", "n", tablet_unstable_v1_types_storage.data + 3};
    zwp_tablet_seat_v1_interface = .{
        "zwp_tablet_seat_v1", 1,
        zwp_tablet_seat_v1_requests.count, zwp_tablet_seat_v1_requests.data,
        zwp_tablet_seat_v1_events.count, zwp_tablet_seat_v1_events.data,
    };

    zwp_tablet_tool_v1_requests[0] = .{"set_cursor", "uoii", tablet_unstable_v1_types_storage.data + 4};
    zwp_tablet_tool_v1_requests[1] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[0] = .{"type", "u", tablet_unstable_v1_types_storage.data + 5};
    zwp_tablet_tool_v1_events[1] = .{"hardware_serial", "uu", tablet_unstable_v1_types_storage.data + 9};
    zwp_tablet_tool_v1_events[2] = .{"hardware_id_wacom", "uu", tablet_unstable_v1_types_storage.data + 10};
    zwp_tablet_tool_v1_events[3] = .{"capability", "u", tablet_unstable_v1_types_storage.data + 12};
    zwp_tablet_tool_v1_events[4] = .{"done", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[5] = .{"removed", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[6] = .{"proximity_in", "uoo", tablet_unstable_v1_types_storage.data + 14};
    zwp_tablet_tool_v1_events[7] = .{"proximity_out", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[8] = .{"down", "u", tablet_unstable_v1_types_storage.data + 15};
    zwp_tablet_tool_v1_events[9] = .{"up", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_tool_v1_events[10] = .{"motion", "ff", tablet_unstable_v1_types_storage.data + 18};
    zwp_tablet_tool_v1_events[11] = .{"pressure", "u", tablet_unstable_v1_types_storage.data + 19};
    zwp_tablet_tool_v1_events[12] = .{"distance", "u", tablet_unstable_v1_types_storage.data + 21};
    zwp_tablet_tool_v1_events[13] = .{"tilt", "ii", tablet_unstable_v1_types_storage.data + 22};
    zwp_tablet_tool_v1_events[14] = .{"rotation", "i", tablet_unstable_v1_types_storage.data + 23};
    zwp_tablet_tool_v1_events[15] = .{"slider", "i", tablet_unstable_v1_types_storage.data + 25};
    zwp_tablet_tool_v1_events[16] = .{"wheel", "ii", tablet_unstable_v1_types_storage.data + 26};
    zwp_tablet_tool_v1_events[17] = .{"button", "uuu", tablet_unstable_v1_types_storage.data + 27};
    zwp_tablet_tool_v1_events[18] = .{"frame", "u", tablet_unstable_v1_types_storage.data + 29};
    zwp_tablet_tool_v1_interface = .{
        "zwp_tablet_tool_v1", 1,
        zwp_tablet_tool_v1_requests.count, zwp_tablet_tool_v1_requests.data,
        zwp_tablet_tool_v1_events.count, zwp_tablet_tool_v1_events.data,
    };

    zwp_tablet_v1_requests[0] = .{"destroy", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_v1_events[0] = .{"name", "s", tablet_unstable_v1_types_storage.data + 32};
    zwp_tablet_v1_events[1] = .{"id", "uu", tablet_unstable_v1_types_storage.data + 33};
    zwp_tablet_v1_events[2] = .{"path", "s", tablet_unstable_v1_types_storage.data + 34};
    zwp_tablet_v1_events[3] = .{"done", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_v1_events[4] = .{"removed", "", tablet_unstable_v1_types_storage.data + 0};
    zwp_tablet_v1_interface = .{
        "zwp_tablet_v1", 1,
        zwp_tablet_v1_requests.count, zwp_tablet_v1_requests.data,
        zwp_tablet_v1_events.count, zwp_tablet_v1_events.data,
    };
}

#scope_file
tablet_unstable_v1_types_storage: []*wl_interface;

zwp_tablet_manager_v1_requests: [2]wl_message;

zwp_tablet_seat_v1_requests: [1]wl_message;
zwp_tablet_seat_v1_events  : [2]wl_message;

zwp_tablet_tool_v1_requests: [2]wl_message;
zwp_tablet_tool_v1_events  : [19]wl_message;

zwp_tablet_v1_requests: [1]wl_message;
zwp_tablet_v1_events  : [5]wl_message;
