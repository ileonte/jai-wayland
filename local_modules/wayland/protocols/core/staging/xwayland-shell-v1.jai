/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: xwayland_shell_v1
 */

xwayland_shell_v1 :: struct { #as _proxy: wl_proxy; }
xwayland_shell_v1_interface: wl_interface;

xwayland_shell_v1_error_constants :: enum {
    error_role :: 0;
}

xwayland_shell_v1_set_user_data :: inline (self: *xwayland_shell_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

xwayland_shell_v1_get_user_data :: inline (self: *xwayland_shell_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

xwayland_shell_v1_get_version :: (self: *xwayland_shell_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

xwayland_shell_v1_destroy_req :: inline (self: *xwayland_shell_v1) #c_call {
    wl_proxy_marshal_flags(
        self, XWAYLAND_SHELL_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

xwayland_shell_v1_get_xwayland_surface_req :: inline (self: *xwayland_shell_v1, surface: *wl_surface) -> *xwayland_surface_v1 #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, XWAYLAND_SHELL_V1_GET_XWAYLAND_SURFACE,
        *xwayland_surface_v1_interface, wl_proxy_get_version(self), 0,
        null, surface);
    return cast(*xwayland_surface_v1) ret;
}

xwayland_surface_v1 :: struct { #as _proxy: wl_proxy; }
xwayland_surface_v1_interface: wl_interface;

xwayland_surface_v1_error_constants :: enum {
    error_already_associated :: 0;
    error_invalid_serial     :: 1;
}

xwayland_surface_v1_set_user_data :: inline (self: *xwayland_surface_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

xwayland_surface_v1_get_user_data :: inline (self: *xwayland_surface_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

xwayland_surface_v1_get_version :: (self: *xwayland_surface_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

xwayland_surface_v1_set_serial_req :: inline (self: *xwayland_surface_v1, serial_lo: u32, serial_hi: u32) #c_call {
    wl_proxy_marshal_flags(
        self, XWAYLAND_SURFACE_V1_SET_SERIAL,
        null, wl_proxy_get_version(self), 0,
        serial_lo, serial_hi);
}

xwayland_surface_v1_destroy_req :: inline (self: *xwayland_surface_v1) #c_call {
    wl_proxy_marshal_flags(
        self, XWAYLAND_SURFACE_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

#scope_module
xwayland_shell_v1_protocol_init :: () {
    xwayland_shell_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: xwayland_shell_v1::get_xwayland_surface */
        *xwayland_surface_v1_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: xwayland_surface_v1::set_serial */
        null,  // 3
        null,  // 4
    ];

    xwayland_shell_v1_requests[0] = .{"destroy", "", xwayland_shell_v1_types_storage.data + 0};
    xwayland_shell_v1_requests[1] = .{"get_xwayland_surface", "no", xwayland_shell_v1_types_storage.data + 0};
    xwayland_shell_v1_interface = .{
        "xwayland_shell_v1", 1,
        xwayland_shell_v1_requests.count, xwayland_shell_v1_requests.data,
        0, null,
    };

    xwayland_surface_v1_requests[0] = .{"set_serial", "uu", xwayland_shell_v1_types_storage.data + 1};
    xwayland_surface_v1_requests[1] = .{"destroy", "", xwayland_shell_v1_types_storage.data + 0};
    xwayland_surface_v1_interface = .{
        "xwayland_surface_v1", 1,
        xwayland_surface_v1_requests.count, xwayland_surface_v1_requests.data,
        0, null,
    };
}

#scope_file
xwayland_shell_v1_types_storage: []*wl_interface;

xwayland_shell_v1_requests: [2]wl_message;

xwayland_surface_v1_requests: [2]wl_message;
