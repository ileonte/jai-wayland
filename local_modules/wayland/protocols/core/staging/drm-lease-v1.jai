/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: drm_lease_v1
 */

wp_drm_lease_device_v1 :: struct { #as _proxy: wl_proxy; }
wp_drm_lease_device_v1_interface: wl_interface;

wp_drm_lease_device_v1_set_user_data :: inline (self: *wp_drm_lease_device_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

wp_drm_lease_device_v1_get_user_data :: inline (self: *wp_drm_lease_device_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

wp_drm_lease_device_v1_get_version :: (self: *wp_drm_lease_device_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

wp_drm_lease_device_v1_destroy :: inline (self: *wp_drm_lease_device_v1) #c_call {
    wl_proxy_destroy(self);
}

wp_drm_lease_device_v1_create_lease_request_req :: inline (self: *wp_drm_lease_device_v1) -> *wp_drm_lease_request_v1 #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, WP_DRM_LEASE_DEVICE_V1_CREATE_LEASE_REQUEST,
        *wp_drm_lease_request_v1_interface, wl_proxy_get_version(self), 0,
        null);
    return cast(*wp_drm_lease_request_v1) ret;
}

wp_drm_lease_device_v1_release_req :: inline (self: *wp_drm_lease_device_v1) #c_call {
    wl_proxy_marshal_flags(
        self, WP_DRM_LEASE_DEVICE_V1_RELEASE,
        null, wl_proxy_get_version(self), 0);
}

wp_drm_lease_device_v1_add_listener :: inline (self: *wp_drm_lease_device_v1, listener: *wp_drm_lease_device_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

WP_DRM_LEASE_DEVICE_V1_CREATE_LEASE_REQUEST       : u32 : 0;
WP_DRM_LEASE_DEVICE_V1_RELEASE                    : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_CREATE_LEASE_REQUEST_SINCE : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_RELEASE_SINCE              : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_DRM_FD_SINCE               : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_CONNECTOR_SINCE            : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_DONE_SINCE                 : u32 : 1;
WP_DRM_LEASE_DEVICE_V1_RELEASED_SINCE             : u32 : 1;

wp_drm_lease_device_v1_listener :: struct {
    drm_fd: #type (data: *void,
        self: *wp_drm_lease_device_v1,
        fd: s32) -> void #c_call;
    connector: #type (data: *void,
        self: *wp_drm_lease_device_v1,
        id: *wp_drm_lease_connector_v1) -> void #c_call;
    done: #type (data: *void,
        self: *wp_drm_lease_device_v1) -> void #c_call;
    released: #type (data: *void,
        self: *wp_drm_lease_device_v1) -> void #c_call;
}

wp_drm_lease_connector_v1 :: struct { #as _proxy: wl_proxy; }
wp_drm_lease_connector_v1_interface: wl_interface;

wp_drm_lease_connector_v1_set_user_data :: inline (self: *wp_drm_lease_connector_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

wp_drm_lease_connector_v1_get_user_data :: inline (self: *wp_drm_lease_connector_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

wp_drm_lease_connector_v1_get_version :: (self: *wp_drm_lease_connector_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

wp_drm_lease_connector_v1_destroy_req :: inline (self: *wp_drm_lease_connector_v1) #c_call {
    wl_proxy_marshal_flags(
        self, WP_DRM_LEASE_CONNECTOR_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

wp_drm_lease_connector_v1_add_listener :: inline (self: *wp_drm_lease_connector_v1, listener: *wp_drm_lease_connector_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

WP_DRM_LEASE_CONNECTOR_V1_DESTROY            : u32 : 0;
WP_DRM_LEASE_CONNECTOR_V1_DESTROY_SINCE      : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_NAME_SINCE         : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_DESCRIPTION_SINCE  : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_CONNECTOR_ID_SINCE : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_DONE_SINCE         : u32 : 1;
WP_DRM_LEASE_CONNECTOR_V1_WITHDRAWN_SINCE    : u32 : 1;

wp_drm_lease_connector_v1_listener :: struct {
    name: #type (data: *void,
        self: *wp_drm_lease_connector_v1,
        name: *u8) -> void #c_call;
    description: #type (data: *void,
        self: *wp_drm_lease_connector_v1,
        description: *u8) -> void #c_call;
    connector_id: #type (data: *void,
        self: *wp_drm_lease_connector_v1,
        connector_id: u32) -> void #c_call;
    done: #type (data: *void,
        self: *wp_drm_lease_connector_v1) -> void #c_call;
    withdrawn: #type (data: *void,
        self: *wp_drm_lease_connector_v1) -> void #c_call;
}

wp_drm_lease_request_v1 :: struct { #as _proxy: wl_proxy; }
wp_drm_lease_request_v1_interface: wl_interface;

wp_drm_lease_request_v1_error_constants :: enum {
    error_wrong_device        :: 0;
    error_duplicate_connector :: 1;
    error_empty_lease         :: 2;
}

wp_drm_lease_request_v1_set_user_data :: inline (self: *wp_drm_lease_request_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

wp_drm_lease_request_v1_get_user_data :: inline (self: *wp_drm_lease_request_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

wp_drm_lease_request_v1_get_version :: (self: *wp_drm_lease_request_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

wp_drm_lease_request_v1_destroy :: inline (self: *wp_drm_lease_request_v1) #c_call {
    wl_proxy_destroy(self);
}

wp_drm_lease_request_v1_request_connector_req :: inline (self: *wp_drm_lease_request_v1, connector: *wp_drm_lease_connector_v1) #c_call {
    wl_proxy_marshal_flags(
        self, WP_DRM_LEASE_REQUEST_V1_REQUEST_CONNECTOR,
        null, wl_proxy_get_version(self), 0,
        connector);
}

wp_drm_lease_request_v1_submit_req :: inline (self: *wp_drm_lease_request_v1) -> *wp_drm_lease_v1 #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, WP_DRM_LEASE_REQUEST_V1_SUBMIT,
        *wp_drm_lease_v1_interface, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY,
        null);
    return cast(*wp_drm_lease_v1) ret;
}

wp_drm_lease_v1 :: struct { #as _proxy: wl_proxy; }
wp_drm_lease_v1_interface: wl_interface;

wp_drm_lease_v1_set_user_data :: inline (self: *wp_drm_lease_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

wp_drm_lease_v1_get_user_data :: inline (self: *wp_drm_lease_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

wp_drm_lease_v1_get_version :: (self: *wp_drm_lease_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

wp_drm_lease_v1_destroy_req :: inline (self: *wp_drm_lease_v1) #c_call {
    wl_proxy_marshal_flags(
        self, WP_DRM_LEASE_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}
wp_drm_lease_v1_add_listener :: inline (self: *wp_drm_lease_v1, listener: *wp_drm_lease_v1_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

WP_DRM_LEASE_V1_DESTROY        : u32 : 0;
WP_DRM_LEASE_V1_DESTROY_SINCE  : u32 : 1;
WP_DRM_LEASE_V1_LEASE_FD_SINCE : u32 : 1;
WP_DRM_LEASE_V1_FINISHED_SINCE : u32 : 1;

wp_drm_lease_v1_listener :: struct {
    lease_fd: #type (data: *void,
        self: *wp_drm_lease_v1,
        leased_fd: s32) -> void #c_call;
    finished: #type (data: *void,
        self: *wp_drm_lease_v1) -> void #c_call;
}


#scope_module
drm_lease_v1_protocol_init :: () {
    drm_lease_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: wp_drm_lease_device_v1::create_lease_request */
        *wp_drm_lease_request_v1_interface,   // 1
        /* EVENT: wp_drm_lease_device_v1::drm_fd */
        null,  // 2
        /* EVENT: wp_drm_lease_device_v1::connector */
        *wp_drm_lease_connector_v1_interface,  // 3
        /* EVENT: wp_drm_lease_connector_v1::name */
        null,  // 4
        /* EVENT: wp_drm_lease_connector_v1::description */
        null,  // 5
        /* EVENT: wp_drm_lease_connector_v1::connector_id */
        null,  // 6
        /* REQUEST: wp_drm_lease_request_v1::request_connector */
        *wp_drm_lease_connector_v1_interface,   // 7
        /* REQUEST: wp_drm_lease_request_v1::submit */
        *wp_drm_lease_v1_interface,   // 8
        /* EVENT: wp_drm_lease_v1::lease_fd */
        null,  // 9
    ];

    wp_drm_lease_device_v1_requests[0] = .{"create_lease_request", "n", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_requests[1] = .{"release", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_events[0] = .{"drm_fd", "h", drm_lease_v1_types_storage.data + 1};
    wp_drm_lease_device_v1_events[1] = .{"connector", "n", drm_lease_v1_types_storage.data + 2};
    wp_drm_lease_device_v1_events[2] = .{"done", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_events[3] = .{"released", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_device_v1_interface = .{
        "wp_drm_lease_device_v1", 1,
        wp_drm_lease_device_v1_requests.count, wp_drm_lease_device_v1_requests.data,
        wp_drm_lease_device_v1_events.count, wp_drm_lease_device_v1_events.data,
    };

    wp_drm_lease_connector_v1_requests[0] = .{"destroy", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_connector_v1_events[0] = .{"name", "s", drm_lease_v1_types_storage.data + 3};
    wp_drm_lease_connector_v1_events[1] = .{"description", "s", drm_lease_v1_types_storage.data + 4};
    wp_drm_lease_connector_v1_events[2] = .{"connector_id", "u", drm_lease_v1_types_storage.data + 5};
    wp_drm_lease_connector_v1_events[3] = .{"done", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_connector_v1_events[4] = .{"withdrawn", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_connector_v1_interface = .{
        "wp_drm_lease_connector_v1", 1,
        wp_drm_lease_connector_v1_requests.count, wp_drm_lease_connector_v1_requests.data,
        wp_drm_lease_connector_v1_events.count, wp_drm_lease_connector_v1_events.data,
    };

    wp_drm_lease_request_v1_requests[0] = .{"request_connector", "o", drm_lease_v1_types_storage.data + 6};
    wp_drm_lease_request_v1_requests[1] = .{"submit", "n", drm_lease_v1_types_storage.data + 7};
    wp_drm_lease_request_v1_interface = .{
        "wp_drm_lease_request_v1", 1,
        wp_drm_lease_request_v1_requests.count, wp_drm_lease_request_v1_requests.data,
        0, null,
    };

    wp_drm_lease_v1_requests[0] = .{"destroy", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_v1_events[0] = .{"lease_fd", "h", drm_lease_v1_types_storage.data + 8};
    wp_drm_lease_v1_events[1] = .{"finished", "", drm_lease_v1_types_storage.data + 0};
    wp_drm_lease_v1_interface = .{
        "wp_drm_lease_v1", 1,
        wp_drm_lease_v1_requests.count, wp_drm_lease_v1_requests.data,
        wp_drm_lease_v1_events.count, wp_drm_lease_v1_events.data,
    };
}

#scope_file
drm_lease_v1_types_storage: []*wl_interface;

wp_drm_lease_device_v1_requests: [2]wl_message;
wp_drm_lease_device_v1_events  : [4]wl_message;

wp_drm_lease_connector_v1_requests: [1]wl_message;
wp_drm_lease_connector_v1_events  : [5]wl_message;

wp_drm_lease_request_v1_requests: [2]wl_message;

wp_drm_lease_v1_requests: [1]wl_message;
wp_drm_lease_v1_events  : [2]wl_message;
