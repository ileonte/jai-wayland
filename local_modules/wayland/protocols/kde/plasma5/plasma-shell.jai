/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: plasma_shell
 */

org_kde_plasma_shell :: struct { #as _proxy: wl_proxy; }
org_kde_plasma_shell_interface: wl_interface;

org_kde_plasma_shell_set_user_data :: inline (self: *org_kde_plasma_shell, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_plasma_shell_get_user_data :: inline (self: *org_kde_plasma_shell) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_plasma_shell_get_version :: (self: *org_kde_plasma_shell) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_plasma_shell_destroy :: inline (self: *org_kde_plasma_shell) #c_call {
    wl_proxy_destroy(self);
}

org_kde_plasma_shell_get_surface_req :: inline (self: *org_kde_plasma_shell, surface: *wl_surface) -> *org_kde_plasma_surface #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SHELL_GET_SURFACE,
        *org_kde_plasma_surface_interface, wl_proxy_get_version(self), 0,
        null, surface);
    return cast(*org_kde_plasma_surface) ret;
}

org_kde_plasma_surface :: struct { #as _proxy: wl_proxy; }
org_kde_plasma_surface_interface: wl_interface;

org_kde_plasma_surface_role_constants :: enum {
    role_normal               :: 0;
    role_desktop              :: 1;
    role_panel                :: 2;
    role_onscreendisplay      :: 3;
    role_notification         :: 4;
    role_tooltip              :: 5;
    role_criticalnotification :: 6;
    role_appletpopup          :: 7;
}

org_kde_plasma_surface_panel_behavior_constants :: enum {
    panel_behavior_always_visible    :: 1;
    panel_behavior_auto_hide         :: 2;
    panel_behavior_windows_can_cover :: 3;
    panel_behavior_windows_go_below  :: 4;
}

org_kde_plasma_surface_error_constants :: enum {
    error_panel_not_auto_hide :: 0;
}

org_kde_plasma_surface_set_user_data :: inline (self: *org_kde_plasma_surface, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_plasma_surface_get_user_data :: inline (self: *org_kde_plasma_surface) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_plasma_surface_get_version :: (self: *org_kde_plasma_surface) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_plasma_surface_destroy_req :: inline (self: *org_kde_plasma_surface) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

org_kde_plasma_surface_set_output_req :: inline (self: *org_kde_plasma_surface, output: *wl_output) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_OUTPUT,
        null, wl_proxy_get_version(self), 0,
        output);
}

org_kde_plasma_surface_set_position_req :: inline (self: *org_kde_plasma_surface, x: s32, y: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_POSITION,
        null, wl_proxy_get_version(self), 0,
        x, y);
}

org_kde_plasma_surface_set_role_req :: inline (self: *org_kde_plasma_surface, role: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_ROLE,
        null, wl_proxy_get_version(self), 0,
        role);
}

org_kde_plasma_surface_set_panel_behavior_req :: inline (self: *org_kde_plasma_surface, flag: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_PANEL_BEHAVIOR,
        null, wl_proxy_get_version(self), 0,
        flag);
}

org_kde_plasma_surface_set_skip_taskbar_req :: inline (self: *org_kde_plasma_surface, skip: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_SKIP_TASKBAR,
        null, wl_proxy_get_version(self), 0,
        skip);
}

org_kde_plasma_surface_panel_auto_hide_hide_req :: inline (self: *org_kde_plasma_surface) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_PANEL_AUTO_HIDE_HIDE,
        null, wl_proxy_get_version(self), 0);
}

org_kde_plasma_surface_panel_auto_hide_show_req :: inline (self: *org_kde_plasma_surface) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_PANEL_AUTO_HIDE_SHOW,
        null, wl_proxy_get_version(self), 0);
}

org_kde_plasma_surface_set_panel_takes_focus_req :: inline (self: *org_kde_plasma_surface, takes_focus: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_PANEL_TAKES_FOCUS,
        null, wl_proxy_get_version(self), 0,
        takes_focus);
}

org_kde_plasma_surface_set_skip_switcher_req :: inline (self: *org_kde_plasma_surface, skip: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_SET_SKIP_SWITCHER,
        null, wl_proxy_get_version(self), 0,
        skip);
}

org_kde_plasma_surface_open_under_cursor_req :: inline (self: *org_kde_plasma_surface) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_PLASMA_SURFACE_OPEN_UNDER_CURSOR,
        null, wl_proxy_get_version(self), 0);
}
org_kde_plasma_surface_add_listener :: inline (self: *org_kde_plasma_surface, listener: *org_kde_plasma_surface_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ORG_KDE_PLASMA_SURFACE_DESTROY                        : u32 : 0;
ORG_KDE_PLASMA_SURFACE_SET_OUTPUT                     : u32 : 1;
ORG_KDE_PLASMA_SURFACE_SET_POSITION                   : u32 : 2;
ORG_KDE_PLASMA_SURFACE_SET_ROLE                       : u32 : 3;
ORG_KDE_PLASMA_SURFACE_SET_PANEL_BEHAVIOR             : u32 : 4;
ORG_KDE_PLASMA_SURFACE_SET_SKIP_TASKBAR               : u32 : 5;
ORG_KDE_PLASMA_SURFACE_PANEL_AUTO_HIDE_HIDE           : u32 : 6;
ORG_KDE_PLASMA_SURFACE_PANEL_AUTO_HIDE_SHOW           : u32 : 7;
ORG_KDE_PLASMA_SURFACE_SET_PANEL_TAKES_FOCUS          : u32 : 8;
ORG_KDE_PLASMA_SURFACE_SET_SKIP_SWITCHER              : u32 : 9;
ORG_KDE_PLASMA_SURFACE_OPEN_UNDER_CURSOR              : u32 : 10;
ORG_KDE_PLASMA_SURFACE_DESTROY_SINCE                  : u32 : 1;
ORG_KDE_PLASMA_SURFACE_SET_OUTPUT_SINCE               : u32 : 1;
ORG_KDE_PLASMA_SURFACE_SET_POSITION_SINCE             : u32 : 1;
ORG_KDE_PLASMA_SURFACE_SET_ROLE_SINCE                 : u32 : 1;
ORG_KDE_PLASMA_SURFACE_SET_PANEL_BEHAVIOR_SINCE       : u32 : 1;
ORG_KDE_PLASMA_SURFACE_SET_SKIP_TASKBAR_SINCE         : u32 : 2;
ORG_KDE_PLASMA_SURFACE_PANEL_AUTO_HIDE_HIDE_SINCE     : u32 : 4;
ORG_KDE_PLASMA_SURFACE_PANEL_AUTO_HIDE_SHOW_SINCE     : u32 : 4;
ORG_KDE_PLASMA_SURFACE_SET_PANEL_TAKES_FOCUS_SINCE    : u32 : 4;
ORG_KDE_PLASMA_SURFACE_SET_SKIP_SWITCHER_SINCE        : u32 : 5;
ORG_KDE_PLASMA_SURFACE_OPEN_UNDER_CURSOR_SINCE        : u32 : 7;
ORG_KDE_PLASMA_SURFACE_AUTO_HIDDEN_PANEL_HIDDEN_SINCE : u32 : 4;
ORG_KDE_PLASMA_SURFACE_AUTO_HIDDEN_PANEL_SHOWN_SINCE  : u32 : 4;

org_kde_plasma_surface_listener :: struct {
    auto_hidden_panel_hidden: #type (data: *void,
        self: *org_kde_plasma_surface) -> void #c_call;
    auto_hidden_panel_shown: #type (data: *void,
        self: *org_kde_plasma_surface) -> void #c_call;
}


#scope_module
plasma_shell_protocol_init :: () {
    plasma_shell_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_plasma_shell::get_surface */
        *org_kde_plasma_surface_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: org_kde_plasma_surface::set_output */
        *wl_output_interface,   // 3
        /* REQUEST: org_kde_plasma_surface::set_position */
        null,  // 4
        null,  // 5
        /* REQUEST: org_kde_plasma_surface::set_role */
        null,  // 6
        /* REQUEST: org_kde_plasma_surface::set_panel_behavior */
        null,  // 7
        /* REQUEST: org_kde_plasma_surface::set_skip_taskbar */
        null,  // 8
        /* REQUEST: org_kde_plasma_surface::set_panel_takes_focus */
        null,  // 9
        /* REQUEST: org_kde_plasma_surface::set_skip_switcher */
        null,  // 10
    ];

    org_kde_plasma_shell_requests[0] = .{"get_surface", "no", plasma_shell_types_storage.data + 0};
    org_kde_plasma_shell_interface = .{
        "org_kde_plasma_shell", 8,
        org_kde_plasma_shell_requests.count, org_kde_plasma_shell_requests.data,
        0, null,
    };

    org_kde_plasma_surface_requests[0] = .{"destroy", "", plasma_shell_types_storage.data + 0};
    org_kde_plasma_surface_requests[1] = .{"set_output", "o", plasma_shell_types_storage.data + 1};
    org_kde_plasma_surface_requests[2] = .{"set_position", "ii", plasma_shell_types_storage.data + 3};
    org_kde_plasma_surface_requests[3] = .{"set_role", "u", plasma_shell_types_storage.data + 4};
    org_kde_plasma_surface_requests[4] = .{"set_panel_behavior", "u", plasma_shell_types_storage.data + 6};
    org_kde_plasma_surface_requests[5] = .{"set_skip_taskbar", "u", plasma_shell_types_storage.data + 7};
    org_kde_plasma_surface_requests[6] = .{"panel_auto_hide_hide", "", plasma_shell_types_storage.data + 0};
    org_kde_plasma_surface_requests[7] = .{"panel_auto_hide_show", "", plasma_shell_types_storage.data + 0};
    org_kde_plasma_surface_requests[8] = .{"set_panel_takes_focus", "u", plasma_shell_types_storage.data + 8};
    org_kde_plasma_surface_requests[9] = .{"set_skip_switcher", "u", plasma_shell_types_storage.data + 9};
    org_kde_plasma_surface_requests[10] = .{"open_under_cursor", "", plasma_shell_types_storage.data + 0};
    org_kde_plasma_surface_events[0] = .{"auto_hidden_panel_hidden", "", plasma_shell_types_storage.data + 0};
    org_kde_plasma_surface_events[1] = .{"auto_hidden_panel_shown", "", plasma_shell_types_storage.data + 0};
    org_kde_plasma_surface_interface = .{
        "org_kde_plasma_surface", 8,
        org_kde_plasma_surface_requests.count, org_kde_plasma_surface_requests.data,
        org_kde_plasma_surface_events.count, org_kde_plasma_surface_events.data,
    };
}

#scope_file
plasma_shell_types_storage: []*wl_interface;

org_kde_plasma_shell_requests: [1]wl_message;

org_kde_plasma_surface_requests: [11]wl_message;
org_kde_plasma_surface_events  : [2]wl_message;
