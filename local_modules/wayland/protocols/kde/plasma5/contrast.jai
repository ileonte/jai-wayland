/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: contrast
 */

org_kde_kwin_contrast_manager :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_contrast_manager_interface: wl_interface;

org_kde_kwin_contrast_manager_set_user_data :: inline (self: *org_kde_kwin_contrast_manager, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_contrast_manager_get_user_data :: inline (self: *org_kde_kwin_contrast_manager) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_contrast_manager_get_version :: (self: *org_kde_kwin_contrast_manager) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_contrast_manager_destroy :: inline (self: *org_kde_kwin_contrast_manager) #c_call {
    wl_proxy_destroy(self);
}

org_kde_kwin_contrast_manager_create_req :: inline (self: *org_kde_kwin_contrast_manager, surface: *wl_surface) -> *org_kde_kwin_contrast #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_MANAGER_CREATE,
        *org_kde_kwin_contrast_interface, wl_proxy_get_version(self), 0,
        null, surface);
    return cast(*org_kde_kwin_contrast) ret;
}

org_kde_kwin_contrast_manager_unset_req :: inline (self: *org_kde_kwin_contrast_manager, surface: *wl_surface) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_MANAGER_UNSET,
        null, wl_proxy_get_version(self), 0,
        surface);
}

org_kde_kwin_contrast :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_contrast_interface: wl_interface;

org_kde_kwin_contrast_set_user_data :: inline (self: *org_kde_kwin_contrast, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_contrast_get_user_data :: inline (self: *org_kde_kwin_contrast) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_contrast_get_version :: (self: *org_kde_kwin_contrast) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_contrast_destroy :: inline (self: *org_kde_kwin_contrast) #c_call {
    wl_proxy_destroy(self);
}

org_kde_kwin_contrast_commit_req :: inline (self: *org_kde_kwin_contrast) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_COMMIT,
        null, wl_proxy_get_version(self), 0);
}

org_kde_kwin_contrast_set_region_req :: inline (self: *org_kde_kwin_contrast, region: *wl_region) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_SET_REGION,
        null, wl_proxy_get_version(self), 0,
        region);
}

org_kde_kwin_contrast_set_contrast_req :: inline (self: *org_kde_kwin_contrast, contrast: wl_fixed_t) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_SET_CONTRAST,
        null, wl_proxy_get_version(self), 0,
        contrast);
}

org_kde_kwin_contrast_set_intensity_req :: inline (self: *org_kde_kwin_contrast, intensity: wl_fixed_t) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_SET_INTENSITY,
        null, wl_proxy_get_version(self), 0,
        intensity);
}

org_kde_kwin_contrast_set_saturation_req :: inline (self: *org_kde_kwin_contrast, saturation: wl_fixed_t) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_SET_SATURATION,
        null, wl_proxy_get_version(self), 0,
        saturation);
}

org_kde_kwin_contrast_release_req :: inline (self: *org_kde_kwin_contrast) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_RELEASE,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

org_kde_kwin_contrast_set_frost_req :: inline (self: *org_kde_kwin_contrast, red: s32, green: s32, blue: s32, alpha: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_SET_FROST,
        null, wl_proxy_get_version(self), 0,
        red, green, blue, alpha);
}

org_kde_kwin_contrast_unset_frost_req :: inline (self: *org_kde_kwin_contrast) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_CONTRAST_UNSET_FROST,
        null, wl_proxy_get_version(self), 0);
}

#scope_module
contrast_protocol_init :: () {
    contrast_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_contrast_manager::create */
        *org_kde_kwin_contrast_interface,   // 1
        *wl_surface_interface,   // 2
        /* REQUEST: org_kde_kwin_contrast_manager::unset */
        *wl_surface_interface,   // 3
        /* REQUEST: org_kde_kwin_contrast::set_region */
        *wl_region_interface,   // 4
        /* REQUEST: org_kde_kwin_contrast::set_contrast */
        null,  // 5
        /* REQUEST: org_kde_kwin_contrast::set_intensity */
        null,  // 6
        /* REQUEST: org_kde_kwin_contrast::set_saturation */
        null,  // 7
        /* REQUEST: org_kde_kwin_contrast::set_frost */
        null,  // 8
        null,  // 9
        null,  // 10
        null,  // 11
    ];

    org_kde_kwin_contrast_manager_requests[0] = .{"create", "no", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_manager_requests[1] = .{"unset", "o", contrast_types_storage.data + 1};
    org_kde_kwin_contrast_manager_interface = .{
        "org_kde_kwin_contrast_manager", 2,
        org_kde_kwin_contrast_manager_requests.count, org_kde_kwin_contrast_manager_requests.data,
        0, null,
    };

    org_kde_kwin_contrast_requests[0] = .{"commit", "", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_requests[1] = .{"set_region", "o", contrast_types_storage.data + 3};
    org_kde_kwin_contrast_requests[2] = .{"set_contrast", "f", contrast_types_storage.data + 4};
    org_kde_kwin_contrast_requests[3] = .{"set_intensity", "f", contrast_types_storage.data + 5};
    org_kde_kwin_contrast_requests[4] = .{"set_saturation", "f", contrast_types_storage.data + 6};
    org_kde_kwin_contrast_requests[5] = .{"release", "", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_requests[6] = .{"set_frost", "iiii", contrast_types_storage.data + 7};
    org_kde_kwin_contrast_requests[7] = .{"unset_frost", "", contrast_types_storage.data + 0};
    org_kde_kwin_contrast_interface = .{
        "org_kde_kwin_contrast", 2,
        org_kde_kwin_contrast_requests.count, org_kde_kwin_contrast_requests.data,
        0, null,
    };
}

#scope_file
contrast_types_storage: []*wl_interface;

org_kde_kwin_contrast_manager_requests: [2]wl_message;

org_kde_kwin_contrast_requests: [8]wl_message;
