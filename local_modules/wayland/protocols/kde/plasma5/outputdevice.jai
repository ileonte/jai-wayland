/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: org_kde_kwin_outputdevice
 */

org_kde_kwin_outputdevice :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_outputdevice_interface: wl_interface;

org_kde_kwin_outputdevice_subpixel_constants :: enum {
    subpixel_unknown        :: 0;
    subpixel_none           :: 1;
    subpixel_horizontal_rgb :: 2;
    subpixel_horizontal_bgr :: 3;
    subpixel_vertical_rgb   :: 4;
    subpixel_vertical_bgr   :: 5;
}

org_kde_kwin_outputdevice_transform_constants :: enum {
    transform_normal      :: 0;
    transform_90          :: 1;
    transform_180         :: 2;
    transform_270         :: 3;
    transform_flipped     :: 4;
    transform_flipped_90  :: 5;
    transform_flipped_180 :: 6;
    transform_flipped_270 :: 7;
}

org_kde_kwin_outputdevice_mode_constants :: enum {
    mode_current   :: 0x1;
    mode_preferred :: 0x2;
}

org_kde_kwin_outputdevice_enablement_constants :: enum {
    enablement_disabled :: 0;
    enablement_enabled  :: 1;
}

org_kde_kwin_outputdevice_capability_constants :: enum {
    capability_overscan :: 1;
    capability_vrr      :: 2;
}

org_kde_kwin_outputdevice_vrr_policy_constants :: enum {
    vrr_policy_never     :: 0;
    vrr_policy_always    :: 1;
    vrr_policy_automatic :: 2;
}

org_kde_kwin_outputdevice_set_user_data :: inline (self: *org_kde_kwin_outputdevice, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_outputdevice_get_user_data :: inline (self: *org_kde_kwin_outputdevice) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_outputdevice_get_version :: (self: *org_kde_kwin_outputdevice) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_outputdevice_destroy :: inline (self: *org_kde_kwin_outputdevice) #c_call {
    wl_proxy_destroy(self);
}

org_kde_kwin_outputdevice_add_listener :: inline (self: *org_kde_kwin_outputdevice, listener: *org_kde_kwin_outputdevice_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ORG_KDE_KWIN_OUTPUTDEVICE_GEOMETRY_SINCE      : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_MODE_SINCE          : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_DONE_SINCE          : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_SCALE_SINCE         : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_EDID_SINCE          : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_ENABLED_SINCE       : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_UUID_SINCE          : u32 : 1;
ORG_KDE_KWIN_OUTPUTDEVICE_SCALEF_SINCE        : u32 : 2;
ORG_KDE_KWIN_OUTPUTDEVICE_COLORCURVES_SINCE   : u32 : 2;
ORG_KDE_KWIN_OUTPUTDEVICE_SERIAL_NUMBER_SINCE : u32 : 2;
ORG_KDE_KWIN_OUTPUTDEVICE_EISA_ID_SINCE       : u32 : 2;
ORG_KDE_KWIN_OUTPUTDEVICE_CAPABILITIES_SINCE  : u32 : 3;
ORG_KDE_KWIN_OUTPUTDEVICE_OVERSCAN_SINCE      : u32 : 3;
ORG_KDE_KWIN_OUTPUTDEVICE_VRR_POLICY_SINCE    : u32 : 4;

org_kde_kwin_outputdevice_listener :: struct {
    geometry: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        x: s32,
        y: s32,
        physical_width: s32,
        physical_height: s32,
        subpixel: s32,
        make: *u8,
        model: *u8,
        transform: s32) -> void #c_call;
    mode: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        flags: u32,
        width: s32,
        height: s32,
        refresh: s32,
        mode_id: s32) -> void #c_call;
    done: #type (data: *void,
        self: *org_kde_kwin_outputdevice) -> void #c_call;
    scale: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        factor: s32) -> void #c_call;
    edid: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        raw: *u8) -> void #c_call;
    enabled: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        enabled: s32) -> void #c_call;
    uuid: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        uuid: *u8) -> void #c_call;
    scalef: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        factor: wl_fixed_t) -> void #c_call;
    colorcurves: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        red: *wl_array,
        green: *wl_array,
        blue: *wl_array) -> void #c_call;
    serial_number: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        serialNumber: *u8) -> void #c_call;
    eisa_id: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        eisaId: *u8) -> void #c_call;
    capabilities: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        flags: u32) -> void #c_call;
    overscan: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        overscan: u32) -> void #c_call;
    vrr_policy: #type (data: *void,
        self: *org_kde_kwin_outputdevice,
        vrr_policy: u32) -> void #c_call;
}


#scope_module
org_kde_kwin_outputdevice_protocol_init :: () {
    org_kde_kwin_outputdevice_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* EVENT: org_kde_kwin_outputdevice::geometry */
        null,  // 1
        null,  // 2
        null,  // 3
        null,  // 4
        null,  // 5
        null,  // 6
        null,  // 7
        null,  // 8
        /* EVENT: org_kde_kwin_outputdevice::mode */
        null,  // 9
        null,  // 10
        null,  // 11
        null,  // 12
        null,  // 13
        /* EVENT: org_kde_kwin_outputdevice::scale */
        null,  // 14
        /* EVENT: org_kde_kwin_outputdevice::edid */
        null,  // 15
        /* EVENT: org_kde_kwin_outputdevice::enabled */
        null,  // 16
        /* EVENT: org_kde_kwin_outputdevice::uuid */
        null,  // 17
        /* EVENT: org_kde_kwin_outputdevice::scalef */
        null,  // 18
        /* EVENT: org_kde_kwin_outputdevice::colorcurves */
        null,  // 19
        null,  // 20
        null,  // 21
        /* EVENT: org_kde_kwin_outputdevice::serial_number */
        null,  // 22
        /* EVENT: org_kde_kwin_outputdevice::eisa_id */
        null,  // 23
        /* EVENT: org_kde_kwin_outputdevice::capabilities */
        null,  // 24
        /* EVENT: org_kde_kwin_outputdevice::overscan */
        null,  // 25
        /* EVENT: org_kde_kwin_outputdevice::vrr_policy */
        null,  // 26
    ];

    org_kde_kwin_outputdevice_events[0] = .{"geometry", "iiiiissi", org_kde_kwin_outputdevice_types_storage.data + 0};
    org_kde_kwin_outputdevice_events[1] = .{"mode", "uiiii", org_kde_kwin_outputdevice_types_storage.data + 1};
    org_kde_kwin_outputdevice_events[2] = .{"done", "", org_kde_kwin_outputdevice_types_storage.data + 0};
    org_kde_kwin_outputdevice_events[3] = .{"scale", "i", org_kde_kwin_outputdevice_types_storage.data + 9};
    org_kde_kwin_outputdevice_events[4] = .{"edid", "s", org_kde_kwin_outputdevice_types_storage.data + 14};
    org_kde_kwin_outputdevice_events[5] = .{"enabled", "i", org_kde_kwin_outputdevice_types_storage.data + 15};
    org_kde_kwin_outputdevice_events[6] = .{"uuid", "s", org_kde_kwin_outputdevice_types_storage.data + 16};
    org_kde_kwin_outputdevice_events[7] = .{"scalef", "f", org_kde_kwin_outputdevice_types_storage.data + 17};
    org_kde_kwin_outputdevice_events[8] = .{"colorcurves", "aaa", org_kde_kwin_outputdevice_types_storage.data + 18};
    org_kde_kwin_outputdevice_events[9] = .{"serial_number", "s", org_kde_kwin_outputdevice_types_storage.data + 19};
    org_kde_kwin_outputdevice_events[10] = .{"eisa_id", "s", org_kde_kwin_outputdevice_types_storage.data + 22};
    org_kde_kwin_outputdevice_events[11] = .{"capabilities", "u", org_kde_kwin_outputdevice_types_storage.data + 23};
    org_kde_kwin_outputdevice_events[12] = .{"overscan", "u", org_kde_kwin_outputdevice_types_storage.data + 24};
    org_kde_kwin_outputdevice_events[13] = .{"vrr_policy", "u", org_kde_kwin_outputdevice_types_storage.data + 25};
    org_kde_kwin_outputdevice_interface = .{
        "org_kde_kwin_outputdevice", 4,
        0, null,
        org_kde_kwin_outputdevice_events.count, org_kde_kwin_outputdevice_events.data,
    };
}

#scope_file
org_kde_kwin_outputdevice_types_storage: []*wl_interface;

org_kde_kwin_outputdevice_events  : [14]wl_message;
