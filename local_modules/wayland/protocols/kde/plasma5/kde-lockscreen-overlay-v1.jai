/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: kde_lockscreen_overlay_v1
 */

kde_lockscreen_overlay_v1 :: struct { #as _proxy: wl_proxy; }
kde_lockscreen_overlay_v1_interface: wl_interface;

kde_lockscreen_overlay_v1_error_constants :: enum {
    error_invalid_surface_state :: 0;
}

kde_lockscreen_overlay_v1_set_user_data :: inline (self: *kde_lockscreen_overlay_v1, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

kde_lockscreen_overlay_v1_get_user_data :: inline (self: *kde_lockscreen_overlay_v1) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

kde_lockscreen_overlay_v1_get_version :: (self: *kde_lockscreen_overlay_v1) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

kde_lockscreen_overlay_v1_allow_req :: inline (self: *kde_lockscreen_overlay_v1, surface: *wl_surface) #c_call {
    wl_proxy_marshal_flags(
        self, KDE_LOCKSCREEN_OVERLAY_V1_ALLOW,
        null, wl_proxy_get_version(self), 0,
        surface);
}

kde_lockscreen_overlay_v1_destroy_req :: inline (self: *kde_lockscreen_overlay_v1) #c_call {
    wl_proxy_marshal_flags(
        self, KDE_LOCKSCREEN_OVERLAY_V1_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

#scope_module
kde_lockscreen_overlay_v1_protocol_init :: () {
    kde_lockscreen_overlay_v1_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: kde_lockscreen_overlay_v1::allow */
        *wl_surface_interface,   // 1
    ];

    kde_lockscreen_overlay_v1_requests[0] = .{"allow", "o", kde_lockscreen_overlay_v1_types_storage.data + 0};
    kde_lockscreen_overlay_v1_requests[1] = .{"destroy", "", kde_lockscreen_overlay_v1_types_storage.data + 0};
    kde_lockscreen_overlay_v1_interface = .{
        "kde_lockscreen_overlay_v1", 1,
        kde_lockscreen_overlay_v1_requests.count, kde_lockscreen_overlay_v1_requests.data,
        0, null,
    };
}

#scope_file
kde_lockscreen_overlay_v1_types_storage: []*wl_interface;

kde_lockscreen_overlay_v1_requests: [2]wl_message;
