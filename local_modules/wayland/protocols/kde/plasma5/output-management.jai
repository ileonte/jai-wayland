/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: outputmanagement
 */

org_kde_kwin_outputmanagement :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_outputmanagement_interface: wl_interface;

org_kde_kwin_outputmanagement_set_user_data :: inline (self: *org_kde_kwin_outputmanagement, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_outputmanagement_get_user_data :: inline (self: *org_kde_kwin_outputmanagement) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_outputmanagement_get_version :: (self: *org_kde_kwin_outputmanagement) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_outputmanagement_destroy :: inline (self: *org_kde_kwin_outputmanagement) #c_call {
    wl_proxy_destroy(self);
}

org_kde_kwin_outputmanagement_create_configuration_req :: inline (self: *org_kde_kwin_outputmanagement) -> *org_kde_kwin_outputconfiguration #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTMANAGEMENT_CREATE_CONFIGURATION,
        *org_kde_kwin_outputconfiguration_interface, wl_proxy_get_version(self), 0,
        null);
    return cast(*org_kde_kwin_outputconfiguration) ret;
}

org_kde_kwin_outputconfiguration :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_outputconfiguration_interface: wl_interface;

org_kde_kwin_outputconfiguration_vrr_policy_constants :: enum {
    vrr_policy_never     :: 0;
    vrr_policy_always    :: 1;
    vrr_policy_automatic :: 2;
}

org_kde_kwin_outputconfiguration_set_user_data :: inline (self: *org_kde_kwin_outputconfiguration, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_outputconfiguration_get_user_data :: inline (self: *org_kde_kwin_outputconfiguration) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_outputconfiguration_get_version :: (self: *org_kde_kwin_outputconfiguration) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_outputconfiguration_enable_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, enable: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_ENABLE,
        null, wl_proxy_get_version(self), 0,
        outputdevice, enable);
}

org_kde_kwin_outputconfiguration_mode_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, mode_id: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_MODE,
        null, wl_proxy_get_version(self), 0,
        outputdevice, mode_id);
}

org_kde_kwin_outputconfiguration_transform_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, transform: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_TRANSFORM,
        null, wl_proxy_get_version(self), 0,
        outputdevice, transform);
}

org_kde_kwin_outputconfiguration_position_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, x: s32, y: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_POSITION,
        null, wl_proxy_get_version(self), 0,
        outputdevice, x, y);
}

org_kde_kwin_outputconfiguration_scale_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, scale: s32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_SCALE,
        null, wl_proxy_get_version(self), 0,
        outputdevice, scale);
}

org_kde_kwin_outputconfiguration_apply_req :: inline (self: *org_kde_kwin_outputconfiguration) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_APPLY,
        null, wl_proxy_get_version(self), 0);
}

org_kde_kwin_outputconfiguration_scalef_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, scale: wl_fixed_t) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_SCALEF,
        null, wl_proxy_get_version(self), 0,
        outputdevice, scale);
}

org_kde_kwin_outputconfiguration_colorcurves_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, red: *wl_array, green: *wl_array, blue: *wl_array) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_COLORCURVES,
        null, wl_proxy_get_version(self), 0,
        outputdevice, red, green, blue);
}

org_kde_kwin_outputconfiguration_destroy_req :: inline (self: *org_kde_kwin_outputconfiguration) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_DESTROY,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

org_kde_kwin_outputconfiguration_overscan_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, overscan: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_OVERSCAN,
        null, wl_proxy_get_version(self), 0,
        outputdevice, overscan);
}

org_kde_kwin_outputconfiguration_set_vrr_policy_req :: inline (self: *org_kde_kwin_outputconfiguration, outputdevice: *org_kde_kwin_outputdevice, policy: u32) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_OUTPUTCONFIGURATION_SET_VRR_POLICY,
        null, wl_proxy_get_version(self), 0,
        outputdevice, policy);
}
org_kde_kwin_outputconfiguration_add_listener :: inline (self: *org_kde_kwin_outputconfiguration, listener: *org_kde_kwin_outputconfiguration_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ORG_KDE_KWIN_OUTPUTCONFIGURATION_ENABLE               : u32 : 0;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_MODE                 : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_TRANSFORM            : u32 : 2;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_POSITION             : u32 : 3;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_SCALE                : u32 : 4;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_APPLY                : u32 : 5;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_SCALEF               : u32 : 6;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_COLORCURVES          : u32 : 7;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_DESTROY              : u32 : 8;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_OVERSCAN             : u32 : 9;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_SET_VRR_POLICY       : u32 : 10;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_ENABLE_SINCE         : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_MODE_SINCE           : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_TRANSFORM_SINCE      : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_POSITION_SINCE       : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_SCALE_SINCE          : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_APPLY_SINCE          : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_SCALEF_SINCE         : u32 : 2;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_COLORCURVES_SINCE    : u32 : 2;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_DESTROY_SINCE        : u32 : 2;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_OVERSCAN_SINCE       : u32 : 3;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_SET_VRR_POLICY_SINCE : u32 : 4;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_APPLIED_SINCE        : u32 : 1;
ORG_KDE_KWIN_OUTPUTCONFIGURATION_FAILED_SINCE         : u32 : 1;

org_kde_kwin_outputconfiguration_listener :: struct {
    applied: #type (data: *void,
        self: *org_kde_kwin_outputconfiguration) -> void #c_call;
    failed: #type (data: *void,
        self: *org_kde_kwin_outputconfiguration) -> void #c_call;
}


#scope_module
outputmanagement_protocol_init :: () {
    outputmanagement_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_outputmanagement::create_configuration */
        *org_kde_kwin_outputconfiguration_interface,   // 1
        /* REQUEST: org_kde_kwin_outputconfiguration::enable */
        *org_kde_kwin_outputdevice_interface,   // 2
        null,  // 3
        /* REQUEST: org_kde_kwin_outputconfiguration::mode */
        *org_kde_kwin_outputdevice_interface,   // 4
        null,  // 5
        /* REQUEST: org_kde_kwin_outputconfiguration::transform */
        *org_kde_kwin_outputdevice_interface,   // 6
        null,  // 7
        /* REQUEST: org_kde_kwin_outputconfiguration::position */
        *org_kde_kwin_outputdevice_interface,   // 8
        null,  // 9
        null,  // 10
        /* REQUEST: org_kde_kwin_outputconfiguration::scale */
        *org_kde_kwin_outputdevice_interface,   // 11
        null,  // 12
        /* REQUEST: org_kde_kwin_outputconfiguration::scalef */
        *org_kde_kwin_outputdevice_interface,   // 13
        null,  // 14
        /* REQUEST: org_kde_kwin_outputconfiguration::colorcurves */
        *org_kde_kwin_outputdevice_interface,   // 15
        null,  // 16
        null,  // 17
        null,  // 18
        /* REQUEST: org_kde_kwin_outputconfiguration::overscan */
        *org_kde_kwin_outputdevice_interface,   // 19
        null,  // 20
        /* REQUEST: org_kde_kwin_outputconfiguration::set_vrr_policy */
        *org_kde_kwin_outputdevice_interface,   // 21
        null,  // 22
    ];

    org_kde_kwin_outputmanagement_requests[0] = .{"create_configuration", "n", outputmanagement_types_storage.data + 0};
    org_kde_kwin_outputmanagement_interface = .{
        "org_kde_kwin_outputmanagement", 4,
        org_kde_kwin_outputmanagement_requests.count, org_kde_kwin_outputmanagement_requests.data,
        0, null,
    };

    org_kde_kwin_outputconfiguration_requests[0] = .{"enable", "oi", outputmanagement_types_storage.data + 1};
    org_kde_kwin_outputconfiguration_requests[1] = .{"mode", "oi", outputmanagement_types_storage.data + 2};
    org_kde_kwin_outputconfiguration_requests[2] = .{"transform", "oi", outputmanagement_types_storage.data + 4};
    org_kde_kwin_outputconfiguration_requests[3] = .{"position", "oii", outputmanagement_types_storage.data + 6};
    org_kde_kwin_outputconfiguration_requests[4] = .{"scale", "oi", outputmanagement_types_storage.data + 8};
    org_kde_kwin_outputconfiguration_requests[5] = .{"apply", "", outputmanagement_types_storage.data + 0};
    org_kde_kwin_outputconfiguration_requests[6] = .{"scalef", "of", outputmanagement_types_storage.data + 11};
    org_kde_kwin_outputconfiguration_requests[7] = .{"colorcurves", "oaaa", outputmanagement_types_storage.data + 13};
    org_kde_kwin_outputconfiguration_requests[8] = .{"destroy", "", outputmanagement_types_storage.data + 0};
    org_kde_kwin_outputconfiguration_requests[9] = .{"overscan", "ou", outputmanagement_types_storage.data + 15};
    org_kde_kwin_outputconfiguration_requests[10] = .{"set_vrr_policy", "ou", outputmanagement_types_storage.data + 19};
    org_kde_kwin_outputconfiguration_events[0] = .{"applied", "", outputmanagement_types_storage.data + 0};
    org_kde_kwin_outputconfiguration_events[1] = .{"failed", "", outputmanagement_types_storage.data + 0};
    org_kde_kwin_outputconfiguration_interface = .{
        "org_kde_kwin_outputconfiguration", 4,
        org_kde_kwin_outputconfiguration_requests.count, org_kde_kwin_outputconfiguration_requests.data,
        org_kde_kwin_outputconfiguration_events.count, org_kde_kwin_outputconfiguration_events.data,
    };
}

#scope_file
outputmanagement_types_storage: []*wl_interface;

org_kde_kwin_outputmanagement_requests: [1]wl_message;

org_kde_kwin_outputconfiguration_requests: [11]wl_message;
org_kde_kwin_outputconfiguration_events  : [2]wl_message;
