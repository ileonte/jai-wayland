/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: kde_output_device_v2
 */

kde_output_device_v2 :: struct { #as _proxy: wl_proxy; }
kde_output_device_v2_interface: wl_interface;

kde_output_device_v2_subpixel_constants :: enum {
    subpixel_unknown        :: 0;
    subpixel_none           :: 1;
    subpixel_horizontal_rgb :: 2;
    subpixel_horizontal_bgr :: 3;
    subpixel_vertical_rgb   :: 4;
    subpixel_vertical_bgr   :: 5;
}

kde_output_device_v2_transform_constants :: enum {
    transform_normal      :: 0;
    transform_90          :: 1;
    transform_180         :: 2;
    transform_270         :: 3;
    transform_flipped     :: 4;
    transform_flipped_90  :: 5;
    transform_flipped_180 :: 6;
    transform_flipped_270 :: 7;
}

kde_output_device_v2_capability_constants :: enum {
    capability_overscan  :: 1;
    capability_vrr       :: 2;
    capability_rgb_range :: 4;
}

kde_output_device_v2_vrr_policy_constants :: enum {
    vrr_policy_never     :: 0;
    vrr_policy_always    :: 1;
    vrr_policy_automatic :: 2;
}

kde_output_device_v2_rgb_range_constants :: enum {
    rgb_range_automatic :: 0;
    rgb_range_full      :: 1;
    rgb_range_limited   :: 2;
}

kde_output_device_v2_set_user_data :: inline (self: *kde_output_device_v2, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

kde_output_device_v2_get_user_data :: inline (self: *kde_output_device_v2) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

kde_output_device_v2_get_version :: (self: *kde_output_device_v2) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

kde_output_device_v2_destroy :: inline (self: *kde_output_device_v2) #c_call {
    wl_proxy_destroy(self);
}


kde_output_device_v2_add_listener :: inline (self: *kde_output_device_v2, listener: *kde_output_device_v2_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

KDE_OUTPUT_DEVICE_V2_GEOMETRY_SINCE      : u32 : 1;
KDE_OUTPUT_DEVICE_V2_CURRENT_MODE_SINCE  : u32 : 1;
KDE_OUTPUT_DEVICE_V2_MODE_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_DONE_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_SCALE_SINCE         : u32 : 1;
KDE_OUTPUT_DEVICE_V2_EDID_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_ENABLED_SINCE       : u32 : 1;
KDE_OUTPUT_DEVICE_V2_UUID_SINCE          : u32 : 1;
KDE_OUTPUT_DEVICE_V2_SERIAL_NUMBER_SINCE : u32 : 1;
KDE_OUTPUT_DEVICE_V2_EISA_ID_SINCE       : u32 : 1;
KDE_OUTPUT_DEVICE_V2_CAPABILITIES_SINCE  : u32 : 1;
KDE_OUTPUT_DEVICE_V2_OVERSCAN_SINCE      : u32 : 1;
KDE_OUTPUT_DEVICE_V2_VRR_POLICY_SINCE    : u32 : 1;
KDE_OUTPUT_DEVICE_V2_RGB_RANGE_SINCE     : u32 : 1;
KDE_OUTPUT_DEVICE_V2_NAME_SINCE          : u32 : 2;

kde_output_device_v2_listener :: struct {
    geometry: #type (data: *void,
        self: *kde_output_device_v2,
        x: s32,
        y: s32,
        physical_width: s32,
        physical_height: s32,
        subpixel: s32,
        make: *u8,
        model: *u8,
        transform: s32) -> void #c_call;
    current_mode: #type (data: *void,
        self: *kde_output_device_v2,
        mode: kde_output_device_mode_v2) -> void #c_call;
    mode: #type (data: *void,
        self: *kde_output_device_v2,
        mode: *kde_output_device_mode_v2) -> void #c_call;
    done: #type (data: *void,
        self: *kde_output_device_v2) -> void #c_call;
    scale: #type (data: *void,
        self: *kde_output_device_v2,
        factor: wl_fixed_t) -> void #c_call;
    edid: #type (data: *void,
        self: *kde_output_device_v2,
        raw: *u8) -> void #c_call;
    enabled: #type (data: *void,
        self: *kde_output_device_v2,
        enabled: s32) -> void #c_call;
    uuid: #type (data: *void,
        self: *kde_output_device_v2,
        uuid: *u8) -> void #c_call;
    serial_number: #type (data: *void,
        self: *kde_output_device_v2,
        serialNumber: *u8) -> void #c_call;
    eisa_id: #type (data: *void,
        self: *kde_output_device_v2,
        eisaId: *u8) -> void #c_call;
    capabilities: #type (data: *void,
        self: *kde_output_device_v2,
        flags: u32) -> void #c_call;
    overscan: #type (data: *void,
        self: *kde_output_device_v2,
        overscan: u32) -> void #c_call;
    vrr_policy: #type (data: *void,
        self: *kde_output_device_v2,
        vrr_policy: u32) -> void #c_call;
    rgb_range: #type (data: *void,
        self: *kde_output_device_v2,
        rgb_range: u32) -> void #c_call;
    name: #type (data: *void,
        self: *kde_output_device_v2,
        name: *u8) -> void #c_call;
}

kde_output_device_mode_v2 :: struct { #as _proxy: wl_proxy; }
kde_output_device_mode_v2_interface: wl_interface;

kde_output_device_mode_v2_set_user_data :: inline (self: *kde_output_device_mode_v2, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

kde_output_device_mode_v2_get_user_data :: inline (self: *kde_output_device_mode_v2) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

kde_output_device_mode_v2_get_version :: (self: *kde_output_device_mode_v2) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

kde_output_device_mode_v2_destroy :: inline (self: *kde_output_device_mode_v2) #c_call {
    wl_proxy_destroy(self);
}

kde_output_device_mode_v2_add_listener :: inline (self: *kde_output_device_mode_v2, listener: *kde_output_device_mode_v2_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

KDE_OUTPUT_DEVICE_MODE_V2_SIZE_SINCE      : u32 : 1;
KDE_OUTPUT_DEVICE_MODE_V2_REFRESH_SINCE   : u32 : 1;
KDE_OUTPUT_DEVICE_MODE_V2_PREFERRED_SINCE : u32 : 1;
KDE_OUTPUT_DEVICE_MODE_V2_REMOVED_SINCE   : u32 : 1;

kde_output_device_mode_v2_listener :: struct {
    size: #type (data: *void,
        self: *kde_output_device_mode_v2,
        width: s32,
        height: s32) -> void #c_call;
    refresh: #type (data: *void,
        self: *kde_output_device_mode_v2,
        refresh: s32) -> void #c_call;
    preferred: #type (data: *void,
        self: *kde_output_device_mode_v2) -> void #c_call;
    removed: #type (data: *void,
        self: *kde_output_device_mode_v2) -> void #c_call;
}


#scope_module
kde_output_device_v2_protocol_init :: () {
    kde_output_device_v2_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* EVENT: kde_output_device_v2::geometry */
        null,  // 1
        null,  // 2
        null,  // 3
        null,  // 4
        null,  // 5
        null,  // 6
        null,  // 7
        null,  // 8
        /* EVENT: kde_output_device_v2::current_mode */
        *kde_output_device_mode_v2_interface,  // 9
        /* EVENT: kde_output_device_v2::mode */
        *kde_output_device_mode_v2_interface,  // 10
        /* EVENT: kde_output_device_v2::scale */
        null,  // 11
        /* EVENT: kde_output_device_v2::edid */
        null,  // 12
        /* EVENT: kde_output_device_v2::enabled */
        null,  // 13
        /* EVENT: kde_output_device_v2::uuid */
        null,  // 14
        /* EVENT: kde_output_device_v2::serial_number */
        null,  // 15
        /* EVENT: kde_output_device_v2::eisa_id */
        null,  // 16
        /* EVENT: kde_output_device_v2::capabilities */
        null,  // 17
        /* EVENT: kde_output_device_v2::overscan */
        null,  // 18
        /* EVENT: kde_output_device_v2::vrr_policy */
        null,  // 19
        /* EVENT: kde_output_device_v2::rgb_range */
        null,  // 20
        /* EVENT: kde_output_device_v2::name */
        null,  // 21
        /* EVENT: kde_output_device_mode_v2::size */
        null,  // 22
        null,  // 23
        /* EVENT: kde_output_device_mode_v2::refresh */
        null,  // 24
    ];

    kde_output_device_v2_events[0] = .{"geometry", "iiiiissi", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_v2_events[1] = .{"current_mode", "o", kde_output_device_v2_types_storage.data + 1};
    kde_output_device_v2_events[2] = .{"mode", "n", kde_output_device_v2_types_storage.data + 9};
    kde_output_device_v2_events[3] = .{"done", "", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_v2_events[4] = .{"scale", "f", kde_output_device_v2_types_storage.data + 10};
    kde_output_device_v2_events[5] = .{"edid", "s", kde_output_device_v2_types_storage.data + 11};
    kde_output_device_v2_events[6] = .{"enabled", "i", kde_output_device_v2_types_storage.data + 12};
    kde_output_device_v2_events[7] = .{"uuid", "s", kde_output_device_v2_types_storage.data + 13};
    kde_output_device_v2_events[8] = .{"serial_number", "s", kde_output_device_v2_types_storage.data + 14};
    kde_output_device_v2_events[9] = .{"eisa_id", "s", kde_output_device_v2_types_storage.data + 15};
    kde_output_device_v2_events[10] = .{"capabilities", "u", kde_output_device_v2_types_storage.data + 16};
    kde_output_device_v2_events[11] = .{"overscan", "u", kde_output_device_v2_types_storage.data + 17};
    kde_output_device_v2_events[12] = .{"vrr_policy", "u", kde_output_device_v2_types_storage.data + 18};
    kde_output_device_v2_events[13] = .{"rgb_range", "u", kde_output_device_v2_types_storage.data + 19};
    kde_output_device_v2_events[14] = .{"name", "s", kde_output_device_v2_types_storage.data + 20};
    kde_output_device_v2_interface = .{
        "kde_output_device_v2", 2,
        0, null,
        kde_output_device_v2_events.count, kde_output_device_v2_events.data,
    };

    kde_output_device_mode_v2_events[0] = .{"size", "ii", kde_output_device_v2_types_storage.data + 21};
    kde_output_device_mode_v2_events[1] = .{"refresh", "i", kde_output_device_v2_types_storage.data + 22};
    kde_output_device_mode_v2_events[2] = .{"preferred", "", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_mode_v2_events[3] = .{"removed", "", kde_output_device_v2_types_storage.data + 0};
    kde_output_device_mode_v2_interface = .{
        "kde_output_device_mode_v2", 1,
        0, null,
        kde_output_device_mode_v2_events.count, kde_output_device_mode_v2_events.data,
    };
}

#scope_file
kde_output_device_v2_types_storage: []*wl_interface;

kde_output_device_v2_events  : [15]wl_message;

kde_output_device_mode_v2_events  : [4]wl_message;
