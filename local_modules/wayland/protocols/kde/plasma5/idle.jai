/*
 * Auto-generated by `wayland-scanner` version 1.0.1
 * Protocol: idle
 */

org_kde_kwin_idle :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_idle_interface: wl_interface;

org_kde_kwin_idle_set_user_data :: inline (self: *org_kde_kwin_idle, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_idle_get_user_data :: inline (self: *org_kde_kwin_idle) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_idle_get_version :: (self: *org_kde_kwin_idle) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_idle_destroy :: inline (self: *org_kde_kwin_idle) #c_call {
    wl_proxy_destroy(self);
}

org_kde_kwin_idle_get_idle_timeout_req :: inline (self: *org_kde_kwin_idle, seat: *wl_seat, timeout: u32) -> *org_kde_kwin_idle_timeout #c_call {
    ret: *wl_proxy = wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_IDLE_GET_IDLE_TIMEOUT,
        *org_kde_kwin_idle_timeout_interface, wl_proxy_get_version(self), 0,
        null, seat, timeout);
    return cast(*org_kde_kwin_idle_timeout) ret;
}

org_kde_kwin_idle_timeout :: struct { #as _proxy: wl_proxy; }
org_kde_kwin_idle_timeout_interface: wl_interface;

org_kde_kwin_idle_timeout_set_user_data :: inline (self: *org_kde_kwin_idle_timeout, user_data: *void) #c_call {
    wl_proxy_set_user_data(self, user_data);
}

org_kde_kwin_idle_timeout_get_user_data :: inline (self: *org_kde_kwin_idle_timeout) -> *void #c_call {
    return wl_proxy_get_user_data(self);
}

org_kde_kwin_idle_timeout_get_version :: (self: *org_kde_kwin_idle_timeout) -> u32 #c_call {
    return wl_proxy_get_version(self);
}

org_kde_kwin_idle_timeout_destroy :: inline (self: *org_kde_kwin_idle_timeout) #c_call {
    wl_proxy_destroy(self);
}

org_kde_kwin_idle_timeout_release_req :: inline (self: *org_kde_kwin_idle_timeout) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_IDLE_TIMEOUT_RELEASE,
        null, wl_proxy_get_version(self), WL_MARSHAL_FLAG_DESTROY);
}

org_kde_kwin_idle_timeout_simulate_user_activity_req :: inline (self: *org_kde_kwin_idle_timeout) #c_call {
    wl_proxy_marshal_flags(
        self, ORG_KDE_KWIN_IDLE_TIMEOUT_SIMULATE_USER_ACTIVITY,
        null, wl_proxy_get_version(self), 0);
}
org_kde_kwin_idle_timeout_add_listener :: inline (self: *org_kde_kwin_idle_timeout, listener: *org_kde_kwin_idle_timeout_listener, data: *void) -> s32 #c_call {
    return wl_proxy_add_listener(self, cast(*generic_c_call) listener, data);
}

ORG_KDE_KWIN_IDLE_TIMEOUT_RELEASE                      : u32 : 0;
ORG_KDE_KWIN_IDLE_TIMEOUT_SIMULATE_USER_ACTIVITY       : u32 : 1;
ORG_KDE_KWIN_IDLE_TIMEOUT_RELEASE_SINCE                : u32 : 1;
ORG_KDE_KWIN_IDLE_TIMEOUT_SIMULATE_USER_ACTIVITY_SINCE : u32 : 1;
ORG_KDE_KWIN_IDLE_TIMEOUT_IDLE_SINCE                   : u32 : 1;
ORG_KDE_KWIN_IDLE_TIMEOUT_RESUMED_SINCE                : u32 : 1;

org_kde_kwin_idle_timeout_listener :: struct {
    idle: #type (data: *void,
        self: *org_kde_kwin_idle_timeout) -> void #c_call;
    resumed: #type (data: *void,
        self: *org_kde_kwin_idle_timeout) -> void #c_call;
}


#scope_module
idle_protocol_init :: () {
    idle_types_storage = .[
        /* __DUMMY__ */
        null,  // 0
        /* REQUEST: org_kde_kwin_idle::get_idle_timeout */
        *org_kde_kwin_idle_timeout_interface,   // 1
        *wl_seat_interface,   // 2
        null,  // 3
    ];

    org_kde_kwin_idle_requests[0] = .{"get_idle_timeout", "nou", idle_types_storage.data + 0};
    org_kde_kwin_idle_interface = .{
        "org_kde_kwin_idle", 1,
        org_kde_kwin_idle_requests.count, org_kde_kwin_idle_requests.data,
        0, null,
    };

    org_kde_kwin_idle_timeout_requests[0] = .{"release", "", idle_types_storage.data + 0};
    org_kde_kwin_idle_timeout_requests[1] = .{"simulate_user_activity", "", idle_types_storage.data + 0};
    org_kde_kwin_idle_timeout_events[0] = .{"idle", "", idle_types_storage.data + 0};
    org_kde_kwin_idle_timeout_events[1] = .{"resumed", "", idle_types_storage.data + 0};
    org_kde_kwin_idle_timeout_interface = .{
        "org_kde_kwin_idle_timeout", 1,
        org_kde_kwin_idle_timeout_requests.count, org_kde_kwin_idle_timeout_requests.data,
        org_kde_kwin_idle_timeout_events.count, org_kde_kwin_idle_timeout_events.data,
    };
}

#scope_file
idle_types_storage: []*wl_interface;

org_kde_kwin_idle_requests: [1]wl_message;

org_kde_kwin_idle_timeout_requests: [2]wl_message;
org_kde_kwin_idle_timeout_events  : [2]wl_message;
